var searchIndex = {};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["glium"] = {"doc":"Easy-to-use, high-level, OpenGL3+ wrapper.","items":[[3,"Blend","glium","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",0,null],[12,"alpha","","The blending function for alpha channels.",0,null],[12,"constant_value","","A constant color that can be used in the blending functions.",0,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",1,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",1,null],[12,"range","","The range of possible Z values in surface coordinates.",1,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",1,null],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory.",null,null],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"LinearSyncFence","","Prototype for a `SyncFence`.",null,null],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished.",null,null],[3,"Version","","Describes a version.",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[12,"2","","",2,null],[3,"Rect","","Area of a surface in pixels.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",3,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",3,null],[12,"width","","Width of the area in pixels.",3,null],[12,"height","","Height of the area in pixels.",3,null],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",4,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",4,null],[12,"width","","Width of the area in pixels. Can be negative.",4,null],[12,"height","","Height of the area in pixels. Can be negative.",4,null],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer.",null,null],[3,"IncompatibleOpenGl","","Returned during Context creation if the OpenGL implementation is too old.",null,null],[12,"0","","",5,null],[4,"Profile","","Describes the OpenGL context profile.",null,null],[13,"Core","","The context uses only future-compatible functions and definitions.",6,null],[13,"Compatibility","","The context includes all immediate mode functions and definitions.",6,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",7,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",7,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",7,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",7,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",7,null],[12,"destination","","The factor to apply to the destination pixel.",7,null],[13,"Subtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction of the source by the destination.",7,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",7,null],[12,"destination","","The factor to apply to the destination pixel.",7,null],[13,"ReverseSubtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction of the destination by the source.",7,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",7,null],[12,"destination","","The factor to apply to the destination pixel.",7,null],[4,"LinearBlendingFactor","glium","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",8,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",8,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",8,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",8,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",8,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",8,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",8,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",8,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",8,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",8,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",8,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",8,null],[13,"OneMinusConstantColor","","Multiply the source or destination compoent by `1.0` minus the corresponding value in `Blend::const_value`.",8,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",8,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination componet by `1.0` minus the alpha value of `Blend::const_value`.",8,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",9,null],[13,"Overwrite","","Always replace the target pixel.",9,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",9,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",9,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",9,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",9,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",9,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",9,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",10,null],[13,"AlwaysFail","","The stencil test always fails.",10,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",10,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfLessOrEqual","glium","`(ref & mask) <= (stencil & mask)`",10,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfMore","glium","`(ref & mask) > (stencil & mask)`",10,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfMoreOrEqual","glium","`(ref & mask) >= (stencil & mask)`",10,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfEqual","glium","`(ref & mask) == (stencil & mask)`",10,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfNotEqual","glium","`(ref & mask) != (stencil & mask)`",10,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[4,"StencilOperation","glium","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",11,null],[13,"Zero","","Writes zero in the stencil buffer.",11,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",11,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",11,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",11,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",11,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",11,null],[13,"Invert","","Inverts each bit of the value.",11,null],[4,"Api","","Describes an OpenGL-related API.",null,null],[13,"Gl","","Regular OpenGL.",12,null],[13,"GlEs","","OpenGL embedded system.",12,null],[4,"Handle","","Handle to a shader or a program.",null,null],[13,"Id","","A numberic identifier.",13,null],[13,"Handle","","A `GLhandleARB`.",13,null],[4,"RawUniformValue","","A raw value of a uniform. \"Raw\" means that it's passed directly with `glUniform`. Textures for example are just passed as integers.",null,null],[13,"SignedInt","","",14,null],[13,"UnsignedInt","","",14,null],[13,"Float","","",14,null],[13,"Mat2","","2x2 column-major matrix.",14,null],[13,"Mat3","","3x3 column-major matrix.",14,null],[13,"Mat4","","4x4 column-major matrix.",14,null],[13,"Vec2","","",14,null],[13,"Vec3","","",14,null],[13,"Vec4","","",14,null],[13,"IntVec2","","",14,null],[13,"IntVec3","","",14,null],[13,"IntVec4","","",14,null],[13,"UnsignedIntVec2","","",14,null],[13,"UnsignedIntVec3","","",14,null],[13,"UnsignedIntVec4","","",14,null],[13,"Double","","",14,null],[13,"DoubleMat2","","",14,null],[13,"DoubleMat3","","",14,null],[13,"DoubleMat4","","",14,null],[13,"DoubleVec2","","",14,null],[13,"DoubleVec3","","",14,null],[13,"DoubleVec4","","",14,null],[13,"Int64","","",14,null],[13,"Int64Vec2","","",14,null],[13,"Int64Vec3","","",14,null],[13,"Int64Vec4","","",14,null],[13,"UnsignedInt64","","",14,null],[13,"UnsignedInt64Vec2","","",14,null],[13,"UnsignedInt64Vec3","","",14,null],[13,"UnsignedInt64Vec4","","",14,null],[4,"DrawError","","Error that can happen while drawing.",null,null],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",15,null],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the program requires.",15,null],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",15,null],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",15,null],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",15,null],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",15,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",15,null],[12,"expected","","The expected type.",15,null],[13,"UniformBufferToValue","glium","Tried to bind a uniform buffer to a single uniform value.",15,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",15,null],[13,"UniformValueToBlock","glium","Tried to bind a single uniform value to a uniform block.",15,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",15,null],[13,"UniformBlockLayoutMismatch","glium","The layout of the content of the uniform buffer does not match the layout of the block.",15,null],[12,"name","glium::DrawError","Name of the block you are trying to bind.",15,null],[12,"err","","The error giving more details about the mismatch.",15,null],[13,"SubroutineUniformToValue","glium","Tried to bind a subroutine uniform like a regular uniform value.",15,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",15,null],[13,"SubroutineUniformMissing","glium","Not all subroutine uniforms of a shader stage were set.",15,null],[12,"stage","glium::DrawError","Shader stage with missing bindings.",15,null],[12,"expected_count","","The expected number of bindings.",15,null],[12,"real_count","","The number of bindings defined by the user.",15,null],[13,"SubroutineNotFound","glium","A non-existant subroutine was referenced.",15,null],[12,"stage","glium::DrawError","The stage the subroutine was searched for.",15,null],[12,"name","","The invalid name of the subroutine.",15,null],[13,"UnsupportedVerticesPerPatch","glium","The number of vertices per patch that has been requested is not supported.",15,null],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",15,null],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",15,null],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",15,null],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",15,null],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",15,null],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",15,null],[13,"WrongQueryOperation","","See the documentation of the `draw_parameters` module for infos.",15,null],[13,"SmoothingNotSupported","","You requested smoothing, but this is not supported by the backend.",15,null],[13,"ProvokingVertexNotSupported","","The requested provoking vertex is not supported by the backend.",15,null],[13,"RasterizerDiscardNotSupported","","Discarding rasterizer output isn't supported by the backend.",15,null],[13,"DepthClampNotSupported","","Depth clamping isn't supported by the backend.",15,null],[13,"BlendingParameterNotSupported","","One of the blending parameters is not supported by the backend.",15,null],[13,"FixedIndexRestartingNotSupported","","Restarting indices (multiple objects per draw call) is not supported by the backend.",15,null],[4,"SwapBuffersError","","Error that can happen when swapping buffers.",null,null],[13,"ContextLost","","The OpenGL context has been lost and needs to be recreated. The `Display` and all the objects associated to it (textures, buffers, programs, etc.) need to be recreated from scratch.",16,null],[13,"AlreadySwapped","","The buffers have already been swapped.",16,null],[5,"get_supported_glsl_version","","Given an API version, this function returns the GLSL version that the implementation is required to support.",null,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[0,"backend","","The `backend` module allows one to link between glium and the OpenGL context..",null,null],[3,"Context","glium::backend","Stores the state and information required for glium to execute commands. Most public glium functions require passing a `Rc<Context>`.",null,null],[4,"ReleaseBehavior","","Defines what happens when you change the current context.",null,null],[13,"None","","Nothing is done when using another context.",17,null],[13,"Flush","","The commands queue of the current context is flushed.",17,null],[8,"Backend","","Trait for types that can be used as a backend for a glium context.",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",18,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc.",18,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",18,{"inputs":[{"name":"self"}],"output":null}],[8,"Facade","","Trait for types that provide a safe access for glium functions.",null,null],[10,"get_context","","Returns an opaque type that contains the OpenGL state, extensions, version, etc.",19,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[0,"buffer","glium","A buffer is a memory location accessible to the video card.",null,null],[3,"Buffer","glium::buffer","Represents a view of a buffer.",null,null],[3,"BufferAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferAnySlice","","Slice of a `Buffer` without any type info.",null,null],[3,"Mapping","","A mapping of a buffer for reading and writing.",null,null],[3,"WriteMapping","","A mapping of a buffer for write only.",null,null],[3,"ReadMapping","","A mapping of a buffer for reading.",null,null],[3,"Inserter","","Allows inserting a fence in the list.",null,null],[3,"BufferView","","Represents a view of a buffer.",null,null],[3,"BufferViewSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAnySlice","","Slice of a `Buffer` without any type info.",null,null],[4,"ReadError","","Error that can happen when reading from a buffer.",null,null],[13,"NotSupported","","The backend doesn't support reading from a buffer.",20,null],[13,"ContextLost","","The context has been lost. Reading from the buffer would return garbage data.",20,null],[4,"CopyError","","Error that can happen when copying data between buffers.",null,null],[13,"NotSupported","","The backend doesn't support copying between buffers.",21,null],[4,"BufferCreationError","","Error that can happen when creating a buffer.",null,null],[13,"OutOfMemory","","Not enough memory to create the buffer.",22,null],[13,"BufferTypeNotSupported","","This type of buffer is not supported.",22,null],[4,"BufferMode","","How the buffer is created.",null,null],[13,"Default","","This is the default mode suitable for any usage. Will never be slow, will never be fast either.",23,null],[13,"Dynamic","","The mode to use when you modify a buffer multiple times per frame. Simiar to `Default` in that it is suitable for most usages.",23,null],[13,"Persistent","","Optimized for when you modify a buffer exactly once per frame. You can modify it more than once per frame, but if you modify it too often things will slow down.",23,null],[13,"Immutable","","Optimized when you will never touch the content of the buffer.",23,null],[4,"BufferType","","Type of a buffer.",null,null],[13,"ArrayBuffer","","",24,null],[13,"PixelPackBuffer","","",24,null],[13,"PixelUnpackBuffer","","",24,null],[13,"UniformBuffer","","",24,null],[13,"CopyReadBuffer","","",24,null],[13,"CopyWriteBuffer","","",24,null],[13,"AtomicCounterBuffer","","",24,null],[13,"DispatchIndirectBuffer","","",24,null],[13,"DrawIndirectBuffer","","",24,null],[13,"QueryBuffer","","",24,null],[13,"ShaderStorageBuffer","","",24,null],[13,"TextureBuffer","","",24,null],[13,"TransformFeedbackBuffer","","",24,null],[13,"ElementArrayBuffer","","",24,null],[5,"is_buffer_read_supported","","Returns true if reading from a buffer is supported by the backend.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"readerror"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"copyerror"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"write","","Writes the whole content.",27,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"len","","Returns the length of the mapping.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set","","Changes an element of the mapping.",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":null}],[11,"insert","","Inserts a new fence.",28,{"inputs":[{"name":"self"},{"name":"commandcontext"}],"output":null}],[11,"get_id","","",29,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new buffer containing the given data. The size of the buffer is equal to the size of the data.",29,{"inputs":[{"name":"f"},{"name":"t"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",29,{"inputs":[{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"write","","Uploads some data in this buffer.",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","Reads the content of the buffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",29,{"inputs":[{"name":"self"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",29,{"inputs":[{"name":"self"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",29,{"inputs":[{"name":"self"}],"output":{"name":"writemapping"}}],[11,"copy_to","","Copies the content of the buffer to another buffer.",29,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"slice_custom_mut","","Same as `slice_custom` but returns a mutable slice.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",29,{"inputs":[{"name":"f"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",29,{"inputs":[{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in this buffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",30,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"write","","Uploads some data in this buffer.",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","Reads the content of the buffer.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",30,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"bufferslice"}}],[11,"from","","",30,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",30,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",31,{"inputs":[{"name":"self"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",31,{"inputs":[{"name":"self"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",31,{"inputs":[{"name":"self"}],"output":{"name":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",31,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","Reads the content of the buffer.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",31,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"buffer"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",32,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",32,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",32,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferany"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"get_id","","",33,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"get_size","","Returns the number of bytes in this slice.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",33,{"inputs":[{"name":"self"}],"output":null}],[11,"get_context","","Returns the context corresponding to this buffer.",33,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Content","","Trait for types of data that can be put inside buffers.",null,null],[16,"Owned","","A type that holds a sized version of the content.",34,null],[10,"read","","Prepares an output buffer, then turns this buffer into an `Owned`.",34,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"get_elements_size","","Returns the size of each element.",34,{"inputs":[],"output":{"name":"usize"}}],[10,"to_void_ptr","","Produces a pointer to the data.",34,null],[10,"ref_from_ptr","","Builds a pointer to this type from a raw pointer.",34,null],[10,"is_size_suitable","","Returns true if the size is suitable to store a type like this.",34,{"inputs":[{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"buffercreationerror"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"buffermode"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"buffermode"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"buffertype"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"buffertype"}],"output":{"name":"bool"}}],[0,"debug","glium","",null,null],[3,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue.",null,null],[4,"DebugCallbackBehavior","","Describes the behavior that the debug output should have.",null,null],[13,"Ignore","","Don't do anything. This is the default behavior in release.",35,null],[13,"DebugMessageOnError","","Print a message on stdout on error, except in some circumstances like when compiling shaders. This is the default behavior in debug mode.",35,null],[13,"PrintAll","","Print every single output received by the driver.",35,null],[13,"Custom","","Use a custom callback.",35,null],[12,"callback","glium::debug::DebugCallbackBehavior","The function to be called.",35,null],[12,"synchronous","","Whether or not it should be called immediately (true) or asynchronously (false).",35,null],[4,"Severity","glium::debug","Severity of a debug message.",null,null],[13,"Notification","","Anything that isn't an error or performance issue.",36,null],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",36,null],[13,"Medium","","Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality.",36,null],[13,"High","","All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior.",36,null],[4,"Source","","Source of a debug message.",null,null],[13,"Api","","Calls to the OpenGL API.",37,null],[13,"WindowSystem","","Calls to a window-system API.",37,null],[13,"ShaderCompiler","","A compiler for a shading language.",37,null],[13,"ThirdParty","","An application associated with Openctxt.gl.",37,null],[13,"Application","","Explicitly generated by Glium or the application.",37,null],[13,"OtherSource","","",37,null],[4,"MessageType","","Type of a debug message.",null,null],[13,"Error","","An error, typically from the API",38,null],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",38,null],[13,"UndefinedBehavior","","Something has invoked undefined behavior",38,null],[13,"Portability","","Some functionality the user relies upon is not portable",38,null],[13,"Performance","","Code has triggered possible performance issues",38,null],[13,"Marker","","Command stream annotation",38,null],[13,"PushGroup","","Entering a debug group",38,null],[13,"PopGroup","","Leaving a debug group",38,null],[13,"Other","","Any other event",38,null],[6,"DebugCallback","","Represents a callback that can be used for the debug output feature of OpenGL.",null,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"severity"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",39,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",39,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"draw_parameters","glium","Describes miscellaneous parameters to be used when drawing.",null,null],[3,"Blend","glium::draw_parameters","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",0,null],[12,"alpha","","The blending function for alpha channels.",0,null],[12,"constant_value","","A constant color that can be used in the blending functions.",0,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",1,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",1,null],[12,"range","","The range of possible Z values in surface coordinates.",1,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",1,null],[3,"SamplesPassedQuery","","A query that allows you to know the number of samples written to the output during the draw operations where this query was active.",null,null],[3,"TimeElapsedQuery","","A query that allows you to know the number of nanoseconds that have elapsed during the draw operations.",null,null],[3,"PrimitivesGeneratedQuery","","Query that allows you to know the number of primitives generated by the geometry shader. Will stay at `0` if you use it without any active geometry shader.",null,null],[3,"AnySamplesPassedQuery","","A query type that allows you to know whether any sample has been written to the output during the operations executed with this query.",null,null],[3,"TransformFeedbackPrimitivesWrittenQuery","","Query that allows you to know the number of primitives generated by transform feedback.",null,null],[3,"Stencil","","Describes the parameters that must be used for the stencil operations when drawing.",null,null],[12,"test_clockwise","","A comparison against the existing value in the stencil buffer.",40,null],[12,"reference_value_clockwise","","Reference value that is used by `stencil_test_clockwise`, `stencil_fail_operation_clockwise`, `stencil_pass_depth_fail_operation_clockwise` and `stencil_depth_pass_operation_clockwise`.",40,null],[12,"write_mask_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",40,null],[12,"fail_operation_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",40,null],[12,"pass_depth_fail_operation_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",40,null],[12,"depth_pass_operation_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",40,null],[12,"test_counter_clockwise","","A comparaison against the existing value in the stencil buffer.",40,null],[12,"reference_value_counter_clockwise","","Reference value that is used by `stencil_test_counter_clockwise`, `stencil_fail_operation_counter_clockwise`, `stencil_pass_depth_fail_operation_counter_clockwise` and `stencil_depth_pass_operation_counter_clockwise`.",40,null],[12,"write_mask_counter_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",40,null],[12,"fail_operation_counter_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",40,null],[12,"pass_depth_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",40,null],[12,"depth_pass_operation_counter_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",40,null],[3,"DrawParameters","","Represents the parameters to use when drawing.",null,null],[12,"depth","","How the fragment will interact with the depth buffer.",41,null],[12,"stencil","","How the fragment will interact with the stencil buffer.",41,null],[12,"blend","","The effect that the GPU will use to merge the existing pixel with the pixel that is being written.",41,null],[12,"color_mask","","Allows you to disable some color components.",41,null],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",41,null],[12,"point_size","","Diameter in pixels of the points to draw when drawing points.",41,null],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",41,null],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",41,null],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",41,null],[12,"dithering","","Whether dithering is activated. Default value is `true`.",41,null],[12,"viewport","","The viewport to use when drawing.",41,null],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",41,null],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default value is `true`.",41,null],[12,"samples_passed_query","","If set, each sample (ie. usually each pixel) written to the output adds one to the counter of the `SamplesPassedQuery`.",41,null],[12,"time_elapsed_query","","If set, the time it took for the GPU to execute this draw command is added to the total stored inside the `TimeElapsedQuery`.",41,null],[12,"primitives_generated_query","","If set, the number of primitives generated is added to the total stored inside the query.",41,null],[12,"transform_feedback_primitives_written_query","","If set, the number of vertices written by transform feedback.",41,null],[12,"condition","","If set, the commands will only be executed if the specified query contains `true` or a number different than 0.",41,null],[12,"transform_feedback","","If set, then the generated primitives will be written back to a buffer.",41,null],[12,"smooth","","If set, then the generated primitives will be smoothed.",41,null],[12,"provoking_vertex","","In your vertex shader or geometry shader, you have the possibility to mark some output varyings as `flat`. If this is the case, the value of one of the vertices will be used for the whole primitive. This variable allows you to specify which vertex.",41,null],[12,"primitive_bounding_box","","Hint for the GPU of the bounding box of the geometry.",41,null],[12,"primitive_restart_index","","If enabled, will split the index buffer (if any is used in the draw call)  at the MAX value of the IndexType (u8::MAX, u16::MAX or u32::MAX) and start a new primitive of the same type (\"primitive restarting\"). Supported on > OpenGL 3.1 or OpenGL ES 3.0.  If the backend does not support GL_PRIMITIVE_RESTART_FIXED_INDEX, an Error  of type `FixedIndexRestartingNotSupported` will be returned.",41,null],[3,"ConditionalRendering","","Condition whether to render or not.",null,null],[12,"query","","The query to use.",42,null],[12,"wait","","If true, the GPU will wait until the query result has been obtained. If false, the GPU is free to ignore the query and draw anyway.",42,null],[12,"per_region","","If true, only samples that match those that were written with the query active will be drawn.",42,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",7,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",7,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",7,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",7,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",7,null],[12,"destination","","The factor to apply to the destination pixel.",7,null],[13,"Subtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted substraction of the source by the destination.",7,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",7,null],[12,"destination","","The factor to apply to the destination pixel.",7,null],[13,"ReverseSubtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted substraction of the destination by the source.",7,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",7,null],[12,"destination","","The factor to apply to the destination pixel.",7,null],[4,"LinearBlendingFactor","glium::draw_parameters","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",8,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",8,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",8,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",8,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",8,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",8,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",8,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",8,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",8,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",8,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",8,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",8,null],[13,"OneMinusConstantColor","","Multiply the source or destination compoent by `1.0` minus the corresponding value in `Blend::const_value`.",8,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",8,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination componet by `1.0` minus the alpha value of `Blend::const_value`.",8,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",9,null],[13,"Overwrite","","Always replace the target pixel.",9,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",9,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",9,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",9,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",9,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",9,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",9,null],[4,"DepthClamp","","Specifies whether the depth value of samples should be clamped to `0.0` or `1.0`.",null,null],[13,"NoClamp","","Do not clamp. Samples with values outside of the `[0.0, 1.0]` range will be discarded.",43,null],[13,"Clamp","","Clamp the depth values. All samples will always be drawn.",43,null],[13,"ClampNear","","Depth values inferior to `0.0` will be clamped to `0.0`.",43,null],[13,"ClampFar","","Depth values superior to `1.0` will be clamped to `1.0`.",43,null],[4,"QueryCreationError","","Error that can happen when creating a query object.",null,null],[13,"NotSupported","","The given query type is not supported.",44,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",10,null],[13,"AlwaysFail","","The stencil test always fails.",10,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",10,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfLessOrEqual","glium::draw_parameters","`(ref & mask) <= (stencil & mask)`",10,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfMore","glium::draw_parameters","`(ref & mask) > (stencil & mask)`",10,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfMoreOrEqual","glium::draw_parameters","`(ref & mask) >= (stencil & mask)`",10,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfEqual","glium::draw_parameters","`(ref & mask) == (stencil & mask)`",10,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[13,"IfNotEqual","glium::draw_parameters","`(ref & mask) != (stencil & mask)`",10,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",10,null],[4,"StencilOperation","glium::draw_parameters","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",11,null],[13,"Zero","","Writes zero in the stencil buffer.",11,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",11,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",11,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",11,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",11,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",11,null],[13,"Invert","","Inverts each bit of the value.",11,null],[4,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling is purely an optimization. If you don't know what this does, just use `CullingDisabled`.",null,null],[13,"CullingDisabled","","All triangles are always drawn.",45,null],[13,"CullCounterClockwise","","Triangles whose vertices are counterclockwise won't be drawn.",45,null],[13,"CullClockwise","","Triangles whose vertices are clockwise won't be drawn.",45,null],[4,"PolygonMode","","Defines how the device should render polygons.",null,null],[13,"Point","","Only draw a single point at each vertex.",46,null],[13,"Line","","Only draw a line in the boundaries of each polygon.",46,null],[13,"Fill","","Fill the content of the polygon. This is the default mode.",46,null],[4,"Smooth","","Specifies a hint for the smoothing.",null,null],[13,"Fastest","","The most efficient option should be chosen.",47,null],[13,"Nicest","","The most correct, or highest quality, option should be chosen.",47,null],[13,"DontCare","","No preference.",47,null],[4,"ProvokingVertex","","The vertex to use for flat shading.",null,null],[13,"LastVertex","","Use the last vertex of each primitive.",48,null],[13,"FirstVertex","","Use the first vertex of each primitive.",48,null],[4,"SamplesQueryParam","","The query to use for samples counting.",null,null],[13,"SamplesPassedQuery","","A `SamplesPassedQuery`.",49,null],[13,"AnySamplesPassedQuery","","A `AnySamplesPassedQuery`.",49,null],[5,"validate","","DEPRECATED. Checks parameters and returns an error if something is wrong.",null,{"inputs":[{"name":"context"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"clone","glium","",0,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"alpha_blending","","Returns a blend effect to add transparent objects over others.",0,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"blend"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"blendingfunction"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"linearblendingfactor"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"depth"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"depthtest"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","glium::draw_parameters","",43,{"inputs":[{"name":"self"}],"output":{"name":"depthclamp"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"depthclamp"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"querycreationerror"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",50,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",50,{"inputs":[{"name":"self"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",50,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",51,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",51,{"inputs":[{"name":"self"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",51,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",52,{"inputs":[{"name":"f"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",52,{"inputs":[{"name":"self"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",52,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",53,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",53,{"inputs":[{"name":"self"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",53,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",54,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",54,{"inputs":[{"name":"self"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",54,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"stencil"}}],[11,"clone","glium","",10,{"inputs":[{"name":"self"}],"output":{"name":"stenciltest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stenciloperation"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"clone","glium::draw_parameters","",45,{"inputs":[{"name":"self"}],"output":{"name":"backfacecullingmode"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"polygonmode"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"smooth"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"provokingvertex"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"provokingvertex"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"drawparameters"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"conditionalrendering"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",49,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",49,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"drawparameters"}}],[0,"framebuffer","glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.",null,null],[3,"DefaultFramebuffer","glium::framebuffer","A framebuffer which has only one color attachment.",null,null],[3,"RenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"RenderBufferAny","","A RenderBuffer of indeterminate type.",null,null],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"SimpleFrameBuffer","","A framebuffer which has only one color attachment.",null,null],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment.",null,null],[3,"EmptyFrameBuffer","","A framebuffer with no attachment at all.",null,null],[4,"DefaultFramebufferAttachment","","One of the color attachments on the default framebuffer.",null,null],[13,"BackLeft","","The backbuffer for the left eye. Equivalent to the backbuffer if stereoscopy is disabled.",55,null],[13,"BackRight","","The backbuffer for the right eye. May not be present.",55,null],[13,"FrontLeft","","The frontbuffer for the left eye. Equivalent to the frontbuffer if stereoscopy is disabled. May not be accessible.",55,null],[13,"FrontRight","","The frontbuffer for the right eye. May not be present or accessible.",55,null],[4,"RenderBufferCreationError","","Error while creating a render buffer.",null,null],[13,"FormatNotSupported","","The requested format is not supported.",56,null],[4,"ValidationError","","An error that can happen while validating attachments.",null,null],[13,"EmptyFramebufferObjectsNotSupported","","You requested an empty framebuffer object, but they are not supported.",57,null],[13,"EmptyFramebufferUnsupportedDimensions","","The requested characteristics of an empty framebuffer object are out of range.",57,null],[13,"DimensionsMismatchNotSupported","","The backend doesn't support attachments with various dimensions.",57,null],[13,"SamplesCountMismatch","","All attachments must have the same number of samples.",57,null],[13,"TooManyColorAttachments","","Backends only support a certain number of color attachments.",57,null],[12,"maximum","glium::framebuffer::ValidationError","Maximum number of attachments.",57,null],[12,"obtained","","Number of attachments that were given.",57,null],[4,"ColorAttachment","glium::framebuffer","Describes an attachment for a color buffer.",null,null],[13,"Texture","","A texture.",58,null],[13,"RenderBuffer","","A render buffer.",58,null],[4,"DepthAttachment","","Describes an attachment for a depth buffer.",null,null],[13,"Texture","","A texture.",59,null],[13,"RenderBuffer","","A render buffer.",59,null],[4,"StencilAttachment","","Describes an attachment for a stencil buffer.",null,null],[13,"Texture","","A texture.",60,null],[13,"RenderBuffer","","A render buffer.",60,null],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer.",null,null],[13,"Texture","","A texture.",61,null],[13,"RenderBuffer","","A render buffer.",61,null],[5,"is_dimensions_mismatch_supported","","Returns true if the backend supports attachments with varying dimensions.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"defaultframebufferattachment"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"back_left","","Creates a `DefaultFramebuffer` with the back left buffer.",62,{"inputs":[{"name":"f"}],"output":{"name":"defaultframebuffer"}}],[11,"clear","","",62,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",62,null],[11,"get_depth_buffer_bits","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"draw","","",62,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",62,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",62,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",62,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",62,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",56,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"creationerror"}}],[11,"new","","Builds a new render buffer.",63,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",63,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new render buffer.",64,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",64,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new render buffer.",65,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",65,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new render buffer.",66,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",66,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",67,null],[11,"get_samples","","Returns the number of samples of the render buffer, or `None` if multisampling isn't enabled.",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_context","","Returns the context used to create this renderbuffer.",67,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"kind","","Returns the kind of renderbuffer.",67,{"inputs":[{"name":"self"}],"output":{"name":"texturekind"}}],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"get_id","","",67,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments.",null,null],[10,"to_color_attachment","","Builds the `ColorAttachment`.",68,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments.",null,null],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",69,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments.",null,null],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",70,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments.",null,null],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",71,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[11,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"c"}],"output":{"name":"result"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth buffer, but no stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"result"}}],[11,"depth_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth buffer, and a stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"c"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"depth_and_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",72,{"inputs":[{"name":"f"},{"name":"c"},{"name":"s"}],"output":{"name":"result"}}],[11,"stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",72,{"inputs":[{"name":"f"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"result"}}],[11,"depth_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",72,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"name":"result"}}],[11,"clear","","",72,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",72,null],[11,"get_depth_buffer_bits","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"draw","","",72,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",72,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",72,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",72,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",72,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",73,{"inputs":[{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",73,{"inputs":[{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer, and a stencil buffer.",73,{"inputs":[{"name":"f"},{"name":"i"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a stencil buffer, but no depth buffer.",73,{"inputs":[{"name":"f"},{"name":"i"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth-stencil buffer.",73,{"inputs":[{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"name":"result"}}],[11,"clear","","",73,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",73,null],[11,"get_depth_buffer_bits","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"draw","","",73,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",73,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",73,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",73,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",73,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"is_supported","","Returns true if empty framebuffers are supported by the backend.",74,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"is_layered_supported","","Returns true if layered empty framebuffers are supported by the backend.",74,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"get_max_supported_width","","Returns the maximum width of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",74,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_height","","Returns the maximum height of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",74,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_samples","","Returns the maximum number of samples of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",74,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_layers","","Returns the maximum number of layers of empty framebuffers that the backend supports, or `None` if layered empty framebuffers are not supported.",74,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[11,"new","","Creates a `EmptyFrameBuffer`.",74,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"option"},{"name":"option"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clear","","",74,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",74,null],[11,"get_depth_buffer_bits","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"draw","","",74,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",74,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",74,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",74,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",74,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[11,"to_color_attachment","","",58,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[11,"to_depth_attachment","","",59,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[11,"to_stencil_attachment","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","","",61,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"index","glium","In order to draw, you need to provide a way for the video card to know how to link primitives together.",null,null],[3,"IndexBuffer","glium::index","A list of indices loaded in the graphics card's memory.",null,null],[3,"IndexBufferSlice","","Slice of an `IndexBuffer`.",null,null],[3,"IndexBufferAny","","An `IndexBuffer` without any type information.",null,null],[3,"DrawCommandsNoIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandNoIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of vertices to draw.",75,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",75,null],[12,"first_index","","First vertex to draw in the vertices source.",75,null],[12,"base_instance","","Numero of the first instance to draw.",75,null],[3,"DrawCommandsIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of indices to use in the index buffer.",76,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",76,null],[12,"first_index","","First index to draw in the index buffer.",76,null],[12,"base_vertex","","Value to add to each index.",76,null],[12,"base_instance","","Numero of the first instance to draw.",76,null],[3,"NoIndices","","Marker that can be used as an indices source when you don't need indices.",null,null],[12,"0","","",77,null],[4,"BufferCreationError","","Error that can happen while creating an index buffer.",null,null],[13,"IndexTypeNotSupported","","The type of index is not supported by the backend.",78,null],[13,"PrimitiveTypeNotSupported","","The type of primitives is not supported by the backend.",78,null],[13,"BufferCreationError","","An error happened while creating the buffer.",78,null],[4,"IndicesSource","","Describes a source of indices used for drawing.",null,null],[13,"IndexBuffer","","A buffer uploaded in video memory.",79,null],[12,"buffer","glium::index::IndicesSource","The buffer.",79,null],[12,"data_type","","Type of indices in the buffer.",79,null],[12,"primitives","","Type of primitives contained in the vertex source.",79,null],[13,"MultidrawArray","glium::index","Use a multidraw indirect buffer without indices.",79,null],[12,"buffer","glium::index::IndicesSource","The buffer.",79,null],[12,"primitives","","Type of primitives contained in the vertex source.",79,null],[13,"MultidrawElement","glium::index","Use a multidraw indirect buffer with indices.",79,null],[12,"commands","glium::index::IndicesSource","The buffer of the commands.",79,null],[12,"indices","","The buffer of the indices.",79,null],[12,"data_type","","Type of indices in the buffer.",79,null],[12,"primitives","","Type of primitives contained in the vertex source.",79,null],[13,"NoIndices","glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in the vertices source.",79,null],[12,"primitives","glium::index::IndicesSource","Type of primitives contained in the vertex source.",79,null],[4,"PrimitiveType","glium::index","List of available primitives.",null,null],[13,"Points","","Each vertex is an invidiual point.",80,null],[13,"LinesList","","Vertices are grouped by chunks of two vertices. Each chunk represents a line.",80,null],[13,"LinesListAdjacency","","Vertices are grouped by chunks of four vertices. The second and third vertices of each chunk represents the line.",80,null],[13,"LineStrip","","Each vertex (except the last one) forms a line with the next vertex.",80,null],[13,"LineStripAdjacency","","Similar to `LineStrip`, but with an additional vertex at the beginning and at the end that represent the vertices adjacent to the first and last ones.",80,null],[13,"LineLoop","","Each vertex forms a line with the next vertex. The last vertex form a line with the first one.",80,null],[13,"TrianglesList","","Vertices are grouped by chunks of three vertices. Each chunk represents a triangle.",80,null],[13,"TrianglesListAdjacency","","Vertices are grouped by chunks of six vertices. The first, third and fifth vertices represent a triangle.",80,null],[13,"TriangleStrip","","Each vertex (except the first one and the last one) forms a triangle with the previous and the next vertices.",80,null],[13,"TriangleStripAdjacency","","Each even vertex forms a triangle with vertices `n+2` and `n+4`.",80,null],[13,"TriangleFan","","Starting at the second vertex, each vertex forms a triangle with the next and the first vertices.",80,null],[13,"Patches","","Vertices are grouped by chunks of `vertices_per_patch` vertices.",80,null],[12,"vertices_per_patch","glium::index::PrimitiveType","Number of vertices per patch.",80,null],[4,"IndexType","glium::index","Type of the indices in an index source.",null,null],[13,"U8","","u8",81,null],[13,"U16","","u16",81,null],[13,"U32","","u32",81,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",78,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","glium","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",82,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",82,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",82,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",82,null],[11,"empty","","Builds a new empty index buffer.",82,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",82,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",82,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",82,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",82,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",82,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",82,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"deref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",82,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",31,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"get_id","glium","",82,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from","glium::index","",79,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",83,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",83,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",83,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"deref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::index","",79,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"from","","",79,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",84,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",84,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"deref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bufferany"}}],[11,"deref_mut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bufferany"}}],[11,"from","","",84,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbufferany"}}],[11,"from","","",79,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"indicessource"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"drawcommandnoindices"}}],[11,"matches","","",75,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",75,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"drawcommandindices"}}],[11,"matches","","",76,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",76,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"empty","","Builds an empty buffer.",85,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",85,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",85,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",85,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",85,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"indicessource"}}],[11,"deref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",85,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",31,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffermutslice"}}],[11,"empty","glium::index","Builds an empty buffer.",86,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",86,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",86,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",86,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",86,{"inputs":[{"name":"self"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"deref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",31,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffermutslice"}}],[8,"Index","glium::index","An index from the index buffer.",null,null],[10,"get_type","","Returns the `IndexType` corresponding to this type.",87,{"inputs":[],"output":{"name":"indextype"}}],[11,"is_supported","","Returns true if this type of index is supported by the backend.",87,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",79,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports this type of primitives.",80,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"noindices"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",79,{"inputs":[{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"from","","",79,{"inputs":[{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",81,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[0,"pixel_buffer","glium","DEPRECATED. Moved to the `texture` module.",null,null],[0,"program","","Items related to creating an OpenGL program.",null,null],[3,"ComputeShader","glium::program","A combination of compute shaders linked together.",null,null],[3,"ComputeCommand","","Represents a compute shader command waiting to be dispatched.",null,null],[12,"num_groups_x","","Number of X groups.",88,null],[12,"num_groups_y","","Number of Y groups.",88,null],[12,"num_groups_z","","Number of Z groups.",88,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"Uniform","","Information about a uniform (except its name).",null,null],[12,"location","","The location of the uniform.",89,null],[12,"ty","","Type of the uniform.",89,null],[12,"size","","If it is an array, the number of elements.",89,null],[3,"UniformBlock","","Information about a uniform block (except its name).",null,null],[12,"id","","Indentifier of the block.",90,null],[12,"initial_binding","","Initial bind point of the block.",90,null],[12,"size","","Size in bytes of the data in the block.",90,null],[12,"layout","","Layout of the block.",90,null],[3,"Attribute","","Information about an attribute of a program (except its name).",null,null],[12,"location","","The index of the uniform.",91,null],[12,"ty","","Type of the attribute.",91,null],[12,"size","","Number of elements of the attribute.",91,null],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback.",null,null],[12,"name","","Name of the variable.",92,null],[12,"offset","","Number of bytes between the start of the first element and the start of this one.",92,null],[12,"size","","Size in bytes of this value.",92,null],[12,"ty","","Type of the value.",92,null],[3,"TransformFeedbackBuffer","","Describes the layout of a buffer that can receive transform feedback output.",null,null],[12,"id","","Slot of this buffer.",93,null],[12,"elements","","List of elements inside the buffer.",93,null],[12,"stride","","Size in bytes between two consecutive elements.",93,null],[3,"SubroutineData","","Contains all subroutine data of a program.",null,null],[12,"location_counts","","Number of subroutine uniform locations per shader stage. This is not equal to the number of subroutine uniforms per stage, because users can use `#layout(location=...)`.",94,null],[12,"subroutine_uniforms","","The list of all subroutine uniforms of the program stored in a structured way to enable fast lookups. A subroutine uniform is uniquely defined by a name and a shader stage.",94,null],[3,"SubroutineUniform","","Information about a Subroutine Uniform (except name)",null,null],[12,"index","","The index of the subroutine uniform. Needed to query information from the OpenGL backend.",95,null],[12,"location","","The location of the uniform. This is used to bind subroutines to this subroutine uniform.",95,null],[12,"size","","If the uniform is an array, the size of the array.",95,null],[12,"compatible_subroutines","","A list of subroutines that can potentially be used with this uniform.",95,null],[3,"SourceCode","","Represents the source code of a program.",null,null],[12,"vertex_shader","","Source code of the vertex shader.",96,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",96,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",96,null],[12,"geometry_shader","","Source code of the optional geometry shader.",96,null],[12,"fragment_shader","","Source code of the fragment shader.",96,null],[3,"Binary","","Represents the compiled binary data of a program.",null,null],[12,"format","","An implementation-defined format.",97,null],[12,"content","","The binary data.",97,null],[4,"BlockLayout","","Layout of a shader storage buffer or a uniform buffer.",null,null],[13,"Struct","","Multiple elements, each having a name.",98,null],[12,"members","glium::program::BlockLayout","The list of elements, with `name`/`layout` pairs.",98,null],[13,"BasicType","glium::program","A basic element.",98,null],[12,"ty","glium::program::BlockLayout","Type of data.",98,null],[12,"offset_in_buffer","","Offset of this element in bytes from the start of the buffer.",98,null],[13,"Array","glium::program","A fixed-size array.",98,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",98,null],[12,"length","","Number of elements in the array.",98,null],[13,"DynamicSizedArray","glium::program","An array whose size isn't known at compile-time. Can only be used as the last element of a buffer.",98,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",98,null],[4,"OutputPrimitives","glium::program","Type of primitives that is being output by transform feedback.",null,null],[13,"Points","","Points.",99,null],[13,"Lines","","Lines.",99,null],[13,"Triangles","","Triangles.",99,null],[13,"Quads","","Quads.",99,null],[4,"TransformFeedbackMode","","Type of transform feedback. Only used with the legacy interface.",null,null],[13,"Interleaved","","Each value is interleaved in the same buffer.",100,null],[13,"Separate","","Each value will go in a separate buffer.",100,null],[4,"ShaderStage","","The different stages of the program pipeline.",null,null],[13,"Vertex","","",101,null],[13,"Fragment","","",101,null],[13,"TessellationControl","","",101,null],[13,"TessellationEvaluation","","",101,null],[13,"Geometry","","",101,null],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`.",null,null],[13,"CompilationError","","Error while compiling one of the shaders.",102,null],[13,"LinkingError","","Error while linking the program.",102,null],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",102,null],[13,"CompilationNotSupported","","The OpenGL implementation doesn't provide a compiler.",102,null],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported by the backend.",102,null],[13,"PointSizeNotSupported","","You have requested point size setting from the shader, but it's not supported by the backend.",102,null],[13,"BinaryHeaderError","","The glium-specific binary header was not found or is corrupt.",102,null],[4,"ProgramChooserCreationError","","Error type that is returned by the `program!` macro.",null,null],[13,"NoVersion","","No available version has been found.",103,null],[13,"ProgramCreationError","","A version has been found but it triggered the given error.",103,null],[4,"GetBinaryError","","Error while retreiving the binary representation of a program.",null,null],[13,"NotSupported","","The backend doesn't support binary.",104,null],[13,"NoFormats","","The backend does not supply any binary formats.",104,null],[4,"ProgramCreationInput","","Input when creating a program.",null,null],[13,"SourceCode","","Use GLSL source code.",105,null],[12,"vertex_shader","glium::program::ProgramCreationInput","Source code of the vertex shader.",105,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",105,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",105,null],[12,"geometry_shader","","Source code of the optional geometry shader.",105,null],[12,"fragment_shader","","Source code of the fragment shader.",105,null],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",105,null],[12,"outputs_srgb","","Whether the fragment shader outputs colors in `sRGB` or `RGB`. This is false by default, meaning that the program outputs `RGB`.",105,null],[12,"uses_point_size","","Whether the shader uses point size.",105,null],[13,"Binary","glium::program","Use a precompiled binary.",105,null],[12,"data","glium::program::ProgramCreationInput","The data.",105,null],[12,"outputs_srgb","","See `SourceCode::outputs_srgb`.",105,null],[12,"uses_point_size","","Whether the shader uses point size.",105,null],[5,"is_geometry_shader_supported","glium::program","Returns true if the backend supports geometry shaders.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_tessellation_shader_supported","","Returns true if the backend supports tessellation shaders.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_binary_supported","","Returns true if the backend supports creating and retreiving binary format.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_subroutine_supported","","Returns true if the backend supports shader subroutines.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports compute shaders.",106,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",106,{"inputs":[{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",106,{"inputs":[{"name":"f"},{"name":"binary"}],"output":{"name":"result"}}],[11,"execute","","Executes the compute shader.",106,{"inputs":[{"name":"self"},{"name":"u"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"execute_indirect","","Executes the compute shader.",106,{"inputs":[{"name":"self"},{"name":"u"},{"name":"bufferslice"}],"output":null}],[11,"get_binary","","Returns the program's compiled binary.",106,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",106,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",106,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",106,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",106,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",106,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"computecommand"}}],[11,"matches","","",88,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"new","glium","Builds a new program.",107,{"inputs":[{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",107,{"inputs":[{"name":"f"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_frag_data_location","","Returns the location of an output fragment, if it exists.",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",107,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",107,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",107,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat` and `stride`.",107,{"inputs":[{"name":"self"},{"name":"vertexformat"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it depends on the vertex/index data passed when drawing.",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",107,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",107,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",107,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_uniforms","","Returns the subroutine uniforms of this program.",107,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",107,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","glium::program","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"uniform"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"uniformblock"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"blocklayout"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"transformfeedbackbuffer"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"transformfeedbackvarying"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"transformfeedbackmode"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"outputprimitives"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"subroutinedata"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"subroutineuniform"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"shaderstage"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"shaderstage"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"to_gl_enum","","Converts the `ShaderStage` to its GLenum equivalent",101,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"programcreationerror"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"programchoosercreationerror"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",103,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"programchoosercreationerror"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"getbinaryerror"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",105,{"inputs":[{"name":"sourcecode"}],"output":{"name":"programcreationinput"}}],[11,"from","","",105,{"inputs":[{"name":"binary"}],"output":{"name":"programcreationinput"}}],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are here to do that.",null,null],[3,"UniformBuffer","glium::uniforms","Buffer that contains a uniform block.",null,null],[3,"Sampler","","A sampler.",null,null],[12,"0","","",108,null],[12,"1","","",108,null],[3,"SamplerBehavior","","Behavior of a sampler.",null,null],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",109,null],[12,"minify_filter","","Filter to use when minifying the texture.",109,null],[12,"magnify_filter","","Filter to use when magnifying the texture.",109,null],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",109,null],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms.",null,null],[3,"UniformsStorage","","Stores uniforms.",null,null],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples.",null,null],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",110,null],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",110,null],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",110,null],[13,"MirrorClamp","","Same as Mirror, but only for one repetition,",110,null],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",111,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",111,null],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",112,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",112,null],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",112,null],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",112,null],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",112,null],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",112,null],[4,"UniformValue","","Represents a value to bind to a uniform.",null,null],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer can be bound on a block with the given layout. The last parameter is a sender which must be used to send a `SyncFence` that expires when the buffer has finished being used.",113,null],[13,"Subroutine","","",113,null],[13,"SignedInt","","",113,null],[13,"UnsignedInt","","",113,null],[13,"Float","","",113,null],[13,"Mat2","","2x2 column-major matrix.",113,null],[13,"Mat3","","3x3 column-major matrix.",113,null],[13,"Mat4","","4x4 column-major matrix.",113,null],[13,"Vec2","","",113,null],[13,"Vec3","","",113,null],[13,"Vec4","","",113,null],[13,"IntVec2","","",113,null],[13,"IntVec3","","",113,null],[13,"IntVec4","","",113,null],[13,"UnsignedIntVec2","","",113,null],[13,"UnsignedIntVec3","","",113,null],[13,"UnsignedIntVec4","","",113,null],[13,"Bool","","",113,null],[13,"BoolVec2","","",113,null],[13,"BoolVec3","","",113,null],[13,"BoolVec4","","",113,null],[13,"Double","","",113,null],[13,"DoubleVec2","","",113,null],[13,"DoubleVec3","","",113,null],[13,"DoubleVec4","","",113,null],[13,"DoubleMat2","","",113,null],[13,"DoubleMat3","","",113,null],[13,"DoubleMat4","","",113,null],[13,"Int64","","",113,null],[13,"Int64Vec2","","",113,null],[13,"Int64Vec3","","",113,null],[13,"Int64Vec4","","",113,null],[13,"UnsignedInt64","","",113,null],[13,"UnsignedInt64Vec2","","",113,null],[13,"UnsignedInt64Vec3","","",113,null],[13,"UnsignedInt64Vec4","","",113,null],[13,"Texture1d","","",113,null],[13,"CompressedTexture1d","","",113,null],[13,"SrgbTexture1d","","",113,null],[13,"CompressedSrgbTexture1d","","",113,null],[13,"IntegralTexture1d","","",113,null],[13,"UnsignedTexture1d","","",113,null],[13,"DepthTexture1d","","",113,null],[13,"Texture2d","","",113,null],[13,"CompressedTexture2d","","",113,null],[13,"SrgbTexture2d","","",113,null],[13,"CompressedSrgbTexture2d","","",113,null],[13,"IntegralTexture2d","","",113,null],[13,"UnsignedTexture2d","","",113,null],[13,"DepthTexture2d","","",113,null],[13,"Texture2dMultisample","","",113,null],[13,"SrgbTexture2dMultisample","","",113,null],[13,"IntegralTexture2dMultisample","","",113,null],[13,"UnsignedTexture2dMultisample","","",113,null],[13,"DepthTexture2dMultisample","","",113,null],[13,"Texture3d","","",113,null],[13,"CompressedTexture3d","","",113,null],[13,"SrgbTexture3d","","",113,null],[13,"CompressedSrgbTexture3d","","",113,null],[13,"IntegralTexture3d","","",113,null],[13,"UnsignedTexture3d","","",113,null],[13,"DepthTexture3d","","",113,null],[13,"Texture1dArray","","",113,null],[13,"CompressedTexture1dArray","","",113,null],[13,"SrgbTexture1dArray","","",113,null],[13,"CompressedSrgbTexture1dArray","","",113,null],[13,"IntegralTexture1dArray","","",113,null],[13,"UnsignedTexture1dArray","","",113,null],[13,"DepthTexture1dArray","","",113,null],[13,"Texture2dArray","","",113,null],[13,"CompressedTexture2dArray","","",113,null],[13,"SrgbTexture2dArray","","",113,null],[13,"CompressedSrgbTexture2dArray","","",113,null],[13,"IntegralTexture2dArray","","",113,null],[13,"UnsignedTexture2dArray","","",113,null],[13,"DepthTexture2dArray","","",113,null],[13,"Texture2dMultisampleArray","","",113,null],[13,"SrgbTexture2dMultisampleArray","","",113,null],[13,"IntegralTexture2dMultisampleArray","","",113,null],[13,"UnsignedTexture2dMultisampleArray","","",113,null],[13,"DepthTexture2dMultisampleArray","","",113,null],[13,"Cubemap","","",113,null],[13,"CompressedCubemap","","",113,null],[13,"SrgbCubemap","","",113,null],[13,"CompressedSrgbCubemap","","",113,null],[13,"IntegralCubemap","","",113,null],[13,"UnsignedCubemap","","",113,null],[13,"DepthCubemap","","",113,null],[13,"CubemapArray","","",113,null],[13,"CompressedCubemapArray","","",113,null],[13,"SrgbCubemapArray","","",113,null],[13,"CompressedSrgbCubemapArray","","",113,null],[13,"IntegralCubemapArray","","",113,null],[13,"UnsignedCubemapArray","","",113,null],[13,"DepthCubemapArray","","",113,null],[13,"BufferTexture","","",113,null],[4,"UniformType","","Type of a uniform in a program.",null,null],[13,"Float","","",114,null],[13,"FloatVec2","","",114,null],[13,"FloatVec3","","",114,null],[13,"FloatVec4","","",114,null],[13,"Double","","",114,null],[13,"DoubleVec2","","",114,null],[13,"DoubleVec3","","",114,null],[13,"DoubleVec4","","",114,null],[13,"Int","","",114,null],[13,"IntVec2","","",114,null],[13,"IntVec3","","",114,null],[13,"IntVec4","","",114,null],[13,"UnsignedInt","","",114,null],[13,"UnsignedIntVec2","","",114,null],[13,"UnsignedIntVec3","","",114,null],[13,"UnsignedIntVec4","","",114,null],[13,"Int64","","",114,null],[13,"Int64Vec2","","",114,null],[13,"Int64Vec3","","",114,null],[13,"Int64Vec4","","",114,null],[13,"UnsignedInt64","","",114,null],[13,"UnsignedInt64Vec2","","",114,null],[13,"UnsignedInt64Vec3","","",114,null],[13,"UnsignedInt64Vec4","","",114,null],[13,"Bool","","",114,null],[13,"BoolVec2","","",114,null],[13,"BoolVec3","","",114,null],[13,"BoolVec4","","",114,null],[13,"FloatMat2","","",114,null],[13,"FloatMat3","","",114,null],[13,"FloatMat4","","",114,null],[13,"FloatMat2x3","","",114,null],[13,"FloatMat2x4","","",114,null],[13,"FloatMat3x2","","",114,null],[13,"FloatMat3x4","","",114,null],[13,"FloatMat4x2","","",114,null],[13,"FloatMat4x3","","",114,null],[13,"DoubleMat2","","",114,null],[13,"DoubleMat3","","",114,null],[13,"DoubleMat4","","",114,null],[13,"DoubleMat2x3","","",114,null],[13,"DoubleMat2x4","","",114,null],[13,"DoubleMat3x2","","",114,null],[13,"DoubleMat3x4","","",114,null],[13,"DoubleMat4x2","","",114,null],[13,"DoubleMat4x3","","",114,null],[13,"Sampler1d","","",114,null],[13,"ISampler1d","","",114,null],[13,"USampler1d","","",114,null],[13,"Sampler2d","","",114,null],[13,"ISampler2d","","",114,null],[13,"USampler2d","","",114,null],[13,"Sampler3d","","",114,null],[13,"ISampler3d","","",114,null],[13,"USampler3d","","",114,null],[13,"Sampler1dArray","","",114,null],[13,"ISampler1dArray","","",114,null],[13,"USampler1dArray","","",114,null],[13,"Sampler2dArray","","",114,null],[13,"ISampler2dArray","","",114,null],[13,"USampler2dArray","","",114,null],[13,"SamplerCube","","",114,null],[13,"ISamplerCube","","",114,null],[13,"USamplerCube","","",114,null],[13,"Sampler2dRect","","",114,null],[13,"ISampler2dRect","","",114,null],[13,"USampler2dRect","","",114,null],[13,"Sampler2dRectShadow","","",114,null],[13,"SamplerCubeArray","","",114,null],[13,"ISamplerCubeArray","","",114,null],[13,"USamplerCubeArray","","",114,null],[13,"SamplerBuffer","","",114,null],[13,"ISamplerBuffer","","",114,null],[13,"USamplerBuffer","","",114,null],[13,"Sampler2dMultisample","","",114,null],[13,"ISampler2dMultisample","","",114,null],[13,"USampler2dMultisample","","",114,null],[13,"Sampler2dMultisampleArray","","",114,null],[13,"ISampler2dMultisampleArray","","",114,null],[13,"USampler2dMultisampleArray","","",114,null],[13,"Sampler1dShadow","","",114,null],[13,"Sampler2dShadow","","",114,null],[13,"SamplerCubeShadow","","",114,null],[13,"Sampler1dArrayShadow","","",114,null],[13,"Sampler2dArrayShadow","","",114,null],[13,"SamplerCubeArrayShadow","","",114,null],[13,"Image1d","","",114,null],[13,"IImage1d","","",114,null],[13,"UImage1d","","",114,null],[13,"Image2d","","",114,null],[13,"IImage2d","","",114,null],[13,"UImage2d","","",114,null],[13,"Image3d","","",114,null],[13,"IImage3d","","",114,null],[13,"UImage3d","","",114,null],[13,"Image2dRect","","",114,null],[13,"IImage2dRect","","",114,null],[13,"UImage2dRect","","",114,null],[13,"ImageCube","","",114,null],[13,"IImageCube","","",114,null],[13,"UImageCube","","",114,null],[13,"ImageBuffer","","",114,null],[13,"IImageBuffer","","",114,null],[13,"UImageBuffer","","",114,null],[13,"Image1dArray","","",114,null],[13,"IImage1dArray","","",114,null],[13,"UImage1dArray","","",114,null],[13,"Image2dArray","","",114,null],[13,"IImage2dArray","","",114,null],[13,"UImage2dArray","","",114,null],[13,"Image2dMultisample","","",114,null],[13,"IImage2dMultisample","","",114,null],[13,"UImage2dMultisample","","",114,null],[13,"Image2dMultisampleArray","","",114,null],[13,"IImage2dMultisampleArray","","",114,null],[13,"UImage2dMultisampleArray","","",114,null],[13,"AtomicCounterUint","","",114,null],[4,"LayoutMismatchError","","Error about a block layout mismatch.",null,null],[13,"TypeMismatch","","There is a mismatch in the type of one element.",115,null],[12,"expected","glium::uniforms::LayoutMismatchError","Type expected by the shader.",115,null],[12,"obtained","","Type that you gave.",115,null],[13,"LayoutMismatch","glium::uniforms","The expected layout is totally different from what we have.",115,null],[12,"expected","glium::uniforms::LayoutMismatchError","Layout expected by the shader.",115,null],[12,"obtained","","Layout of the input.",115,null],[13,"OffsetMismatch","glium::uniforms","The type of data is good, but there is a misalignment.",115,null],[12,"expected","glium::uniforms::LayoutMismatchError","Expected offset of a member.",115,null],[12,"obtained","","Offset of the same member in the input.",115,null],[13,"MemberMismatch","glium::uniforms","There is a mismatch in a submember of this layout.",115,null],[12,"member","glium::uniforms::LayoutMismatchError","Name of the field.",115,null],[12,"err","","The sub-error.",115,null],[13,"MissingField","glium::uniforms","A field is missing in either the expected of the input data layout.",115,null],[12,"name","glium::uniforms::LayoutMismatchError","Name of the field.",115,null],[11,"fmt","glium::uniforms","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",116,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Uploads data in the uniforms buffer.",116,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",116,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",116,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",116,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty buffer.",116,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",116,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",116,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",116,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",116,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",116,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",116,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",116,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"deref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",116,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",31,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"buffermutslice"}}],[11,"fmt","glium::uniforms","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"samplerwrapfunction"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"magnifysamplerfilter"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"minifysamplerfilter"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"new","","Builds a new `Sampler` with default parameters.",108,{"inputs":[{"name":"t"}],"output":{"name":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",108,{"inputs":[{"name":"self"},{"name":"samplerwrapfunction"}],"output":{"name":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",108,{"inputs":[{"name":"self"},{"name":"minifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",108,{"inputs":[{"name":"self"},{"name":"magnifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",108,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"sampler"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"samplerbehavior"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"samplerbehavior"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"emptyuniforms"}}],[11,"visit_values","","",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","Builds a new storage with a value.",118,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",118,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u"}],"output":{"name":"uniformsstorage"}}],[11,"visit_values","","",118,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"uniformtype"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",113,{"inputs":[{"name":"self"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[8,"Uniforms","","Object that contains the values of all the uniforms to bind to a program.",null,null],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",119,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"AsUniformValue","","Value that can be used as the value of a uniform.",null,null],[10,"as_uniform_value","","Builds a `UniformValue`.",120,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[8,"UniformBlock","","Objects that are suitable for being inside a uniform block or a SSBO.",null,null],[10,"matches","","Checks whether the uniforms' layout matches the given block if `Self` starts at the given offset.",121,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[10,"build_layout","","Builds the `BlockLayout` corresponding to the current object.",121,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"layoutmismatcherror"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"vertex","glium","Contains everything related to vertex sources.",null,null],[3,"VertexBuffer","glium::vertex","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferAny","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`.",null,null],[3,"TransformFeedbackSession","","Transform feedback allows you to obtain in a buffer the list of the vertices generated by the vertex shader, geometry shader, or tessellation evaluation shader of your program. This is usually used to cache the result in order to draw the vertices multiple times with multiple different fragment shaders.",null,null],[3,"EmptyVertexAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",122,null],[3,"EmptyInstanceAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",123,null],[3,"PerInstance","","Marker that instructs glium that the buffer is to be used per instance.",null,null],[4,"BufferCreationError","","Error that can happen when creating a vertex buffer.",null,null],[13,"FormatNotSupported","","The vertex format is not supported by the backend.",124,null],[13,"BufferCreationError","","Error while creating the vertex buffer.",124,null],[4,"AttributeType","","",null,null],[13,"I8","","",125,null],[13,"I8I8","","",125,null],[13,"I8I8I8","","",125,null],[13,"I8I8I8I8","","",125,null],[13,"U8","","",125,null],[13,"U8U8","","",125,null],[13,"U8U8U8","","",125,null],[13,"U8U8U8U8","","",125,null],[13,"I16","","",125,null],[13,"I16I16","","",125,null],[13,"I16I16I16","","",125,null],[13,"I16I16I16I16","","",125,null],[13,"U16","","",125,null],[13,"U16U16","","",125,null],[13,"U16U16U16","","",125,null],[13,"U16U16U16U16","","",125,null],[13,"I32","","",125,null],[13,"I32I32","","",125,null],[13,"I32I32I32","","",125,null],[13,"I32I32I32I32","","",125,null],[13,"U32","","",125,null],[13,"U32U32","","",125,null],[13,"U32U32U32","","",125,null],[13,"U32U32U32U32","","",125,null],[13,"I64","","",125,null],[13,"I64I64","","",125,null],[13,"I64I64I64","","",125,null],[13,"I64I64I64I64","","",125,null],[13,"U64","","",125,null],[13,"U64U64","","",125,null],[13,"U64U64U64","","",125,null],[13,"U64U64U64U64","","",125,null],[13,"F16","","",125,null],[13,"F16F16","","",125,null],[13,"F16F16F16","","",125,null],[13,"F16F16F16F16","","",125,null],[13,"F16x2x2","","2x2 matrix of `f16`s",125,null],[13,"F16x2x3","","2x3 matrix of `f16`s",125,null],[13,"F16x2x4","","2x3 matrix of `f16`s",125,null],[13,"F16x3x2","","3x2 matrix of `f16`s",125,null],[13,"F16x3x3","","3x3 matrix of `f16`s",125,null],[13,"F16x3x4","","3x4 matrix of `f16`s",125,null],[13,"F16x4x2","","4x2 matrix of `f16`s",125,null],[13,"F16x4x3","","4x3 matrix of `f16`s",125,null],[13,"F16x4x4","","4x4 matrix of `f16`s",125,null],[13,"F32","","",125,null],[13,"F32F32","","",125,null],[13,"F32F32F32","","",125,null],[13,"F32F32F32F32","","",125,null],[13,"F32x2x2","","2x2 matrix of `f32`s",125,null],[13,"F32x2x3","","2x3 matrix of `f32`s",125,null],[13,"F32x2x4","","2x3 matrix of `f32`s",125,null],[13,"F32x3x2","","3x2 matrix of `f32`s",125,null],[13,"F32x3x3","","3x3 matrix of `f32`s",125,null],[13,"F32x3x4","","3x4 matrix of `f32`s",125,null],[13,"F32x4x2","","4x2 matrix of `f32`s",125,null],[13,"F32x4x3","","4x3 matrix of `f32`s",125,null],[13,"F32x4x4","","4x4 matrix of `f32`s",125,null],[13,"F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",125,null],[13,"F64x2x2","","2x2 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x2x3","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x2x4","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x3x2","","3x2 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x3x3","","3x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x3x4","","3x4 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x4x2","","4x2 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x4x3","","4x3 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"F64x4x4","","4x4 matrix of `f64`s Warning: using `f64`s can be very slow.",125,null],[13,"I2I10I10I10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",125,null],[13,"U2U10U10U10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",125,null],[13,"I10I10I10I2","","Corresponds to `GL_INT_10_10_10_2`.",125,null],[13,"U10U10U10U2","","Corresponds to `GL_UNSIGNED_INT_10_10_10_2`.",125,null],[13,"F10F11F11UnsignedIntReversed","","Three floating points values turned into unsigned integers./",125,null],[13,"FixedFloatI16U16","","Fixed floating points. A 16bits signed value followed by the 16bits unsigned exponent.",125,null],[4,"VerticesSource","","Describes the source to use for the vertices when drawing.",null,null],[13,"VertexBuffer","","A buffer uploaded in the video memory.",126,null],[13,"Marker","","A marker indicating a \"phantom list of attributes\".",126,null],[12,"len","glium::vertex::VerticesSource","Number of attributes.",126,null],[12,"per_instance","","Whether or not this buffer is \"per instance\" (true) or \"per vertex\" (false).",126,null],[5,"is_transform_feedback_supported","glium::vertex","Returns true if transform feedback is supported by the OpenGL implementation.",null,{"inputs":[{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",124,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",124,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_id","glium","",127,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"per_instance","glium::vertex","Creates a marker that instructs glium to use multiple instances.",128,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","glium","Builds a new vertex buffer.",127,null],[11,"dynamic","","Builds a new vertex buffer.",127,null],[11,"persistent","","Builds a new vertex buffer.",127,null],[11,"immutable","","Builds a new vertex buffer.",127,null],[11,"empty","","Builds an empty vertex buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",127,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",127,null],[11,"slice","","Accesses a slice of the buffer.",127,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",127,{"inputs":[{"name":"self"}],"output":{"name":"vertexformat"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",127,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead. Discard the type information and turn the vertex buffer into a `VertexBufferAny`.",127,{"inputs":[{"name":"self"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",127,{"inputs":[{"name":"buffer"}],"output":{"name":"vertexbuffer"}}],[11,"deref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",127,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",31,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"deref","glium::vertex","",128,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",128,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer","",30,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"into_vertices_source","glium::vertex","",128,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",129,{"inputs":[{"name":"self"}],"output":{"name":"vertexformat"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",129,{"inputs":[{"name":"self"}],"output":{"name":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",129,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",129,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",129,{"inputs":[{"name":"buffer"}],"output":{"name":"vertexbufferany"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",125,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new transform feedback session.",130,{"inputs":[{"name":"f"},{"name":"program"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"drop","","",130,{"inputs":[{"name":"self"}],"output":null}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"IntoVerticesSource","","Objects that can be used as vertex sources.",null,null],[10,"into_vertices_source","","Builds the `VerticesSource`.",131,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources.",null,null],[16,"Iterator","","Iterator that enumerates each source.",132,null],[10,"iter","","Iterates over the `VerticesSource`.",132,null],[8,"Vertex","","Trait for structures that represent a vertex.",null,null],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",133,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"is_supported","","Returns true if the backend supports this vertex format.",133,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[8,"Attribute","","Trait for types that can be used as vertex attributes.",null,null],[10,"get_type","","Get the type of data.",134,{"inputs":[],"output":{"name":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",134,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",126,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",122,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",123,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",135,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[0,"texture","glium","A texture is an image loaded in video memory, which can be sampled in your shaders.",null,null],[3,"TextureAny","glium::texture","A texture whose type isn't fixed at compile-time.",null,null],[3,"TextureAnyMipmap","","Represents a specific mipmap of a texture.",null,null],[3,"TextureAnyLayer","","Represents a specific layer of an array texture and 3D textures.",null,null],[3,"TextureAnyLayerMipmap","","Represents a specific layer of a specific mipmap. This is the same as `TextureAnyImage`, except for 3D textures, cubemaps and cubemap arrays.",null,null],[3,"TextureAnyImage","","Represents a specific 2D image of a texture. 1D textures are considered as having a height of 1.",null,null],[3,"RawImage1d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",136,null],[12,"width","","Number of pixels per column.",136,null],[12,"format","","Formats of the pixels.",136,null],[3,"RawImage2d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",137,null],[12,"width","","Number of pixels per column.",137,null],[12,"height","","Number of pixels per row.",137,null],[12,"format","","Formats of the pixels.",137,null],[3,"RawImage3d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",138,null],[12,"width","","Number of pixels per column.",138,null],[12,"height","","Number of pixels per row.",138,null],[12,"depth","","Number of pixels per depth.",138,null],[12,"format","","Formats of the pixels.",138,null],[4,"ClientFormat","","List of client-side pixel formats.",null,null],[13,"U8","","",139,null],[13,"U8U8","","",139,null],[13,"U8U8U8","","",139,null],[13,"U8U8U8U8","","",139,null],[13,"I8","","",139,null],[13,"I8I8","","",139,null],[13,"I8I8I8","","",139,null],[13,"I8I8I8I8","","",139,null],[13,"U16","","",139,null],[13,"U16U16","","",139,null],[13,"U16U16U16","","",139,null],[13,"U16U16U16U16","","",139,null],[13,"I16","","",139,null],[13,"I16I16","","",139,null],[13,"I16I16I16","","",139,null],[13,"I16I16I16I16","","",139,null],[13,"U32","","",139,null],[13,"U32U32","","",139,null],[13,"U32U32U32","","",139,null],[13,"U32U32U32U32","","",139,null],[13,"I32","","",139,null],[13,"I32I32","","",139,null],[13,"I32I32I32","","",139,null],[13,"I32I32I32I32","","",139,null],[13,"U3U3U2","","",139,null],[13,"U5U6U5","","",139,null],[13,"U4U4U4U4","","",139,null],[13,"U5U5U5U1","","",139,null],[13,"U10U10U10U2","","",139,null],[13,"F16","","",139,null],[13,"F16F16","","",139,null],[13,"F16F16F16","","",139,null],[13,"F16F16F16F16","","",139,null],[13,"F32","","",139,null],[13,"F32F32","","",139,null],[13,"F32F32F32","","",139,null],[13,"F32F32F32F32","","",139,null],[4,"TextureFormat","","Format of the internal representation of a texture.",null,null],[13,"UncompressedFloat","","",140,null],[13,"UncompressedIntegral","","",140,null],[13,"UncompressedUnsigned","","",140,null],[13,"Srgb","","",140,null],[13,"CompressedFormat","","",140,null],[13,"CompressedSrgbFormat","","",140,null],[13,"DepthFormat","","",140,null],[13,"StencilFormat","","",140,null],[13,"DepthStencilFormat","","",140,null],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data.",null,null],[13,"U8","","",141,null],[13,"I8","","",141,null],[13,"U16","","",141,null],[13,"I16","","",141,null],[13,"U8U8","","",141,null],[13,"I8I8","","",141,null],[13,"U16U16","","",141,null],[13,"I16I16","","",141,null],[13,"U3U3U2","","",141,null],[13,"U4U4U4","","",141,null],[13,"U5U5U5","","",141,null],[13,"U8U8U8","","",141,null],[13,"I8I8I8","","",141,null],[13,"U10U10U10","","",141,null],[13,"U12U12U12","","",141,null],[13,"U16U16U16","","",141,null],[13,"I16I16I16","","",141,null],[13,"U2U2U2U2","","",141,null],[13,"U4U4U4U4","","",141,null],[13,"U5U5U5U1","","",141,null],[13,"U8U8U8U8","","",141,null],[13,"I8I8I8I8","","",141,null],[13,"U10U10U10U2","","",141,null],[13,"U12U12U12U12","","",141,null],[13,"U16U16U16U16","","",141,null],[13,"I16I16I16I16","","",141,null],[13,"F16","","",141,null],[13,"F16F16","","",141,null],[13,"F16F16F16","","",141,null],[13,"F16F16F16F16","","",141,null],[13,"F32","","",141,null],[13,"F32F32","","",141,null],[13,"F32F32F32","","",141,null],[13,"F32F32F32F32","","",141,null],[13,"F11F11F10","","",141,null],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",141,null],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data.",null,null],[13,"I8","","",142,null],[13,"I16","","",142,null],[13,"I32","","",142,null],[13,"I8I8","","",142,null],[13,"I16I16","","",142,null],[13,"I32I32","","",142,null],[13,"I8I8I8","","",142,null],[13,"I16I16I16","","May not be supported by renderbuffers.",142,null],[13,"I32I32I32","","May not be supported by renderbuffers.",142,null],[13,"I8I8I8I8","","May not be supported by renderbuffers.",142,null],[13,"I16I16I16I16","","",142,null],[13,"I32I32I32I32","","",142,null],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data.",null,null],[13,"U8","","",143,null],[13,"U16","","",143,null],[13,"U32","","",143,null],[13,"U8U8","","",143,null],[13,"U16U16","","",143,null],[13,"U32U32","","",143,null],[13,"U8U8U8","","",143,null],[13,"U16U16U16","","May not be supported by renderbuffers.",143,null],[13,"U32U32U32","","May not be supported by renderbuffers.",143,null],[13,"U8U8U8U8","","May not be supported by renderbuffers.",143,null],[13,"U16U16U16U16","","",143,null],[13,"U32U32U32U32","","",143,null],[13,"U10U10U10U2","","",143,null],[4,"CompressedFormat","","List of compressed texture formats.",null,null],[13,"RgtcFormatU","","Red/green compressed texture with one unsigned component.",144,null],[13,"RgtcFormatI","","Red/green compressed texture with one signed component.",144,null],[13,"RgtcFormatUU","","Red/green compressed texture with two unsigned components.",144,null],[13,"RgtcFormatII","","Red/green compressed texture with two signed components.",144,null],[13,"BptcUnorm4","","BPTC format with four components represented as integers.",144,null],[13,"BptcSignedFloat3","","BPTC format with three components (no alpha) represented as signed floats.",144,null],[13,"BptcUnsignedFloat3","","BPTC format with three components (no alpha) represented as unsigned floats.",144,null],[13,"S3tcDxt1NoAlpha","","S3TC DXT1 without alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",144,null],[13,"S3tcDxt1Alpha","","S3TC DXT1 with 1-bit alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",144,null],[13,"S3tcDxt3Alpha","","S3TC DXT3, see https://www.opengl.org/wiki/S3_Texture_Compression.",144,null],[13,"S3tcDxt5Alpha","","S3TC DXT5, see https://www.opengl.org/wiki/S3_Texture_Compression.",144,null],[4,"DepthFormat","","List of formats available for depth textures.",null,null],[13,"I16","","",145,null],[13,"I24","","",145,null],[13,"I32","","May not be supported by all hardware.",145,null],[13,"F32","","",145,null],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures.",null,null],[13,"I24I8","","",146,null],[13,"F32I8","","",146,null],[4,"StencilFormat","","List of formats available for stencil textures.",null,null],[13,"I1","","",147,null],[13,"I4","","",147,null],[13,"I8","","",147,null],[13,"I16","","",147,null],[4,"CompressedSrgbFormat","","List of compressed pixel formats in the sRGB color space.",null,null],[13,"Bptc","","BPTC format. sRGB with alpha. Also called `BC7` by DirectX.",148,null],[13,"S3tcDxt1NoAlpha","","",148,null],[13,"S3tcDxt1Alpha","","",148,null],[13,"S3tcDxt3Alpha","","",148,null],[13,"S3tcDxt5Alpha","","",148,null],[4,"SrgbFormat","","List of uncompressed pixel formats that contain floating-point data in the sRGB color space.",null,null],[13,"U8U8U8","","",149,null],[13,"U8U8U8U8","","",149,null],[4,"Dimensions","","Type of a texture.",null,null],[13,"Texture1d","","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[13,"Texture1dArray","glium::texture","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[12,"array_size","","",150,null],[13,"Texture2d","glium::texture","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[12,"height","","",150,null],[13,"Texture2dArray","glium::texture","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[12,"height","","",150,null],[12,"array_size","","",150,null],[13,"Texture2dMultisample","glium::texture","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[12,"height","","",150,null],[12,"samples","","",150,null],[13,"Texture2dMultisampleArray","glium::texture","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[12,"height","","",150,null],[12,"array_size","","",150,null],[12,"samples","","",150,null],[13,"Texture3d","glium::texture","",150,null],[12,"width","glium::texture::Dimensions","",150,null],[12,"height","","",150,null],[12,"depth","","",150,null],[13,"Cubemap","glium::texture","",150,null],[12,"dimension","glium::texture::Dimensions","",150,null],[13,"CubemapArray","glium::texture","",150,null],[12,"dimension","glium::texture::Dimensions","",150,null],[12,"array_size","","",150,null],[4,"InternalFormat","glium::texture","Internal format of a texture.",null,null],[13,"OneComponent","","The format has one component.",151,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",151,null],[12,"bits1","","Number of bits of the first component.",151,null],[13,"TwoComponents","glium::texture","The format has two components.",151,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",151,null],[12,"bits1","","Number of bits of the first component.",151,null],[12,"ty2","","Type of the second component.",151,null],[12,"bits2","","Number of bits of the second component.",151,null],[13,"ThreeComponents","glium::texture","The format has three components.",151,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",151,null],[12,"bits1","","Number of bits of the first component.",151,null],[12,"ty2","","Type of the second component.",151,null],[12,"bits2","","Number of bits of the second component.",151,null],[12,"ty3","","Type of the third component.",151,null],[12,"bits3","","Number of bits of the third component.",151,null],[13,"FourComponents","glium::texture","The format has four components.",151,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",151,null],[12,"bits1","","Number of bits of the first component.",151,null],[12,"ty2","","Type of the second component.",151,null],[12,"bits2","","Number of bits of the second component.",151,null],[12,"ty3","","Type of the third component.",151,null],[12,"bits3","","Number of bits of the third component.",151,null],[12,"ty4","","Type of the fourth component.",151,null],[12,"bits4","","Number of bits of the fourth component.",151,null],[4,"InternalFormatType","glium::texture","Format of a component of an internal format.",null,null],[13,"SignedNormalized","","Floating point texture with signed components.",152,null],[13,"UnsignedNormalized","","Floating point texture with unsigned components.",152,null],[13,"Float","","Floating point texture with floats.",152,null],[13,"Int","","Integral texture.",152,null],[13,"UnsignedInt","","Unsigned texture.",152,null],[4,"GetFormatError","","Error that can happen when retrieving the internal format of a texture.",null,null],[13,"NotSupported","","The backend doesn't support retrieving the internal format.",153,null],[4,"CubeLayer","","Represents a layer of a cubemap.",null,null],[13,"PositiveX","","",154,null],[13,"NegativeX","","",154,null],[13,"PositiveY","","",154,null],[13,"NegativeY","","",154,null],[13,"PositiveZ","","",154,null],[13,"NegativeZ","","",154,null],[4,"TextureKind","","Represents a kind of texture.",null,null],[13,"Float","","",155,null],[13,"Integral","","",155,null],[13,"Unsigned","","",155,null],[13,"Depth","","",155,null],[13,"Stencil","","",155,null],[13,"DepthStencil","","",155,null],[4,"MipmapsOption","","Describes what to do about mipmaps during texture creation.",null,null],[13,"NoMipmap","","No mipmap will be allocated or generated.",156,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",156,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",156,null],[13,"AutoGeneratedMipmaps","","Allocates and generates mipmaps for all the possible levels given the texture dimensions.",156,null],[13,"AutoGeneratedMipmapsMax","","Allocates and generates mipmaps for the specified amount of mipmaps (excluding the top level) the possible levels given the texture dimensions.",156,null],[4,"CompressedMipmapsOption","","Describes what to do about mipmaps during compressed texture creation.",null,null],[13,"NoMipmap","","No mipmaps will be allocated or generated.",157,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",157,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",157,null],[4,"TextureCreationError","","Error that can happen when creating a texture.",null,null],[13,"FormatNotSupported","","The requested format is not supported by the backend.",158,null],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",158,null],[13,"TypeNotSupported","","The texture format is not supported by the backend.",158,null],[5,"is_texture_1d_supported","","Returns true is one-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_supported","","Returns true is two-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_3d_supported","","Returns true is three-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_1d_array_supported","","Returns true is one-dimensional texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_array_supported","","Returns true is two-dimensional texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_multisample_supported","","Returns true is two-dimensional multisample textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_multisample_array_supported","","Returns true is two-dimensional multisample texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_cubemaps_supported","","Returns true is cubemaps are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_cubemap_arrays_supported","","Returns true is cubemap arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[0,"bindless","","Without bindless textures, using a texture in a shader requires binding the texture to a specific bind point before drawing. This not only slows down rendering, but may also prevent you from grouping multiple draw calls into one because of the limitation to the number of available texture units.",null,null],[3,"ResidentTexture","glium::texture::bindless","A texture that is resident in video memory. This allows you to use bindless textures in your shaders.",null,null],[3,"TextureHandle","","Represents a handle to a texture. Contains a raw pointer to a texture that is hidden from you.",null,null],[3,"BindlessTexturesNotSupportedError","","Bindless textures are not supported.",null,null],[11,"new","","Takes ownership of the given texture and makes it resident.",159,{"inputs":[{"name":"textureany"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",159,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"deref","","",159,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"deref_mut","","",159,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"drop","","",159,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"texturehandle"}}],[11,"new","","Builds a new handle.",160,{"inputs":[{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":{"name":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",160,{"inputs":[{"name":"self"},{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":null}],[11,"as_uniform_value","","",160,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"matches","","",160,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",160,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"bindlesstexturesnotsupportederror"}}],[0,"buffer_texture","glium::texture","A `BufferTexture` is a special kind of one-dimensional texture that gets its data from a buffer. Buffer textures have very limited capabilities compared to other texture types.",null,null],[3,"BufferTexture","glium::texture::buffer_texture","A one-dimensional texture that gets its data from a buffer.",null,null],[3,"BufferTextureRef","","Holds a reference to a `BufferTexture`.",null,null],[4,"TextureCreationError","","Error that can happen while building the texture part of a buffer texture.",null,null],[13,"NotSupported","","Buffer textures are not supported at all.",162,null],[13,"FormatNotSupported","","The requested format is not supported in combination with the given texture buffer type.",162,null],[13,"TooLarge","","The size of the buffer that you are trying to bind exceeds `GL_MAX_TEXTURE_BUFFER_SIZE`.",162,null],[4,"CreationError","","Error that can happen while building a buffer texture.",null,null],[13,"BufferCreationError","","Failed to create the buffer.",163,null],[13,"TextureCreationError","","Failed to create the texture.",163,null],[4,"BufferTextureType","","Type of a buffer texture.",null,null],[13,"Float","","The texture will behave as if it contained floating-point data. It can be sampled with a `samplerBuffer` in your GLSL code.",164,null],[13,"Integral","","The texture will behave as if it contained signed integral data. It can be sampled with a `isamplerBuffer` in your GLSL code.",164,null],[13,"Unsigned","","The texture will behave as if it contained unsigned integral data. It can be sampled with a `usamplerBuffer` in your GLSL code.",164,null],[4,"TextureBufferContentType","","",null,null],[13,"U8","","",165,null],[13,"I8","","",165,null],[13,"U16","","",165,null],[13,"I16","","",165,null],[13,"U32","","",165,null],[13,"I32","","",165,null],[13,"U8U8","","",165,null],[13,"I8I8","","",165,null],[13,"U16U16","","",165,null],[13,"I16I16","","",165,null],[13,"U32U32","","",165,null],[13,"I32I32","","",165,null],[13,"U32U32U32","","",165,null],[13,"I32I32I32","","",165,null],[13,"U8U8U8U8","","",165,null],[13,"I8I8I8I8","","",165,null],[13,"U16U16U16U16","","",165,null],[13,"I16I16I16I16","","",165,null],[13,"U32U32U32U32","","",165,null],[13,"I32I32I32I32","","",165,null],[13,"F16","","",165,null],[13,"F32","","",165,null],[13,"F16F16","","",165,null],[13,"F32F32","","",165,null],[13,"F32F32F32","","",165,null],[13,"F16F16F16F16","","",165,null],[13,"F32F32F32F32","","",165,null],[8,"TextureBufferContent","","Trait for data types that can be interpreted by a buffer texture.",null,null],[10,"get_type","","Returns the enumeration corresponding to elements of this data type.",166,{"inputs":[],"output":{"name":"texturebuffercontenttype"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",162,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",163,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",163,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",163,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",163,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"creationerror"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"buffertexturetype"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"buffertexturetype"}],"output":{"name":"bool"}}],[11,"new","","Builds a new texture buffer from data.",167,null],[11,"dynamic","","Builds a new texture buffer from data.",167,null],[11,"persistent","","Builds a new texture buffer from data.",167,null],[11,"immutable","","Builds a new texture buffer from data.",167,null],[11,"empty","","Builds a new empty buffer buffer.",167,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty buffer buffer.",167,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty buffer buffer.",167,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty buffer buffer.",167,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"from_buffer","","Builds a new buffer texture by taking ownership of a buffer.",167,{"inputs":[{"name":"f"},{"name":"buffer"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"deref","","",167,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",167,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"drop","","",167,{"inputs":[{"name":"self"}],"output":null}],[11,"as_buffer_texture_ref","","Builds a `BufferTextureRef`.",167,{"inputs":[{"name":"self"}],"output":{"name":"buffertextureref"}}],[11,"as_uniform_value","","",167,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"buffertextureref"}}],[11,"get_texture_type","","Return the type of the texture.",168,{"inputs":[{"name":"self"}],"output":{"name":"buffertexturetype"}}],[0,"pixel_buffer","glium::texture","Pixel buffers are buffers that contain two-dimensional texture data.",null,null],[3,"PixelBuffer","glium::texture::pixel_buffer","Buffer that stores the content of a texture.",null,null],[11,"new_empty","","Builds a new buffer with an uninitialized content.",169,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",169,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",169,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"get_id","","",169,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","glium::texture","",150,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"get_width","","Returns the width of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"kind","","Returns the kind of texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"texturekind"}}],[11,"dimensions","","Returns the dimensions of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_array_size","","Returns the array size of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture if it is a multisampling texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"first_layer","","Returns a structure that represents the first layer of the texture. All textures have a first layer.",170,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayer"}}],[11,"layer","","Returns a structure that represents a specific layer of the texture.",170,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",170,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of the texture.",170,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",170,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"generate_mipmaps","","Binds this texture and generates mipmaps.",170,{"inputs":[{"name":"self"}],"output":null}],[11,"get_id","","",170,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",170,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayer"}}],[11,"get_texture","","Returns the texture.",171,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_samples","","Returns the number of samples of the texture.",171,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_layer","","Returns the layer of the texture.",171,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of this layer of the texture.",171,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayermipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of this layer of the texture.",171,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"get_width","","Returns the width of the mipmap.",172,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the mipmap.",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the mipmap.",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the texture.",172,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",172,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Returns a structure that represents the first layer of this mipmap of the texture. All textures have a first layer.",172,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayermipmap"}}],[11,"layer","","Returns a structure that represents a specific layer of this mipmap of the texture.",172,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",172,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_upload_from_pixel_buffer","","Uploads data to the texture from a buffer.",172,{"inputs":[{"name":"self"},{"name":"bufferslice"},{"name":"range"},{"name":"range"},{"name":"range"}],"output":null}],[11,"raw_upload_from_pixel_buffer_inverted","","Uploads data to the texture from a buffer. The R, G and B components are flipped.",172,{"inputs":[{"name":"self"},{"name":"bufferslice"},{"name":"range"},{"name":"range"},{"name":"range"}],"output":null}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayermipmap"}}],[11,"get_texture","","Returns the texture.",173,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",173,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",173,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_width","","Returns the width of this texture slice.",173,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_image","","Turns this into an image.",173,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"get_texture","","Returns the texture.",174,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_cubemap_layer","","Returns the cubemap layer of this image, or `None` if the texture is not a cubemap.",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_width","","Returns the width of this texture slice.",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",174,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw_read","","Reads the content of the image.",174,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"t"}}],[11,"raw_read_to_pixel_buffer","","Reads the content of the image to a pixel buffer.",174,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"pixelbuffer"}],"output":null}],[11,"raw_clear_buffer","","Clears the content of the texture to a specific value.",174,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"getformaterror"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",153,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"internalformat"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",151,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"internalformattype"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[0,"texture1d","","Contains the implementation of `Texture1d`.",null,null],[3,"Texture1d","glium::texture::texture1d","A one-dimensional texture  containing floating-point data.",null,null],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`.",null,null],[11,"get_id","","",175,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",175,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",175,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",175,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",175,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",175,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",175,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",175,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",175,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",175,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",175,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1d"}}],[11,"width","","Returns the width of that image.",175,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",175,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",175,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",175,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",175,{"inputs":[{"name":"self"}],"output":{"name":"texture1dmipmap"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"texture1dmipmap"}}],[11,"deref","","",176,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",176,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",176,{"inputs":[{"name":"self"}],"output":{"name":"texture1d"}}],[11,"get_level","","Returns the texture level.",176,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",176,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",176,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture1d","glium::texture","Contains the implementation of `CompressedTexture1d`.",null,null],[3,"CompressedTexture1d","glium::texture::compressed_texture1d","A compressed one-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`.",null,null],[11,"get_id","","",177,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",177,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",177,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",177,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",177,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",177,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",177,null],[11,"with_format","","Builds a new texture with a specific format.",177,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",177,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",177,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1d"}}],[11,"width","","Returns the width of that image.",177,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",177,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",177,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",177,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",177,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",177,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"deref","","",178,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",178,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",178,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",178,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",178,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",178,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture1d","glium::texture","Contains the implementation of `SrgbTexture1d`.",null,null],[3,"SrgbTexture1d","glium::texture::srgb_texture1d","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dMipmap","","Represents a single mipmap level of a `SrgbTexture1d`.",null,null],[11,"get_id","","",179,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",179,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",179,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",179,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",179,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",179,{"inputs":[{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",179,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",179,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",179,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",179,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1d"}}],[11,"width","","Returns the width of that image.",179,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",179,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",179,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",179,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",179,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"deref","","",180,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",180,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",180,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",180,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",180,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",180,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture1d","glium::texture","Contains the implementation of `CompressedSrgbTexture1d`.",null,null],[3,"CompressedSrgbTexture1d","glium::texture::compressed_srgb_texture1d","A compressed one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1d`.",null,null],[11,"get_id","","",181,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",181,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",181,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",181,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",181,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",181,null],[11,"with_format","","Builds a new texture with a specific format.",181,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",181,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",181,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"width","","Returns the width of that image.",181,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",181,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",181,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",181,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"deref","","",182,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",182,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",182,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",182,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",182,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture1d","glium::texture","Contains the implementation of `IntegralTexture1d`.",null,null],[3,"IntegralTexture1d","glium::texture::integral_texture1d","A one-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`.",null,null],[11,"get_id","","",183,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",183,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",183,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",183,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",183,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",183,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",183,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",183,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",183,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",183,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1d"}}],[11,"width","","Returns the width of that image.",183,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",183,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",183,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",183,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",183,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"deref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",184,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",184,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",184,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",184,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",184,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture1d","glium::texture","Contains the implementation of `UnsignedTexture1d`.",null,null],[3,"UnsignedTexture1d","glium::texture::unsigned_texture1d","A one-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`.",null,null],[11,"get_id","","",185,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",185,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",185,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",185,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",185,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",185,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",185,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",185,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",185,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",185,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",185,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1d"}}],[11,"width","","Returns the width of that image.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",185,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",185,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",185,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",185,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"deref","","",186,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",186,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",186,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",186,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",186,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",186,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture1d","glium::texture","Contains the implementation of `DepthTexture1d`.",null,null],[3,"DepthTexture1d","glium::texture::depth_texture1d","A one-dimensional texture  containing depth data.",null,null],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`.",null,null],[11,"get_id","","",187,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",187,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",187,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",187,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",187,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",187,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",187,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",187,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",187,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",187,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1d"}}],[11,"width","","Returns the width of that image.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",187,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",187,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",187,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",187,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"deref","","",188,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",188,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",188,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",188,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",188,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",188,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture1d","glium::texture","Contains the implementation of `StencilTexture1d`.",null,null],[3,"StencilTexture1d","glium::texture::stencil_texture1d","A one-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`.",null,null],[11,"get_id","","",189,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",189,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",189,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",189,{"inputs":[{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",189,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",189,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",189,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",189,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1d"}}],[11,"width","","Returns the width of that image.",189,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",189,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",189,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",189,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",189,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"deref","","",190,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",190,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",190,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",190,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",190,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",190,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture1d","glium::texture","Contains the implementation of `DepthStencilTexture1d`.",null,null],[3,"DepthStencilTexture1d","glium::texture::depth_stencil_texture1d","A one-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`.",null,null],[11,"get_id","","",191,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",191,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",191,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",191,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",191,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",191,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",191,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",191,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",191,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",191,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1d"}}],[11,"width","","Returns the width of that image.",191,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",191,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",191,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",191,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",191,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"deref","","",192,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",192,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",192,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",192,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",192,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",192,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d","glium::texture","Contains the implementation of `Texture2d`.",null,null],[3,"Texture2d","glium::texture::texture2d","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`.",null,null],[11,"get_id","","",193,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",193,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",193,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",193,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",193,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",193,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",193,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",193,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",193,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",193,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",193,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2d"}}],[11,"width","","Returns the width of that image.",193,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",193,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",193,null],[11,"as_surface","","Starts drawing on the texture.",193,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",193,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",193,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",193,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",193,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",193,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",193,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"resident","","Turns the texture into a `ResidentTexture`.",193,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",193,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",193,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmipmap"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmipmap"}}],[11,"deref","","",194,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",194,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",194,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",194,null],[11,"write","","Uploads some data in the texture level.",194,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"get_texture","","Returns the corresponding texture.",194,{"inputs":[{"name":"self"}],"output":{"name":"texture2d"}}],[11,"get_level","","Returns the texture level.",194,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",194,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",194,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture2d","glium::texture","Contains the implementation of `CompressedTexture2d`.",null,null],[3,"CompressedTexture2d","glium::texture::compressed_texture2d","A compressed two-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`.",null,null],[11,"get_id","","",195,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",195,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",195,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",195,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",195,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",195,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",195,null],[11,"with_format","","Builds a new texture with a specific format.",195,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",195,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",195,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2d"}}],[11,"width","","Returns the width of that image.",195,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",195,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",195,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",195,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",195,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",195,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",195,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",195,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",195,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",195,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",195,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",195,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",195,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",195,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"deref","","",196,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",196,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",196,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",196,null],[11,"write","","Uploads some data in the texture level.",196,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",196,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",196,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",196,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",196,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",196,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture2d","glium::texture","Contains the implementation of `SrgbTexture2d`.",null,null],[3,"SrgbTexture2d","glium::texture::srgb_texture2d","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMipmap","","Represents a single mipmap level of a `SrgbTexture2d`.",null,null],[11,"get_id","","",197,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",197,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",197,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",197,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",197,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",197,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",197,{"inputs":[{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",197,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",197,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",197,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",197,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2d"}}],[11,"width","","Returns the width of that image.",197,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",197,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",197,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",197,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",197,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",197,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",197,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",197,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",197,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"resident","","Turns the texture into a `ResidentTexture`.",197,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",197,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",197,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"deref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",198,null],[11,"write","","Uploads some data in the texture level.",198,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"get_texture","","Returns the corresponding texture.",198,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",198,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",198,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture2d","glium::texture","Contains the implementation of `CompressedSrgbTexture2d`.",null,null],[3,"CompressedSrgbTexture2d","glium::texture::compressed_srgb_texture2d","A compressed two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2d`.",null,null],[11,"get_id","","",199,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",199,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",199,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",199,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",199,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",199,null],[11,"with_format","","Builds a new texture with a specific format.",199,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",199,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",199,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"width","","Returns the width of that image.",199,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",199,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",199,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",199,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",199,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",199,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",199,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",199,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",199,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",199,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",199,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",199,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",199,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",199,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"deref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",200,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",200,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",200,null],[11,"write","","Uploads some data in the texture level.",200,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",200,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",200,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",200,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",200,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",200,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture2d","glium::texture","Contains the implementation of `IntegralTexture2d`.",null,null],[3,"IntegralTexture2d","glium::texture::integral_texture2d","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`.",null,null],[11,"get_id","","",201,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",201,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",201,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",201,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",201,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",201,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",201,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",201,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",201,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",201,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",201,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2d"}}],[11,"width","","Returns the width of that image.",201,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",201,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",201,null],[11,"as_surface","","Starts drawing on the texture.",201,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",201,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",201,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",201,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",201,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"deref","","",202,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",202,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",202,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",202,null],[11,"get_texture","","Returns the corresponding texture.",202,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",202,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",202,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",202,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d","glium::texture","Contains the implementation of `UnsignedTexture2d`.",null,null],[3,"UnsignedTexture2d","glium::texture::unsigned_texture2d","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`.",null,null],[11,"get_id","","",203,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",203,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",203,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",203,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",203,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",203,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",203,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",203,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",203,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",203,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",203,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2d"}}],[11,"width","","Returns the width of that image.",203,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",203,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",203,null],[11,"as_surface","","Starts drawing on the texture.",203,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",203,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",203,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",203,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",203,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"deref","","",204,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",204,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",204,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",204,null],[11,"get_texture","","Returns the corresponding texture.",204,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",204,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",204,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",204,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d","glium::texture","Contains the implementation of `DepthTexture2d`.",null,null],[3,"DepthTexture2d","glium::texture::depth_texture2d","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`.",null,null],[11,"get_id","","",205,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",205,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",205,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",205,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",205,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",205,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",205,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",205,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",205,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",205,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",205,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2d"}}],[11,"width","","Returns the width of that image.",205,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",205,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",205,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",205,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",205,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",205,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",205,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"deref","","",206,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",206,null],[11,"get_texture","","Returns the corresponding texture.",206,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",206,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",206,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",206,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d","glium::texture","Contains the implementation of `StencilTexture2d`.",null,null],[3,"StencilTexture2d","glium::texture::stencil_texture2d","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`.",null,null],[11,"get_id","","",207,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",207,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",207,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",207,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",207,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",207,{"inputs":[{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",207,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",207,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",207,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",207,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2d"}}],[11,"width","","Returns the width of that image.",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",207,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",207,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",207,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",207,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"deref","","",208,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",208,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",208,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",208,null],[11,"get_texture","","Returns the corresponding texture.",208,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",208,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",208,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",208,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d","glium::texture","Contains the implementation of `DepthStencilTexture2d`.",null,null],[3,"DepthStencilTexture2d","glium::texture::depth_stencil_texture2d","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`.",null,null],[11,"get_id","","",209,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",209,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",209,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",209,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",209,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",209,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",209,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",209,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",209,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",209,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2d"}}],[11,"width","","Returns the width of that image.",209,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",209,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",209,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",209,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",209,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",209,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",209,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"deref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",210,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",210,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",210,null],[11,"get_texture","","Returns the corresponding texture.",210,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",210,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",210,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",210,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_multisample","glium::texture","Contains the implementation of `Texture2dMultisample`.",null,null],[3,"Texture2dMultisample","glium::texture::texture2d_multisample","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`.",null,null],[11,"get_id","","",211,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",211,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",211,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",211,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",211,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",211,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",211,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisample"}}],[11,"width","","Returns the width of that image.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",211,null],[11,"as_surface","","Starts drawing on the texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"deref","","",212,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",212,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",212,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",212,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",212,null],[11,"get_texture","","Returns the corresponding texture.",212,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",212,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",212,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",212,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"integral_texture2d_multisample","glium::texture","Contains the implementation of `IntegralTexture2dMultisample`.",null,null],[3,"IntegralTexture2dMultisample","glium::texture::integral_texture2d_multisample","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`.",null,null],[11,"get_id","","",213,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",213,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",213,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",213,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",213,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",213,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",213,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",213,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",213,null],[11,"as_surface","","Starts drawing on the texture.",213,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",213,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",213,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"deref","","",214,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",214,null],[11,"get_texture","","Returns the corresponding texture.",214,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",214,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",214,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"srgb_texture2d_multisample","glium::texture","Contains the implementation of `SrgbTexture2dMultisample`.",null,null],[3,"SrgbTexture2dMultisample","glium::texture::srgb_texture2d_multisample","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisample`.",null,null],[11,"get_id","","",215,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",215,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",215,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",215,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",215,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",215,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",215,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",215,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",215,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",215,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",215,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"deref","","",216,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",216,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",216,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",216,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",216,null],[11,"get_texture","","Returns the corresponding texture.",216,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",216,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",216,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",216,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_multisample","glium::texture","Contains the implementation of `UnsignedTexture2dMultisample`.",null,null],[3,"UnsignedTexture2dMultisample","glium::texture::unsigned_texture2d_multisample","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`.",null,null],[11,"get_id","","",217,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",217,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",217,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",217,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",217,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",217,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",217,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",217,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",217,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",217,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",217,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",217,null],[11,"as_surface","","Starts drawing on the texture.",217,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",217,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",217,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",217,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",217,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"deref","","",218,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",218,null],[11,"get_texture","","Returns the corresponding texture.",218,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",218,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",218,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_multisample","glium::texture","Contains the implementation of `DepthTexture2dMultisample`.",null,null],[3,"DepthTexture2dMultisample","glium::texture::depth_texture2d_multisample","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`.",null,null],[11,"get_id","","",219,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",219,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",219,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",219,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",219,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",219,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",219,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",219,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",219,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",219,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",219,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",219,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",219,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",219,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",219,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"deref","","",220,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",220,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",220,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",220,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",220,null],[11,"get_texture","","Returns the corresponding texture.",220,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",220,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",220,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",220,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_multisample","glium::texture","Contains the implementation of `StencilTexture2dMultisample`.",null,null],[3,"StencilTexture2dMultisample","glium::texture::stencil_texture2d_multisample","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`.",null,null],[11,"get_id","","",221,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",221,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",221,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",221,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",221,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",221,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",221,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",221,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",221,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",221,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",221,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"deref","","",222,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",222,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",222,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",222,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",222,null],[11,"get_texture","","Returns the corresponding texture.",222,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",222,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",222,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",222,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisample`.",null,null],[3,"DepthStencilTexture2dMultisample","glium::texture::depth_stencil_texture2d_multisample","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`.",null,null],[11,"get_id","","",223,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",223,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",223,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",223,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",223,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",223,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",223,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",223,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",223,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",223,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"deref","","",224,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",224,null],[11,"get_texture","","Returns the corresponding texture.",224,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",224,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",224,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture3d","glium::texture","Contains the implementation of `Texture3d`.",null,null],[3,"Texture3d","glium::texture::texture3d","A three-dimensional texture  containing floating-point data.",null,null],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`.",null,null],[11,"get_id","","",225,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",225,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",225,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",225,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",225,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",225,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",225,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",225,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",225,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",225,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",225,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture3d"}}],[11,"width","","Returns the width of that image.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",225,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",225,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",225,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",225,{"inputs":[{"name":"self"}],"output":{"name":"texture3dmipmap"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"texture3dmipmap"}}],[11,"deref","","",226,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",226,null],[11,"get_texture","","Returns the corresponding texture.",226,{"inputs":[{"name":"self"}],"output":{"name":"texture3d"}}],[11,"get_level","","Returns the texture level.",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",226,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",226,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture3d","glium::texture","Contains the implementation of `CompressedTexture3d`.",null,null],[3,"CompressedTexture3d","glium::texture::compressed_texture3d","A compressed three-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`.",null,null],[11,"get_id","","",227,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",227,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",227,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",227,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",227,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",227,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",227,null],[11,"with_format","","Builds a new texture with a specific format.",227,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",227,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",227,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture3d"}}],[11,"width","","Returns the width of that image.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",227,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",227,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",227,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",227,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"deref","","",228,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",228,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",228,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",228,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture3d","glium::texture","Contains the implementation of `SrgbTexture3d`.",null,null],[3,"SrgbTexture3d","glium::texture::srgb_texture3d","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture3dMipmap","","Represents a single mipmap level of a `SrgbTexture3d`.",null,null],[11,"get_id","","",229,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",229,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",229,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",229,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",229,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",229,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",229,{"inputs":[{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",229,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",229,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",229,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",229,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture3d"}}],[11,"width","","Returns the width of that image.",229,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",229,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",229,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",229,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",229,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",229,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",229,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",229,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"deref","","",230,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",230,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",230,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",230,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",230,null],[11,"get_texture","","Returns the corresponding texture.",230,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",230,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",230,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",230,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture3d","glium::texture","Contains the implementation of `CompressedSrgbTexture3d`.",null,null],[3,"CompressedSrgbTexture3d","glium::texture::compressed_srgb_texture3d","A compressed three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture3dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture3d`.",null,null],[11,"get_id","","",231,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",231,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",231,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",231,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",231,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",231,null],[11,"with_format","","Builds a new texture with a specific format.",231,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",231,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",231,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"width","","Returns the width of that image.",231,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",231,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",231,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",231,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",231,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",231,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",231,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",231,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",231,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"deref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",232,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",232,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",232,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",232,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture3d","glium::texture","Contains the implementation of `IntegralTexture3d`.",null,null],[3,"IntegralTexture3d","glium::texture::integral_texture3d","A three-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`.",null,null],[11,"get_id","","",233,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",233,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",233,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",233,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",233,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",233,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",233,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",233,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",233,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture3d"}}],[11,"width","","Returns the width of that image.",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",233,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",233,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",233,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",233,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"clone","","",234,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"deref","","",234,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",234,null],[11,"get_texture","","Returns the corresponding texture.",234,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",234,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",234,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture3d","glium::texture","Contains the implementation of `UnsignedTexture3d`.",null,null],[3,"UnsignedTexture3d","glium::texture::unsigned_texture3d","A three-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`.",null,null],[11,"get_id","","",235,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",235,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",235,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",235,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",235,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",235,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",235,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",235,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",235,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",235,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",235,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture3d"}}],[11,"width","","Returns the width of that image.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",235,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",235,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",235,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",235,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"deref","","",236,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",236,null],[11,"get_texture","","Returns the corresponding texture.",236,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",236,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",236,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture3d","glium::texture","Contains the implementation of `DepthTexture3d`.",null,null],[3,"DepthTexture3d","glium::texture::depth_texture3d","A three-dimensional texture  containing depth data.",null,null],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`.",null,null],[11,"get_id","","",237,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",237,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",237,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",237,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",237,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",237,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",237,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",237,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",237,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",237,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",237,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",237,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture3d"}}],[11,"width","","Returns the width of that image.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",237,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",237,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",237,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",237,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"clone","","",238,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"deref","","",238,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",238,null],[11,"get_texture","","Returns the corresponding texture.",238,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",238,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",238,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"depth_stencil_texture3d","glium::texture","Contains the implementation of `DepthStencilTexture3d`.",null,null],[3,"DepthStencilTexture3d","glium::texture::depth_stencil_texture3d","A three-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`.",null,null],[11,"get_id","","",239,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",239,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",239,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",239,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",239,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",239,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",239,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",239,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",239,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",239,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",239,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture3d"}}],[11,"width","","Returns the width of that image.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",239,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",239,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",239,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"clone","","",240,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"deref","","",240,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",240,null],[11,"get_texture","","Returns the corresponding texture.",240,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",240,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",240,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture1d_array","glium::texture","Contains the implementation of `Texture1dArray`.",null,null],[3,"Texture1dArray","glium::texture::texture1d_array","An array of one-dimensional textures  containing floating-point data.",null,null],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`.",null,null],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`.",null,null],[3,"Texture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture1dArray`.",null,null],[11,"get_id","","",241,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",241,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",241,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",241,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",241,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",241,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",241,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",241,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",241,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",241,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",241,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1darray"}}],[11,"width","","Returns the width of that image.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",241,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",241,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",241,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraymipmap"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayer"}}],[11,"width","","Returns the width of that image.",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",242,{"inputs":[{"name":"self"}],"output":{"name":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",242,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",242,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraymipmap"}}],[11,"deref","","",243,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",243,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",243,{"inputs":[{"name":"self"}],"output":{"name":"texture1darray"}}],[11,"get_level","","Returns the texture level.",243,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",243,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",243,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",244,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",244,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",244,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",244,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture1d_array","glium::texture","Contains the implementation of `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArray","glium::texture::compressed_texture1d_array","An array of compressed one-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture1dArray`.",null,null],[11,"get_id","","",245,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",245,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",245,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",245,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",245,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",245,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",245,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",245,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",245,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",245,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1darray"}}],[11,"width","","Returns the width of that image.",245,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",245,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",245,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",245,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",245,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",245,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",245,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",246,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",246,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",246,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",246,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",246,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",246,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"deref","","",247,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",247,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",247,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",247,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",247,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",247,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",248,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",248,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture1d_array","glium::texture","Contains the implementation of `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArray","glium::texture::srgb_texture1d_array","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dArrayLayer","","Represents a single layer of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture1dArray`.",null,null],[11,"get_id","","",249,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",249,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",249,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",249,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",249,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",249,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",249,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",249,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",249,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",249,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",249,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1darray"}}],[11,"width","","Returns the width of that image.",249,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",249,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",249,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",249,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",249,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",249,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",249,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",250,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",250,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",250,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",250,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",250,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",250,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"deref","","",251,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",251,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",251,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",251,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",251,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",251,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",252,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",252,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",252,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture1d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArray","glium::texture::compressed_srgb_texture1d_array","An array of compressed one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[11,"get_id","","",253,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",253,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",253,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",253,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",253,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",253,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",253,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",253,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",253,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",253,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"width","","Returns the width of that image.",253,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",253,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",253,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",253,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",253,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",253,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",253,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",254,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",254,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",254,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"deref","","",255,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",255,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",255,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",255,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",255,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",255,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",256,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",256,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture1d_array","glium::texture","Contains the implementation of `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArray","glium::texture::integral_texture1d_array","An array of one-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture1dArray`.",null,null],[11,"get_id","","",257,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",257,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",257,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",257,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",257,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",257,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",257,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",257,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",257,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",257,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",257,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1darray"}}],[11,"width","","Returns the width of that image.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",257,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",257,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",257,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",257,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",257,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",258,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",258,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",258,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"deref","","",259,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",259,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",259,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",259,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",259,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",259,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",260,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",260,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",260,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture1d_array","glium::texture","Contains the implementation of `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArray","glium::texture::unsigned_texture1d_array","An array of one-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture1dArray`.",null,null],[11,"get_id","","",261,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",261,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",261,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",261,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",261,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",261,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",261,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",261,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",261,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",261,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1darray"}}],[11,"width","","Returns the width of that image.",261,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",261,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",261,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",261,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",261,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",261,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",261,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",262,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",262,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",262,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"deref","","",263,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",263,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",263,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",263,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",264,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",264,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",264,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture1d_array","glium::texture","Contains the implementation of `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArray","glium::texture::depth_texture1d_array","An array of one-dimensional textures  containing depth data.",null,null],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture1dArray`.",null,null],[11,"get_id","","",265,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",265,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",265,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",265,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",265,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",265,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",265,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",265,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",265,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",265,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",265,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1darray"}}],[11,"width","","Returns the width of that image.",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",265,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",265,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",265,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",265,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",265,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",266,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",266,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",266,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"deref","","",267,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",267,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",267,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",267,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",267,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",267,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",268,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",268,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",268,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture1d_array","glium::texture","Contains the implementation of `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArray","glium::texture::stencil_texture1d_array","An array of one-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture1dArray`.",null,null],[11,"get_id","","",269,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",269,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",269,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",269,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",269,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",269,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",269,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",269,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",269,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",269,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1darray"}}],[11,"width","","Returns the width of that image.",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",269,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",269,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",269,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",269,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",269,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",270,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",270,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"deref","","",271,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",271,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",271,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",271,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",272,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",272,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",272,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture1d_array","glium::texture","Contains the implementation of `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArray","glium::texture::depth_stencil_texture1d_array","An array of one-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture1dArray`.",null,null],[11,"get_id","","",273,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",273,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",273,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",273,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",273,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",273,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",273,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",273,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",273,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",273,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"width","","Returns the width of that image.",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",273,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",273,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",273,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",273,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",273,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",274,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",274,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",274,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"deref","","",275,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",275,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",275,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",275,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",275,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",275,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",276,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",276,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",276,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_array","glium::texture","Contains the implementation of `Texture2dArray`.",null,null],[3,"Texture2dArray","glium::texture::texture2d_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`.",null,null],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`.",null,null],[3,"Texture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dArray`.",null,null],[11,"get_id","","",277,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",277,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",277,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",277,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",277,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",277,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",277,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",277,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",277,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",277,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",277,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2darray"}}],[11,"width","","Returns the width of that image.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",277,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",277,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",277,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",277,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",277,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",277,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraymipmap"}}],[11,"clone","","",278,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayer"}}],[11,"width","","Returns the width of that image.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",278,null],[11,"get_texture","","Returns the corresponding texture.",278,{"inputs":[{"name":"self"}],"output":{"name":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",278,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",278,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraymipmap"}}],[11,"deref","","",279,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",279,null],[11,"get_texture","","Returns the corresponding texture.",279,{"inputs":[{"name":"self"}],"output":{"name":"texture2darray"}}],[11,"get_level","","Returns the texture level.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",279,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",279,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",280,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",280,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",280,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",280,null],[11,"into","","",280,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",280,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture2d_array","glium::texture","Contains the implementation of `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArray","glium::texture::compressed_texture2d_array","An array of compressed two-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture2dArray`.",null,null],[11,"get_id","","",281,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",281,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",281,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",281,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",281,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",281,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",281,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",281,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",281,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2darray"}}],[11,"width","","Returns the width of that image.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",281,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",281,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",281,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",281,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",281,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",281,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",282,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",282,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",282,null],[11,"get_texture","","Returns the corresponding texture.",282,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",282,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",282,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",282,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",282,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"deref","","",283,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",283,null],[11,"get_texture","","Returns the corresponding texture.",283,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",283,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",283,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",284,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",284,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",284,null],[11,"into","","",284,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture2d_array","glium::texture","Contains the implementation of `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArray","glium::texture::srgb_texture2d_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dArrayLayer","","Represents a single layer of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dArray`.",null,null],[11,"get_id","","",285,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",285,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",285,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",285,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",285,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",285,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",285,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",285,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",285,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",285,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",285,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2darray"}}],[11,"width","","Returns the width of that image.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",285,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",285,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",285,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",285,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",285,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",285,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",286,null],[11,"get_texture","","Returns the corresponding texture.",286,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",286,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"deref","","",287,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",287,null],[11,"get_texture","","Returns the corresponding texture.",287,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",287,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",288,null],[11,"into","","",288,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",288,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture2d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArray","glium::texture::compressed_srgb_texture2d_array","An array of compressed two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[11,"get_id","","",289,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",289,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",289,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",289,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",289,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",289,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",289,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",289,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",289,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",289,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"width","","Returns the width of that image.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",289,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",289,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",289,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",289,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",289,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",290,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",290,null],[11,"get_texture","","Returns the corresponding texture.",290,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",290,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"clone","","",291,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"deref","","",291,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",291,null],[11,"get_texture","","Returns the corresponding texture.",291,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",291,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",292,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",292,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",292,null],[11,"into","","",292,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture2d_array","glium::texture","Contains the implementation of `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArray","glium::texture::integral_texture2d_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dArray`.",null,null],[11,"get_id","","",293,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",293,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",293,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",293,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",293,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",293,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",293,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",293,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",293,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",293,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",293,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2darray"}}],[11,"width","","Returns the width of that image.",293,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",293,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",293,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",293,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",293,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",293,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",293,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",293,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",293,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",293,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",294,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",294,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",294,null],[11,"get_texture","","Returns the corresponding texture.",294,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",294,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",294,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",294,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",294,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"deref","","",295,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",295,null],[11,"get_texture","","Returns the corresponding texture.",295,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",295,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",295,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",296,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",296,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",296,null],[11,"into","","",296,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",296,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_array","glium::texture","Contains the implementation of `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArray","glium::texture::unsigned_texture2d_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dArray`.",null,null],[11,"get_id","","",297,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",297,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",297,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",297,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",297,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",297,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",297,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",297,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",297,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",297,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",297,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2darray"}}],[11,"width","","Returns the width of that image.",297,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",297,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",297,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",297,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",297,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",297,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",297,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",297,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",297,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",297,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",298,null],[11,"get_texture","","Returns the corresponding texture.",298,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",298,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"deref","","",299,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",299,null],[11,"get_texture","","Returns the corresponding texture.",299,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",299,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",300,null],[11,"into","","",300,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",300,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_array","glium::texture","Contains the implementation of `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArray","glium::texture::depth_texture2d_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dArray`.",null,null],[11,"get_id","","",301,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",301,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",301,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",301,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",301,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",301,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",301,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",301,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",301,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",301,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",301,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2darray"}}],[11,"width","","Returns the width of that image.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",301,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",301,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",301,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",301,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",301,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"clone","","",302,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",302,null],[11,"get_texture","","Returns the corresponding texture.",302,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",302,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"deref","","",303,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",303,null],[11,"get_texture","","Returns the corresponding texture.",303,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",303,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",304,null],[11,"into","","",304,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",304,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_array","glium::texture","Contains the implementation of `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArray","glium::texture::stencil_texture2d_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dArray`.",null,null],[11,"get_id","","",305,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",305,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",305,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",305,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",305,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",305,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",305,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",305,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",305,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",305,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2darray"}}],[11,"width","","Returns the width of that image.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",305,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",305,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",305,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",305,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",305,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"clone","","",306,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",306,null],[11,"get_texture","","Returns the corresponding texture.",306,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",306,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"deref","","",307,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",307,null],[11,"get_texture","","Returns the corresponding texture.",307,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",307,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",308,null],[11,"into","","",308,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",308,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_array","glium::texture","Contains the implementation of `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArray","glium::texture::depth_stencil_texture2d_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dArray`.",null,null],[11,"get_id","","",309,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",309,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",309,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",309,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",309,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",309,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",309,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",309,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",309,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"width","","Returns the width of that image.",309,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",309,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",309,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",309,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",309,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",309,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",309,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",309,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",309,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",309,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",310,null],[11,"get_texture","","Returns the corresponding texture.",310,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",310,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",310,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"deref","","",311,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",311,null],[11,"get_texture","","Returns the corresponding texture.",311,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",311,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",311,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",312,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",312,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",312,null],[11,"into","","",312,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",312,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_multisample_array","glium::texture","Contains the implementation of `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArray","glium::texture::texture2d_multisample_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dMultisampleArrayLayer","","Represents a single layer of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dMultisampleArray`.",null,null],[11,"get_id","","",313,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",313,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",313,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",313,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",313,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",313,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",313,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",313,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",313,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",313,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",313,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",313,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",313,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",314,null],[11,"get_texture","","Returns the corresponding texture.",314,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",314,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",314,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"deref","","",315,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",315,null],[11,"get_texture","","Returns the corresponding texture.",315,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",315,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",316,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",316,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",316,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",316,null],[11,"into","","",316,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",316,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"srgb_texture2d_multisample_array","glium::texture","Contains the implementation of `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArray","glium::texture::srgb_texture2d_multisample_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleArrayLayer","","Represents a single layer of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[11,"get_id","","",317,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",317,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",317,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",317,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",317,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",317,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",317,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",317,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",317,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",317,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",317,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",317,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",317,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",318,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",318,null],[11,"get_texture","","Returns the corresponding texture.",318,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",318,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"deref","","",319,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",319,null],[11,"get_texture","","Returns the corresponding texture.",319,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",319,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",319,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",320,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",320,null],[11,"into","","",320,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",320,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"integral_texture2d_multisample_array","glium::texture","Contains the implementation of `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArray","glium::texture::integral_texture2d_multisample_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleArrayLayer","","Represents a single layer of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[11,"get_id","","",321,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",321,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",321,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",321,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",321,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",321,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",321,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",321,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",321,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",321,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",321,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",321,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",321,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",321,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",321,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",322,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",322,null],[11,"get_texture","","Returns the corresponding texture.",322,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",322,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",322,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",323,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"deref","","",323,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",323,null],[11,"get_texture","","Returns the corresponding texture.",323,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",323,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",323,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",324,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",324,null],[11,"into","","",324,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",324,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_multisample_array","glium::texture","Contains the implementation of `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArray","glium::texture::unsigned_texture2d_multisample_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayer","","Represents a single layer of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[11,"get_id","","",325,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",325,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",325,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",325,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",325,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",325,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",325,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",325,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",325,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",325,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",325,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",325,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",325,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",325,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",325,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",326,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",326,null],[11,"get_texture","","Returns the corresponding texture.",326,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",326,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",326,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",327,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"deref","","",327,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",327,null],[11,"get_texture","","Returns the corresponding texture.",327,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",327,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",327,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",328,null],[11,"into","","",328,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",328,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArray","glium::texture::depth_texture2d_multisample_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[11,"get_id","","",329,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",329,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",329,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",329,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",329,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",329,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",329,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",329,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",329,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",329,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",329,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",329,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",329,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",329,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",329,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",330,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",330,null],[11,"get_texture","","Returns the corresponding texture.",330,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",330,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",330,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",331,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"deref","","",331,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",331,null],[11,"get_texture","","Returns the corresponding texture.",331,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",331,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",331,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",332,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",332,null],[11,"into","","",332,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",332,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArray","glium::texture::stencil_texture2d_multisample_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",333,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",333,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",333,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",333,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",333,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",333,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",333,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",333,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",333,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",333,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",333,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",333,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",333,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",333,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",334,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",334,null],[11,"get_texture","","Returns the corresponding texture.",334,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",334,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",334,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",335,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",335,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",335,null],[11,"get_texture","","Returns the corresponding texture.",335,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",335,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",335,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",336,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",336,null],[11,"into","","",336,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",336,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArray","glium::texture::depth_stencil_texture2d_multisample_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",337,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",337,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",337,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",337,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",337,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",337,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",337,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",337,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",337,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",337,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",337,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",337,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",337,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",337,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",338,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",338,null],[11,"get_texture","","Returns the corresponding texture.",338,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",338,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",338,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",339,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",339,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",339,null],[11,"get_texture","","Returns the corresponding texture.",339,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",339,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",339,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",340,null],[11,"into","","",340,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",340,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"cubemap","glium::texture","Contains the implementation of `Cubemap`.",null,null],[3,"Cubemap","glium::texture::cubemap","A cube texture  containing floating-point data.",null,null],[3,"CubemapMipmap","","Represents a single mipmap level of a `Cubemap`.",null,null],[3,"CubemapImage","","Represents a single image of a mipmap level of a layer of `Cubemap`.",null,null],[11,"get_id","","",341,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",341,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",341,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",341,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",341,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",341,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",341,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",341,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",341,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemap"}}],[11,"width","","Returns the width of that image.",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",341,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",341,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",341,{"inputs":[{"name":"self"}],"output":{"name":"cubemapmipmap"}}],[11,"clone","","",342,{"inputs":[{"name":"self"}],"output":{"name":"cubemapmipmap"}}],[11,"deref","","",342,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",342,{"inputs":[{"name":"self"}],"output":{"name":"cubemap"}}],[11,"get_level","","Returns the texture level.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",342,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"cubemapimage"}}],[11,"clone","","",343,{"inputs":[{"name":"self"}],"output":{"name":"cubemapimage"}}],[11,"width","","Returns the width of that image.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",343,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",343,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_cubemap","glium::texture","Contains the implementation of `CompressedCubemap`.",null,null],[3,"CompressedCubemap","glium::texture::compressed_cubemap","A compressed cube texture  containing floating-point data.",null,null],[3,"CompressedCubemapMipmap","","Represents a single mipmap level of a `CompressedCubemap`.",null,null],[3,"CompressedCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemap`.",null,null],[11,"get_id","","",344,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",344,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",344,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",344,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",344,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",344,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",344,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemap"}}],[11,"width","","Returns the width of that image.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",344,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",344,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",344,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",344,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"clone","","",345,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"deref","","",345,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",345,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",345,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",345,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",345,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",345,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemap"}}],[11,"get_level","","Returns the texture level.",345,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",345,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedcubemapimage"}}],[11,"clone","","",346,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemapimage"}}],[11,"width","","Returns the width of that image.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",346,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_cubemap","glium::texture","Contains the implementation of `SrgbCubemap`.",null,null],[3,"SrgbCubemap","glium::texture::srgb_cubemap","A cube texture  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapMipmap","","Represents a single mipmap level of a `SrgbCubemap`.",null,null],[3,"SrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemap`.",null,null],[11,"get_id","","",347,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",347,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",347,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",347,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",347,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",347,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",347,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",347,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",347,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemap"}}],[11,"width","","Returns the width of that image.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",347,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",347,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",347,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"clone","","",348,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"deref","","",348,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",348,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemap"}}],[11,"get_level","","Returns the texture level.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",348,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"srgbcubemapimage"}}],[11,"clone","","",349,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemapimage"}}],[11,"width","","Returns the width of that image.",349,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",349,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",349,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",349,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",349,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_cubemap","glium::texture","Contains the implementation of `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemap","glium::texture::compressed_srgb_cubemap","A compressed cube texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemap`.",null,null],[11,"get_id","","",350,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",350,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",350,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",350,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",350,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",350,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"width","","Returns the width of that image.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",350,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",350,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",350,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",350,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"clone","","",351,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"deref","","",351,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",351,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",351,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"get_level","","Returns the texture level.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",351,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"clone","","",352,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"width","","Returns the width of that image.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",352,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_cubemap","glium::texture","Contains the implementation of `IntegralCubemap`.",null,null],[3,"IntegralCubemap","glium::texture::integral_cubemap","A cube texture  containing signed integral data.",null,null],[3,"IntegralCubemapMipmap","","Represents a single mipmap level of a `IntegralCubemap`.",null,null],[3,"IntegralCubemapImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemap`.",null,null],[11,"get_id","","",353,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",353,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",353,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",353,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",353,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",353,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",353,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",353,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",353,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemap"}}],[11,"width","","Returns the width of that image.",353,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",353,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",353,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",353,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",353,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",353,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",353,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemapmipmap"}}],[11,"clone","","",354,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemapmipmap"}}],[11,"deref","","",354,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",354,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemap"}}],[11,"get_level","","Returns the texture level.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",354,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"integralcubemapimage"}}],[11,"clone","","",355,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemapimage"}}],[11,"width","","Returns the width of that image.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",355,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",355,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_cubemap","glium::texture","Contains the implementation of `UnsignedCubemap`.",null,null],[3,"UnsignedCubemap","glium::texture::unsigned_cubemap","A cube texture  containing unsigned integral data.",null,null],[3,"UnsignedCubemapMipmap","","Represents a single mipmap level of a `UnsignedCubemap`.",null,null],[3,"UnsignedCubemapImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemap`.",null,null],[11,"get_id","","",356,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",356,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",356,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",356,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",356,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",356,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",356,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",356,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",356,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemap"}}],[11,"width","","Returns the width of that image.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",356,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",356,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",356,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"clone","","",357,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"deref","","",357,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",357,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemap"}}],[11,"get_level","","Returns the texture level.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",357,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemapimage"}}],[11,"clone","","",358,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemapimage"}}],[11,"width","","Returns the width of that image.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",358,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",358,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_cubemap","glium::texture","Contains the implementation of `DepthCubemap`.",null,null],[3,"DepthCubemap","glium::texture::depth_cubemap","A cube texture  containing depth data.",null,null],[3,"DepthCubemapMipmap","","Represents a single mipmap level of a `DepthCubemap`.",null,null],[3,"DepthCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthCubemap`.",null,null],[11,"get_id","","",359,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",359,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",359,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",359,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",359,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",359,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",359,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",359,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemap"}}],[11,"width","","Returns the width of that image.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",359,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",359,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",359,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemapmipmap"}}],[11,"clone","","",360,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemapmipmap"}}],[11,"deref","","",360,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",360,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemap"}}],[11,"get_level","","Returns the texture level.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",360,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthcubemapimage"}}],[11,"clone","","",361,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemapimage"}}],[11,"width","","Returns the width of that image.",361,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",361,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",361,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",361,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",361,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_cubemap","glium::texture","Contains the implementation of `StencilCubemap`.",null,null],[3,"StencilCubemap","glium::texture::stencil_cubemap","A cube texture  containing stencil data.",null,null],[3,"StencilCubemapMipmap","","Represents a single mipmap level of a `StencilCubemap`.",null,null],[3,"StencilCubemapImage","","Represents a single image of a mipmap level of a layer of `StencilCubemap`.",null,null],[11,"get_id","","",362,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",362,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",362,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",362,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",362,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",362,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",362,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemap"}}],[11,"width","","Returns the width of that image.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",362,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",362,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",362,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"clone","","",363,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"deref","","",363,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",363,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemap"}}],[11,"get_level","","Returns the texture level.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",363,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"stencilcubemapimage"}}],[11,"clone","","",364,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemapimage"}}],[11,"width","","Returns the width of that image.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",364,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",364,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_cubemap","glium::texture","Contains the implementation of `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemap","glium::texture::depth_stencil_cubemap","A cube texture  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapMipmap","","Represents a single mipmap level of a `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemap`.",null,null],[11,"get_id","","",365,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",365,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",365,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",365,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",365,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",365,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",365,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",365,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemap"}}],[11,"width","","Returns the width of that image.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",365,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",365,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",365,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"clone","","",366,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"deref","","",366,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",366,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemap"}}],[11,"get_level","","Returns the texture level.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",366,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"width","","Returns the width of that image.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",367,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",367,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"cubemap_array","glium::texture","Contains the implementation of `CubemapArray`.",null,null],[3,"CubemapArray","glium::texture::cubemap_array","An array of cube textures  containing floating-point data.",null,null],[3,"CubemapArrayLayer","","Represents a single layer of a `CubemapArray`.",null,null],[3,"CubemapArrayMipmap","","Represents a single mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CubemapArray`.",null,null],[11,"get_id","","",368,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",368,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",368,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",368,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",368,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",368,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",368,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",368,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemaparray"}}],[11,"width","","Returns the width of that image.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",368,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",368,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",368,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",368,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",368,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraymipmap"}}],[11,"clone","","",369,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayer"}}],[11,"width","","Returns the width of that image.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",369,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparray"}}],[11,"get_layer","","Returns the layer index.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",369,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",369,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"clone","","",370,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraymipmap"}}],[11,"deref","","",370,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",370,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparray"}}],[11,"get_level","","Returns the texture level.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",370,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",370,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",371,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",371,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"cubemaparrayimage"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparrayimage"}}],[11,"width","","Returns the width of that image.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",372,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",372,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_cubemap_array","glium::texture","Contains the implementation of `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArray","glium::texture::compressed_cubemap_array","An array of compressed cube textures  containing floating-point data.",null,null],[3,"CompressedCubemapArrayLayer","","Represents a single layer of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemapArray`.",null,null],[11,"get_id","","",373,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",373,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",373,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",373,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",373,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",373,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",373,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemaparray"}}],[11,"width","","Returns the width of that image.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",373,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",373,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",373,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",373,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",373,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"clone","","",374,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",374,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",374,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",374,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"clone","","",375,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"deref","","",375,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",375,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_level","","Returns the texture level.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",375,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",376,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",376,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"clone","","",377,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",377,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_cubemap_array","glium::texture","Contains the implementation of `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArray","glium::texture::srgb_cubemap_array","An array of cube textures  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapArrayLayer","","Represents a single layer of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayMipmap","","Represents a single mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemapArray`.",null,null],[11,"get_id","","",378,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",378,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",378,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",378,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",378,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",378,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",378,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemaparray"}}],[11,"width","","Returns the width of that image.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",378,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"clone","","",379,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",379,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",379,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"clone","","",380,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"deref","","",380,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",380,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",380,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",381,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",381,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"clone","","",382,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",382,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",382,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_cubemap_array","glium::texture","Contains the implementation of `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArray","glium::texture::compressed_srgb_cubemap_array","An array of compressed cube textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapArrayLayer","","Represents a single layer of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemapArray`.",null,null],[11,"get_id","","",383,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",383,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",383,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",383,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",383,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",383,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"width","","Returns the width of that image.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",383,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",383,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",383,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",383,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"clone","","",384,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",384,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",384,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",384,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"clone","","",385,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"deref","","",385,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",385,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",385,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",385,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",386,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",386,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"clone","","",387,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",387,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_cubemap_array","glium::texture","Contains the implementation of `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArray","glium::texture::integral_cubemap_array","An array of cube textures  containing signed integral data.",null,null],[3,"IntegralCubemapArrayLayer","","Represents a single layer of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayMipmap","","Represents a single mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemapArray`.",null,null],[11,"get_id","","",388,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",388,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",388,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",388,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",388,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",388,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",388,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",388,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemaparray"}}],[11,"width","","Returns the width of that image.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",388,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",388,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",388,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"clone","","",389,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",389,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparray"}}],[11,"get_layer","","Returns the layer index.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",389,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",389,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"deref","","",390,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",390,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparray"}}],[11,"get_level","","Returns the texture level.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",390,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",390,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",391,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",391,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"clone","","",392,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",392,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",392,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_cubemap_array","glium::texture","Contains the implementation of `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArray","glium::texture::unsigned_cubemap_array","An array of cube textures  containing unsigned integral data.",null,null],[3,"UnsignedCubemapArrayLayer","","Represents a single layer of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayMipmap","","Represents a single mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemapArray`.",null,null],[11,"get_id","","",393,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",393,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",393,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",393,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",393,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",393,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",393,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",393,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",393,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemaparray"}}],[11,"width","","Returns the width of that image.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",393,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",393,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",393,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",393,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",393,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"clone","","",394,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",394,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",394,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",394,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"clone","","",395,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"deref","","",395,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",395,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_level","","Returns the texture level.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",395,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",395,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",396,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",396,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"clone","","",397,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",397,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",397,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_cubemap_array","glium::texture","Contains the implementation of `DepthCubemapArray`.",null,null],[3,"DepthCubemapArray","glium::texture::depth_cubemap_array","An array of cube textures  containing depth data.",null,null],[3,"DepthCubemapArrayLayer","","Represents a single layer of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayMipmap","","Represents a single mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthCubemapArray`.",null,null],[11,"get_id","","",398,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",398,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",398,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",108,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",398,{"inputs":[{"name":"self"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",398,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",398,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",398,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",398,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",398,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemaparray"}}],[11,"width","","Returns the width of that image.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",398,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",398,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",398,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",398,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",398,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"clone","","",399,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",399,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparray"}}],[11,"get_layer","","Returns the layer index.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",399,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",399,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"clone","","",400,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"deref","","",400,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",400,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparray"}}],[11,"get_level","","Returns the texture level.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",400,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",400,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",401,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",401,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"clone","","",402,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",402,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",402,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",402,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",402,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",402,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_cubemap_array","glium::texture","Contains the implementation of `StencilCubemapArray`.",null,null],[3,"StencilCubemapArray","glium::texture::stencil_cubemap_array","An array of cube textures  containing stencil data.",null,null],[3,"StencilCubemapArrayLayer","","Represents a single layer of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayMipmap","","Represents a single mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `StencilCubemapArray`.",null,null],[11,"get_id","","",403,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",403,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",403,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",403,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",403,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",403,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",403,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemaparray"}}],[11,"width","","Returns the width of that image.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",403,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",403,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",403,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",403,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",403,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"clone","","",404,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",404,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",404,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",404,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"clone","","",405,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"deref","","",405,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",405,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",405,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",405,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",406,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",406,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"clone","","",407,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",407,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",407,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_cubemap_array","glium::texture","Contains the implementation of `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArray","glium::texture::depth_stencil_cubemap_array","An array of cube textures  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapArrayLayer","","Represents a single layer of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayMipmap","","Represents a single mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemapArray`.",null,null],[11,"get_id","","",408,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",408,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",408,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",408,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",408,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",408,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",408,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"width","","Returns the width of that image.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",408,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",408,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",408,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",408,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",408,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"clone","","",409,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",409,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",409,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",409,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"clone","","",410,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"deref","","",410,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",410,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",410,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",410,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",411,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",411,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"clone","","",412,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",412,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",412,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[8,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel.",null,null],[10,"get_format","","Returns corresponding client format.",413,{"inputs":[],"output":{"name":"clientformat"}}],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",414,null],[10,"into_raw","","Returns the raw representation of the data.",414,{"inputs":[{"name":"self"}],"output":{"name":"rawimage1d"}}],[8,"Texture1dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",415,{"inputs":[{"name":"cow"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",416,null],[10,"into_raw","","Returns the raw representation of the data.",416,{"inputs":[{"name":"self"}],"output":{"name":"rawimage2d"}}],[8,"Texture2dDataSink","","Trait that describes types that can be built from two-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",417,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToClientFormat","","",null,null],[10,"rgb_format","","",418,{"inputs":[],"output":{"name":"clientformat"}}],[10,"rgba_format","","",418,{"inputs":[],"output":{"name":"clientformat"}}],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",419,null],[10,"into_raw","","Returns the raw representation of the data.",419,{"inputs":[{"name":"self"}],"output":{"name":"rawimage3d"}}],[8,"Texture3dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",420,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"cubelayer"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"get_layer_index","","In some situations whole cubemaps can be bound at once. If this is the case, each layer of the cubemap has a specific index.",154,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"texturekind"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"mipmapsoption"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"from","","",156,{"inputs":[{"name":"compressedmipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"compressedmipmapsoption"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"into_raw","","",136,{"inputs":[{"name":"self"}],"output":{"name":"rawimage1d"}}],[11,"from_raw_rgb","","Builds a raw image from a vector of interleaved RGB values.",137,null],[11,"from_raw_rgba","","Builds a raw image from a vector of interleaved RGBA values.",137,null],[11,"from_raw_rgb_reversed","","Builds a raw image from a vector of interleaved RGB values, flipping it vertically.",137,null],[11,"from_raw_rgba_reversed","","Builds a raw image from a vector of interleaved RGBA values, flipping it vertically.",137,null],[11,"from_vec_raw1d","","Transforms a Vec into a RawImage2d",137,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage2d"}}],[11,"into_raw","","",137,{"inputs":[{"name":"self"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",137,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_vec_raw2d","","Transforms a Vec into a RawImage3d",138,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage3d"}}],[11,"into_raw","","",138,{"inputs":[{"name":"self"}],"output":{"name":"rawimage3d"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"texturecreationerror"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",158,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",158,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","glium","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"profile"}}],[11,"clone","glium::backend","",17,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"new","","Builds a new context.",421,{"inputs":[{"name":"b"},{"name":"bool"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",421,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",421,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",421,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",421,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",421,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",421,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",421,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"get_opengl_version_string","","Returns a string containing this GL version or release number used by this context.",421,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_opengl_vendor_string","","Returns a string containing the company responsible for this GL implementation.",421,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_opengl_renderer_string","","Returns a string containing the name of the GL renderer used by this context.",421,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_debug","","Returns true if the context is in debug mode.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_forward_compatible","","Returns true if the context is in \"forward-compatible\" mode.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_opengl_profile","","Returns this context's OpenGL profile if available.",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot result in a crash.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_release_behavior","","Returns the behavior when the current OpenGL context is changed.",421,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None` if the hardware doesn't support it.",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",421,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",421,{"inputs":[{"name":"self"}],"output":null}],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",421,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",421,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another component needs to directly manipulate OpenGL state.",421,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",421,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"synchronize","","DEPRECATED. Renamed `finish`.",421,{"inputs":[{"name":"self"}],"output":null}],[11,"finish","","Calls `glFinish()`. This waits until all the previously issued commands have finished being executed.",421,{"inputs":[{"name":"self"}],"output":null}],[11,"flush","","Calls `glFlush()`. This starts executing the commands that you have issued if it is not yet the case.",421,{"inputs":[{"name":"self"}],"output":null}],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will be able to see that string.",421,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions` it is a no-op and returns `Ok`.",421,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_version","","",421,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"get_extensions","","",421,{"inputs":[{"name":"self"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",421,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"drop","","",421,{"inputs":[{"name":"self"}],"output":null}],[11,"default","glium::debug","",35,{"inputs":[],"output":{"name":"debugcallbackbehavior"}}],[11,"clone","glium::framebuffer","",57,{"inputs":[{"name":"self"}],"output":{"name":"validationerror"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","glium::texture","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"clientformat"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",139,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"uncompressedfloatformat"}}],[11,"hash","","",141,null],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",141,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",141,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",141,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",141,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"srgbformat"}}],[11,"hash","","",149,null],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",149,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",149,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",149,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",149,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"uncompressedintformat"}}],[11,"hash","","",142,null],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",142,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",142,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",142,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",142,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"uncompresseduintformat"}}],[11,"hash","","",143,null],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",143,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",143,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",143,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",143,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"compressedformat"}}],[11,"hash","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",144,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",144,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",144,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbformat"}}],[11,"hash","","",148,null],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",148,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",148,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",148,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"depthformat"}}],[11,"hash","","",145,null],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",145,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",145,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",145,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilformat"}}],[11,"hash","","",146,null],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",146,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",146,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",146,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"stencilformat"}}],[11,"hash","","",147,null],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",147,{"inputs":[],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",147,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",147,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",147,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"hash","","",140,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",140,{"inputs":[],"output":{"name":"vec"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",140,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",140,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_renderable","","Returns true if the format is color-renderable, depth-renderable, depth-stencil-renderable or stencil-renderable.",140,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"new","glium","Builds a new `SyncFence` that is injected in the server.",422,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",422,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",422,{"inputs":[{"name":"self"}],"output":null}],[11,"into_sync_fence","","Turns the prototype into a real fence.",423,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"drop","","",423,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"option"}}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"CapabilitiesSource","","Trait for objects that describe the capabilities of an OpenGL backend.",null,null],[10,"get_version","","Returns the version of the backend.",424,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[10,"get_extensions","","Returns the list of extensions that are supported.",424,{"inputs":[{"name":"self"}],"output":{"name":"extensionslist"}}],[10,"get_capabilities","","Returns the capabilities of the backend.",424,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[8,"GlObject","","Trait for objects that are OpenGL objects.",null,null],[16,"Id","","The type of identifier for this object.",425,null],[10,"get_id","","Returns the id of the object.",425,null],[8,"Surface","","Object that can be drawn upon.",null,null],[10,"clear","","Clears some attachments of the target.",426,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"clear_color","","Clears the color attachment of the target.",426,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_color_srgb","","Clears the color attachment of the target. The color is in sRGB format.",426,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_depth","","Clears the depth attachment of the target.",426,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"clear_stencil","","Clears the stencil attachment of the target.",426,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",426,null],[11,"clear_color_srgb_and_depth","","Clears the color and depth attachments of the target. The color is in sRGB format.",426,null],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",426,null],[11,"clear_color_srgb_and_stencil","","Clears the color and stencil attachments of the target. The color is in sRGB format.",426,null],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",426,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":null}],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",426,null],[11,"clear_all_srgb","","Clears the color, depth and stencil attachments of the target. The color is in sRGB format.",426,null],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",426,null],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",426,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",426,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",426,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",426,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"draw","","Draws.",426,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[10,"blit_from_frame","","Blits from the default framebuffer.",426,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_simple_framebuffer","","Blits from a simple framebuffer.",426,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_multioutput_framebuffer","","Blits from a multi-output framebuffer.",426,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",426,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",426,{"inputs":[{"name":"self"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",426,{"inputs":[{"name":"self"},{"name":"s"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rawuniformvalue"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"rect"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blittarget"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"blittarget"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"drawerror"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"swapbufferserror"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",427,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",427,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",427,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clear","","",427,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",427,null],[11,"get_depth_buffer_bits","","",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",427,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"draw","","",427,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",427,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",427,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",427,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",427,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"drop","","",427,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"incompatibleopengl"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"incompatibleopengl"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"incompatibleopengl"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"assert_no_gl_error","","Calls the `assert_no_error` method on a `glium::Display` instance with file and line number information.",null,null],[14,"uniform","","Returns an implementation-defined type which implements the `Uniform` trait.",null,null],[14,"implement_vertex","","Implements the `glium::vertex::Vertex` trait for the given type.",null,null],[14,"implement_buffer_content","","Implements the `glium::buffer::Content` trait for the given type.",null,null],[14,"implement_uniform_block","","Implements the `glium::uniforms::UniformBlock` trait for the given type.",null,null],[14,"program","","Builds a program depending on the GLSL version supported by the backend.",null,null]],"paths":[[3,"Blend"],[3,"Depth"],[3,"Version"],[3,"Rect"],[3,"BlitTarget"],[3,"IncompatibleOpenGl"],[4,"Profile"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"DepthTest"],[4,"StencilTest"],[4,"StencilOperation"],[4,"Api"],[4,"Handle"],[4,"RawUniformValue"],[4,"DrawError"],[4,"SwapBuffersError"],[4,"ReleaseBehavior"],[8,"Backend"],[8,"Facade"],[4,"ReadError"],[4,"CopyError"],[4,"BufferCreationError"],[4,"BufferMode"],[4,"BufferType"],[3,"Mapping"],[3,"ReadMapping"],[3,"WriteMapping"],[3,"Inserter"],[3,"Buffer"],[3,"BufferSlice"],[3,"BufferMutSlice"],[3,"BufferAny"],[3,"BufferAnySlice"],[8,"Content"],[4,"DebugCallbackBehavior"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[3,"Stencil"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"DepthClamp"],[4,"QueryCreationError"],[4,"BackfaceCullingMode"],[4,"PolygonMode"],[4,"Smooth"],[4,"ProvokingVertex"],[4,"SamplesQueryParam"],[3,"SamplesPassedQuery"],[3,"TimeElapsedQuery"],[3,"AnySamplesPassedQuery"],[3,"PrimitivesGeneratedQuery"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[4,"DefaultFramebufferAttachment"],[4,"RenderBufferCreationError"],[4,"ValidationError"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[3,"DefaultFramebuffer"],[3,"RenderBuffer"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"RenderBufferAny"],[8,"ToColorAttachment"],[8,"ToDepthAttachment"],[8,"ToStencilAttachment"],[8,"ToDepthStencilAttachment"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[3,"EmptyFrameBuffer"],[3,"DrawCommandNoIndices"],[3,"DrawCommandIndices"],[3,"NoIndices"],[4,"BufferCreationError"],[4,"IndicesSource"],[4,"PrimitiveType"],[4,"IndexType"],[3,"IndexBuffer"],[3,"IndexBufferSlice"],[3,"IndexBufferAny"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DrawCommandsIndicesBuffer"],[8,"Index"],[3,"ComputeCommand"],[3,"Uniform"],[3,"UniformBlock"],[3,"Attribute"],[3,"TransformFeedbackVarying"],[3,"TransformFeedbackBuffer"],[3,"SubroutineData"],[3,"SubroutineUniform"],[3,"SourceCode"],[3,"Binary"],[4,"BlockLayout"],[4,"OutputPrimitives"],[4,"TransformFeedbackMode"],[4,"ShaderStage"],[4,"ProgramCreationError"],[4,"ProgramChooserCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"ComputeShader"],[3,"Program"],[3,"Sampler"],[3,"SamplerBehavior"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[4,"UniformValue"],[4,"UniformType"],[4,"LayoutMismatchError"],[3,"UniformBuffer"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[8,"Uniforms"],[8,"AsUniformValue"],[8,"UniformBlock"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[4,"BufferCreationError"],[4,"AttributeType"],[4,"VerticesSource"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"TransformFeedbackSession"],[8,"IntoVerticesSource"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[3,"PerInstance"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"ClientFormat"],[4,"TextureFormat"],[4,"UncompressedFloatFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"CompressedSrgbFormat"],[4,"SrgbFormat"],[4,"Dimensions"],[4,"InternalFormat"],[4,"InternalFormatType"],[4,"GetFormatError"],[4,"CubeLayer"],[4,"TextureKind"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[4,"TextureCreationError"],[3,"ResidentTexture"],[3,"TextureHandle"],[3,"BindlessTexturesNotSupportedError"],[4,"TextureCreationError"],[4,"CreationError"],[4,"BufferTextureType"],[4,"TextureBufferContentType"],[8,"TextureBufferContent"],[3,"BufferTexture"],[3,"BufferTextureRef"],[3,"PixelBuffer"],[3,"TextureAny"],[3,"TextureAnyLayer"],[3,"TextureAnyMipmap"],[3,"TextureAnyLayerMipmap"],[3,"TextureAnyImage"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"Texture1dArrayLayerMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"CompressedTexture1dArrayLayerMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"SrgbTexture1dArrayLayerMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArrayLayerMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"IntegralTexture1dArrayLayerMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"UnsignedTexture1dArrayLayerMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"DepthTexture1dArrayLayerMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"StencilTexture1dArrayLayerMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArrayLayerMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"Texture2dArrayLayerMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"CompressedTexture2dArrayLayerMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"SrgbTexture2dArrayLayerMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArrayLayerMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"IntegralTexture2dArrayLayerMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"UnsignedTexture2dArrayLayerMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"DepthTexture2dArrayLayerMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"StencilTexture2dArrayLayerMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArrayLayerMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayLayer"],[3,"Texture2dMultisampleArrayMipmap"],[3,"Texture2dMultisampleArrayLayerMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayLayer"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArrayLayerMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayLayer"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayLayer"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayLayer"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArrayLayerMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayLayer"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArrayLayerMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayLayer"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap"],[3,"Cubemap"],[3,"CubemapMipmap"],[3,"CubemapImage"],[3,"CompressedCubemap"],[3,"CompressedCubemapMipmap"],[3,"CompressedCubemapImage"],[3,"SrgbCubemap"],[3,"SrgbCubemapMipmap"],[3,"SrgbCubemapImage"],[3,"CompressedSrgbCubemap"],[3,"CompressedSrgbCubemapMipmap"],[3,"CompressedSrgbCubemapImage"],[3,"IntegralCubemap"],[3,"IntegralCubemapMipmap"],[3,"IntegralCubemapImage"],[3,"UnsignedCubemap"],[3,"UnsignedCubemapMipmap"],[3,"UnsignedCubemapImage"],[3,"DepthCubemap"],[3,"DepthCubemapMipmap"],[3,"DepthCubemapImage"],[3,"StencilCubemap"],[3,"StencilCubemapMipmap"],[3,"StencilCubemapImage"],[3,"DepthStencilCubemap"],[3,"DepthStencilCubemapMipmap"],[3,"DepthStencilCubemapImage"],[3,"CubemapArray"],[3,"CubemapArrayLayer"],[3,"CubemapArrayMipmap"],[3,"CubemapArrayLayerMipmap"],[3,"CubemapArrayImage"],[3,"CompressedCubemapArray"],[3,"CompressedCubemapArrayLayer"],[3,"CompressedCubemapArrayMipmap"],[3,"CompressedCubemapArrayLayerMipmap"],[3,"CompressedCubemapArrayImage"],[3,"SrgbCubemapArray"],[3,"SrgbCubemapArrayLayer"],[3,"SrgbCubemapArrayMipmap"],[3,"SrgbCubemapArrayLayerMipmap"],[3,"SrgbCubemapArrayImage"],[3,"CompressedSrgbCubemapArray"],[3,"CompressedSrgbCubemapArrayLayer"],[3,"CompressedSrgbCubemapArrayMipmap"],[3,"CompressedSrgbCubemapArrayLayerMipmap"],[3,"CompressedSrgbCubemapArrayImage"],[3,"IntegralCubemapArray"],[3,"IntegralCubemapArrayLayer"],[3,"IntegralCubemapArrayMipmap"],[3,"IntegralCubemapArrayLayerMipmap"],[3,"IntegralCubemapArrayImage"],[3,"UnsignedCubemapArray"],[3,"UnsignedCubemapArrayLayer"],[3,"UnsignedCubemapArrayMipmap"],[3,"UnsignedCubemapArrayLayerMipmap"],[3,"UnsignedCubemapArrayImage"],[3,"DepthCubemapArray"],[3,"DepthCubemapArrayLayer"],[3,"DepthCubemapArrayMipmap"],[3,"DepthCubemapArrayLayerMipmap"],[3,"DepthCubemapArrayImage"],[3,"StencilCubemapArray"],[3,"StencilCubemapArrayLayer"],[3,"StencilCubemapArrayMipmap"],[3,"StencilCubemapArrayLayerMipmap"],[3,"StencilCubemapArrayImage"],[3,"DepthStencilCubemapArray"],[3,"DepthStencilCubemapArrayLayer"],[3,"DepthStencilCubemapArrayMipmap"],[3,"DepthStencilCubemapArrayLayerMipmap"],[3,"DepthStencilCubemapArrayImage"],[8,"PixelValue"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[8,"ToClientFormat"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"Context"],[3,"SyncFence"],[3,"LinearSyncFence"],[8,"CapabilitiesSource"],[8,"GlObject"],[8,"Surface"],[3,"Frame"]]};
searchIndex["glium_sdl2"] = {"doc":"An SDL2 backend for Glium - a high-level OpenGL wrapper for the Rust language.","items":[[3,"SDL2Facade","glium_sdl2","Facade implementation for an SDL2 window.",null,null],[3,"SDL2WindowBackend","","",null,null],[4,"GliumSdl2Error","","",null,null],[13,"WindowBuildError","","",0,null],[13,"ContextCreationError","","",0,null],[6,"Display","","",null,null],[8,"DisplayBuild","","An object that can build a facade object.",null,null],[16,"Facade","","The object that this `DisplayBuild` builds.",1,null],[16,"Err","","The type of error that initialization can return.",1,null],[11,"build_glium","","Build a context and a facade to draw on it.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"build_glium_debug","","Build a context and a facade to draw on it.",1,{"inputs":[{"name":"self"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"build_glium_unchecked","","Build a context and a facade to draw on it",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"build_glium_unchecked_debug","","Build a context and a facade to draw on it",1,{"inputs":[{"name":"self"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"gliumsdl2error"}}],[11,"from","","",0,{"inputs":[{"name":"windowbuilderror"}],"output":{"name":"gliumsdl2error"}}],[11,"from","","",0,{"inputs":[{"name":"incompatibleopengl"}],"output":{"name":"gliumsdl2error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sdl2facade"}}],[11,"get_context","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"window","","",2,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"window_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"draw","","Start drawing on the backbuffer.",2,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","",3,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_proc_address","","",3,null],[11,"get_framebuffer_dimensions","","",3,null],[11,"is_current","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make_current","","",3,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"GliumSdl2Error"],[8,"DisplayBuild"],[3,"SDL2Facade"],[3,"SDL2WindowBackend"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",18,null],[12,"sa_data","","",18,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",19,null],[12,"sin_port","","",19,null],[12,"sin_addr","","",19,null],[12,"sin_zero","","",19,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",20,null],[12,"sin6_port","","",20,null],[12,"sin6_flowinfo","","",20,null],[12,"sin6_addr","","",20,null],[12,"sin6_scope_id","","",20,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",21,null],[12,"sun_path","","",21,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",24,null],[12,"nl_pid","","",24,null],[12,"nl_groups","","",24,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",25,null],[12,"sll_protocol","","",25,null],[12,"sll_ifindex","","",25,null],[12,"sll_hatype","","",25,null],[12,"sll_pkttype","","",25,null],[12,"sll_halen","","",25,null],[12,"sll_addr","","",25,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",26,null],[12,"tm_min","","",26,null],[12,"tm_hour","","",26,null],[12,"tm_mday","","",26,null],[12,"tm_mon","","",26,null],[12,"tm_year","","",26,null],[12,"tm_wday","","",26,null],[12,"tm_yday","","",26,null],[12,"tm_isdst","","",26,null],[12,"tm_gmtoff","","",26,null],[12,"tm_zone","","",26,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",27,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",28,null],[12,"dli_fbase","","",28,null],[12,"dli_sname","","",28,null],[12,"dli_saddr","","",28,null],[3,"epoll_event","","",null,null],[12,"events","","",29,null],[12,"u64","","",29,null],[3,"utsname","","",null,null],[12,"sysname","","",30,null],[12,"nodename","","",30,null],[12,"release","","",30,null],[12,"version","","",30,null],[12,"machine","","",30,null],[12,"domainname","","",30,null],[3,"lconv","","",null,null],[12,"decimal_point","","",31,null],[12,"thousands_sep","","",31,null],[12,"grouping","","",31,null],[12,"int_curr_symbol","","",31,null],[12,"currency_symbol","","",31,null],[12,"mon_decimal_point","","",31,null],[12,"mon_thousands_sep","","",31,null],[12,"mon_grouping","","",31,null],[12,"positive_sign","","",31,null],[12,"negative_sign","","",31,null],[12,"int_frac_digits","","",31,null],[12,"frac_digits","","",31,null],[12,"p_cs_precedes","","",31,null],[12,"p_sep_by_space","","",31,null],[12,"n_cs_precedes","","",31,null],[12,"n_sep_by_space","","",31,null],[12,"p_sign_posn","","",31,null],[12,"n_sign_posn","","",31,null],[12,"int_p_cs_precedes","","",31,null],[12,"int_p_sep_by_space","","",31,null],[12,"int_n_cs_precedes","","",31,null],[12,"int_n_sep_by_space","","",31,null],[12,"int_p_sign_posn","","",31,null],[12,"int_n_sign_posn","","",31,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",32,null],[12,"sigev_signo","","",32,null],[12,"sigev_notify","","",32,null],[12,"sigev_notify_thread_id","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_off","","",33,null],[12,"d_reclen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"dirent64","","",null,null],[12,"d_ino","","",34,null],[12,"d_off","","",34,null],[12,"d_reclen","","",34,null],[12,"d_type","","",34,null],[12,"d_name","","",34,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",35,null],[12,"rlim_max","","",35,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",36,null],[12,"gl_pathv","","",36,null],[12,"gl_offs","","",36,null],[12,"gl_flags","","",36,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",37,null],[12,"ifa_name","","",37,null],[12,"ifa_flags","","",37,null],[12,"ifa_addr","","",37,null],[12,"ifa_netmask","","",37,null],[12,"ifa_ifu","","",37,null],[12,"ifa_data","","",37,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",38,null],[12,"pw_passwd","","",38,null],[12,"pw_uid","","",38,null],[12,"pw_gid","","",38,null],[12,"pw_gecos","","",38,null],[12,"pw_dir","","",38,null],[12,"pw_shell","","",38,null],[3,"spwd","","",null,null],[12,"sp_namp","","",39,null],[12,"sp_pwdp","","",39,null],[12,"sp_lstchg","","",39,null],[12,"sp_min","","",39,null],[12,"sp_max","","",39,null],[12,"sp_warn","","",39,null],[12,"sp_inact","","",39,null],[12,"sp_expire","","",39,null],[12,"sp_flag","","",39,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",40,null],[12,"f_frsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_favail","","",40,null],[12,"f_fsid","","",40,null],[12,"f_flag","","",40,null],[12,"f_namemax","","",40,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",41,null],[12,"dqb_bsoftlimit","","",41,null],[12,"dqb_curspace","","",41,null],[12,"dqb_ihardlimit","","",41,null],[12,"dqb_isoftlimit","","",41,null],[12,"dqb_curinodes","","",41,null],[12,"dqb_btime","","",41,null],[12,"dqb_itime","","",41,null],[12,"dqb_valid","","",41,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",42,null],[12,"ssi_errno","","",42,null],[12,"ssi_code","","",42,null],[12,"ssi_pid","","",42,null],[12,"ssi_uid","","",42,null],[12,"ssi_fd","","",42,null],[12,"ssi_tid","","",42,null],[12,"ssi_band","","",42,null],[12,"ssi_overrun","","",42,null],[12,"ssi_trapno","","",42,null],[12,"ssi_status","","",42,null],[12,"ssi_int","","",42,null],[12,"ssi_ptr","","",42,null],[12,"ssi_utime","","",42,null],[12,"ssi_stime","","",42,null],[12,"ssi_addr","","",42,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",43,null],[12,"it_value","","",43,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",44,null],[12,"mq_maxmsg","","",44,null],[12,"mq_msgsize","","",44,null],[12,"mq_curmsgs","","",44,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",45,null],[12,"if_name","","",45,null],[3,"msginfo","","",null,null],[12,"msgpool","","",46,null],[12,"msgmap","","",46,null],[12,"msgmax","","",46,null],[12,"msgmnb","","",46,null],[12,"msgmni","","",46,null],[12,"msgssz","","",46,null],[12,"msgtql","","",46,null],[12,"msgseg","","",46,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",47,null],[12,"msg_len","","",47,null],[3,"sembuf","","",null,null],[12,"sem_num","","",48,null],[12,"sem_op","","",48,null],[12,"sem_flg","","",48,null],[3,"input_event","","",null,null],[12,"time","","",49,null],[12,"type_","","",49,null],[12,"code","","",49,null],[12,"value","","",49,null],[3,"input_id","","",null,null],[12,"bustype","","",50,null],[12,"vendor","","",50,null],[12,"product","","",50,null],[12,"version","","",50,null],[3,"input_absinfo","","",null,null],[12,"value","","",51,null],[12,"minimum","","",51,null],[12,"maximum","","",51,null],[12,"fuzz","","",51,null],[12,"flat","","",51,null],[12,"resolution","","",51,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",52,null],[12,"len","","",52,null],[12,"index","","",52,null],[12,"keycode","","",52,null],[12,"scancode","","",52,null],[3,"input_mask","","",null,null],[12,"type_","","",53,null],[12,"codes_size","","",53,null],[12,"codes_ptr","","",53,null],[3,"ff_replay","","",null,null],[12,"length","","",54,null],[12,"delay","","",54,null],[3,"ff_trigger","","",null,null],[12,"button","","",55,null],[12,"interval","","",55,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",56,null],[12,"attack_level","","",56,null],[12,"fade_length","","",56,null],[12,"fade_level","","",56,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",57,null],[12,"envelope","","",57,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",58,null],[12,"end_level","","",58,null],[12,"envelope","","",58,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",59,null],[12,"left_saturation","","",59,null],[12,"right_coeff","","",59,null],[12,"left_coeff","","",59,null],[12,"deadband","","",59,null],[12,"center","","",59,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",60,null],[12,"period","","",60,null],[12,"magnitude","","",60,null],[12,"offset","","",60,null],[12,"phase","","",60,null],[12,"envelope","","",60,null],[12,"custom_len","","",60,null],[12,"custom_data","","",60,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",61,null],[12,"weak_magnitude","","",61,null],[3,"ff_effect","","",null,null],[12,"type_","","",62,null],[12,"id","","",62,null],[12,"direction","","",62,null],[12,"trigger","","",62,null],[12,"replay","","",62,null],[12,"u","","",62,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",63,null],[12,"aio_lio_opcode","","",63,null],[12,"aio_reqprio","","",63,null],[12,"aio_buf","","",63,null],[12,"aio_nbytes","","",63,null],[12,"aio_sigevent","","",63,null],[12,"aio_offset","","",63,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",64,null],[12,"e_exit","","",64,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",65,null],[12,"tv_usec","","",65,null],[3,"utmpx","","",null,null],[12,"ut_type","","",66,null],[12,"ut_pid","","",66,null],[12,"ut_line","","",66,null],[12,"ut_id","","",66,null],[12,"ut_user","","",66,null],[12,"ut_host","","",66,null],[12,"ut_exit","","",66,null],[12,"ut_session","","",66,null],[12,"ut_tv","","",66,null],[12,"ut_addr_v6","","",66,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",67,null],[12,"sa_mask","","",67,null],[12,"sa_flags","","",67,null],[12,"sa_restorer","","",67,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",68,null],[12,"ss_flags","","",68,null],[12,"ss_size","","",68,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",69,null],[12,"si_errno","","",69,null],[12,"si_code","","",69,null],[12,"_pad","","",69,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",70,null],[12,"gl_pathv","","",70,null],[12,"gl_offs","","",70,null],[12,"gl_flags","","",70,null],[3,"ucred","","",null,null],[12,"pid","","",71,null],[12,"uid","","",71,null],[12,"gid","","",71,null],[3,"statfs","","",null,null],[12,"f_type","","",72,null],[12,"f_bsize","","",72,null],[12,"f_blocks","","",72,null],[12,"f_bfree","","",72,null],[12,"f_bavail","","",72,null],[12,"f_files","","",72,null],[12,"f_ffree","","",72,null],[12,"f_fsid","","",72,null],[12,"f_namelen","","",72,null],[12,"f_frsize","","",72,null],[3,"msghdr","","",null,null],[12,"msg_name","","",73,null],[12,"msg_namelen","","",73,null],[12,"msg_iov","","",73,null],[12,"msg_iovlen","","",73,null],[12,"msg_control","","",73,null],[12,"msg_controllen","","",73,null],[12,"msg_flags","","",73,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",74,null],[12,"cmsg_level","","",74,null],[12,"cmsg_type","","",74,null],[3,"termios","","",null,null],[12,"c_iflag","","",75,null],[12,"c_oflag","","",75,null],[12,"c_cflag","","",75,null],[12,"c_lflag","","",75,null],[12,"c_line","","",75,null],[12,"c_cc","","",75,null],[12,"c_ispeed","","",75,null],[12,"c_ospeed","","",75,null],[3,"flock","","",null,null],[12,"l_type","","",76,null],[12,"l_whence","","",76,null],[12,"l_start","","",76,null],[12,"l_len","","",76,null],[12,"l_pid","","",76,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",77,null],[12,"loads","","",77,null],[12,"totalram","","",77,null],[12,"freeram","","",77,null],[12,"sharedram","","",77,null],[12,"bufferram","","",77,null],[12,"totalswap","","",77,null],[12,"freeswap","","",77,null],[12,"procs","","",77,null],[12,"pad","","",77,null],[12,"totalhigh","","",77,null],[12,"freehigh","","",77,null],[12,"mem_unit","","",77,null],[12,"_f","","",77,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",78,null],[12,"msg_stime","","",78,null],[12,"msg_rtime","","",78,null],[12,"msg_ctime","","",78,null],[12,"msg_qnum","","",78,null],[12,"msg_qbytes","","",78,null],[12,"msg_lspid","","",78,null],[12,"msg_lrpid","","",78,null],[3,"stat","","",null,null],[12,"st_dev","","",79,null],[12,"st_ino","","",79,null],[12,"st_nlink","","",79,null],[12,"st_mode","","",79,null],[12,"st_uid","","",79,null],[12,"st_gid","","",79,null],[12,"st_rdev","","",79,null],[12,"st_size","","",79,null],[12,"st_blksize","","",79,null],[12,"st_blocks","","",79,null],[12,"st_atime","","",79,null],[12,"st_atime_nsec","","",79,null],[12,"st_mtime","","",79,null],[12,"st_mtime_nsec","","",79,null],[12,"st_ctime","","",79,null],[12,"st_ctime_nsec","","",79,null],[3,"stat64","","",null,null],[12,"st_dev","","",80,null],[12,"st_ino","","",80,null],[12,"st_nlink","","",80,null],[12,"st_mode","","",80,null],[12,"st_uid","","",80,null],[12,"st_gid","","",80,null],[12,"st_rdev","","",80,null],[12,"st_size","","",80,null],[12,"st_blksize","","",80,null],[12,"st_blocks","","",80,null],[12,"st_atime","","",80,null],[12,"st_atime_nsec","","",80,null],[12,"st_mtime","","",80,null],[12,"st_mtime_nsec","","",80,null],[12,"st_ctime","","",80,null],[12,"st_ctime_nsec","","",80,null],[3,"statfs64","","",null,null],[12,"f_type","","",81,null],[12,"f_bsize","","",81,null],[12,"f_blocks","","",81,null],[12,"f_bfree","","",81,null],[12,"f_bavail","","",81,null],[12,"f_files","","",81,null],[12,"f_ffree","","",81,null],[12,"f_fsid","","",81,null],[12,"f_namelen","","",81,null],[12,"f_frsize","","",81,null],[12,"f_flags","","",81,null],[12,"f_spare","","",81,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",82,null],[12,"f_frsize","","",82,null],[12,"f_blocks","","",82,null],[12,"f_bfree","","",82,null],[12,"f_bavail","","",82,null],[12,"f_files","","",82,null],[12,"f_ffree","","",82,null],[12,"f_favail","","",82,null],[12,"f_fsid","","",82,null],[12,"f_flag","","",82,null],[12,"f_namemax","","",82,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",83,null],[12,"exponent","","",83,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",84,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",85,null],[12,"swd","","",85,null],[12,"ftw","","",85,null],[12,"fop","","",85,null],[12,"rip","","",85,null],[12,"rdp","","",85,null],[12,"mxcsr","","",85,null],[12,"mxcr_mask","","",85,null],[12,"_st","","",85,null],[12,"_xmm","","",85,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",86,null],[12,"swd","","",86,null],[12,"ftw","","",86,null],[12,"fop","","",86,null],[12,"rip","","",86,null],[12,"rdp","","",86,null],[12,"mxcsr","","",86,null],[12,"mxcr_mask","","",86,null],[12,"st_space","","",86,null],[12,"xmm_space","","",86,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",87,null],[12,"r14","","",87,null],[12,"r13","","",87,null],[12,"r12","","",87,null],[12,"rbp","","",87,null],[12,"rbx","","",87,null],[12,"r11","","",87,null],[12,"r10","","",87,null],[12,"r9","","",87,null],[12,"r8","","",87,null],[12,"rax","","",87,null],[12,"rcx","","",87,null],[12,"rdx","","",87,null],[12,"rsi","","",87,null],[12,"rdi","","",87,null],[12,"orig_rax","","",87,null],[12,"rip","","",87,null],[12,"cs","","",87,null],[12,"eflags","","",87,null],[12,"rsp","","",87,null],[12,"ss","","",87,null],[12,"fs_base","","",87,null],[12,"gs_base","","",87,null],[12,"ds","","",87,null],[12,"es","","",87,null],[12,"fs","","",87,null],[12,"gs","","",87,null],[3,"user","","",null,null],[12,"regs","","",88,null],[12,"u_fpvalid","","",88,null],[12,"i387","","",88,null],[12,"u_tsize","","",88,null],[12,"u_dsize","","",88,null],[12,"u_ssize","","",88,null],[12,"start_code","","",88,null],[12,"start_stack","","",88,null],[12,"signal","","",88,null],[12,"u_ar0","","",88,null],[12,"u_fpstate","","",88,null],[12,"magic","","",88,null],[12,"u_comm","","",88,null],[12,"u_debugreg","","",88,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",89,null],[12,"fpregs","","",89,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",90,null],[12,"uc_link","","",90,null],[12,"uc_stack","","",90,null],[12,"uc_mcontext","","",90,null],[12,"uc_sigmask","","",90,null],[3,"ipc_perm","","",null,null],[12,"__key","","",91,null],[12,"uid","","",91,null],[12,"gid","","",91,null],[12,"cuid","","",91,null],[12,"cgid","","",91,null],[12,"mode","","",91,null],[12,"__seq","","",91,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",92,null],[12,"shm_segsz","","",92,null],[12,"shm_atime","","",92,null],[12,"shm_dtime","","",92,null],[12,"shm_ctime","","",92,null],[12,"shm_cpid","","",92,null],[12,"shm_lpid","","",92,null],[12,"shm_nattch","","",92,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["sdl2"] = {"doc":"","items":[[3,"Sdl","sdl2","The SDL context type. Initialize with `sdl2::init()`.",null,null],[3,"AudioSubsystem","","",null,null],[3,"GameControllerSubsystem","","",null,null],[3,"HapticSubsystem","","",null,null],[3,"JoystickSubsystem","","",null,null],[3,"VideoSubsystem","","",null,null],[3,"TimerSubsystem","","",null,null],[3,"EventSubsystem","","",null,null],[3,"EventPump","","A thread-safe type that encapsulates SDL event-pumping functions.",null,null],[4,"Error","","",null,null],[13,"NoMemError","","",0,null],[13,"ReadError","","",0,null],[13,"WriteError","","",0,null],[13,"SeekError","","",0,null],[13,"UnsupportedError","","",0,null],[4,"IntegerOrSdlError","","A given integer was so big that its representation as a C integer would be negative.",null,null],[13,"IntegerOverflows","","",1,null],[13,"SdlError","","",1,null],[5,"init","","Initializes the SDL library. This must be called before using any other SDL function.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_error","","",null,{"inputs":[],"output":{"name":"string"}}],[5,"set_error","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"set_error_from_code","","",null,{"inputs":[{"name":"error"}],"output":null}],[5,"clear_error","","",null,{"inputs":[],"output":null}],[0,"clipboard","","",null,null],[3,"ClipboardUtil","sdl2::clipboard","Clipboard utility functions. Access with `VideoSubsystem::clipboard()`.",null,null],[11,"clipboard","sdl2","",2,{"inputs":[{"name":"self"}],"output":{"name":"clipboardutil"}}],[11,"set_clipboard_text","sdl2::clipboard","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clipboard_text","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_clipboard_text","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"cpuinfo","sdl2","",null,null],[5,"cpu_count","sdl2::cpuinfo","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"cpu_cache_line_size","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"has_rdtsc","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_alti_vec","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_mmx","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_3d_now","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse2","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse3","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse41","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse42","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_avx","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"system_ram","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"CACHELINESIZE","","",null,null],[0,"macros","sdl2","",null,null],[0,"event","","Event Handling",null,null],[3,"EventPollIterator","sdl2::event","An iterator that calls `EventPump::poll_event()`.",null,null],[3,"EventWaitIterator","","An iterator that calls `EventPump::wait_event()`.",null,null],[3,"EventWaitTimeoutIterator","","An iterator that calls `EventPump::wait_event_timeout()`.",null,null],[4,"EventType","","Types of events that can be delivered.",null,null],[13,"First","","",4,null],[13,"Quit","","",4,null],[13,"AppTerminating","","",4,null],[13,"AppLowMemory","","",4,null],[13,"AppWillEnterBackground","","",4,null],[13,"AppDidEnterBackground","","",4,null],[13,"AppWillEnterForeground","","",4,null],[13,"AppDidEnterForeground","","",4,null],[13,"Window","","",4,null],[13,"KeyDown","","",4,null],[13,"KeyUp","","",4,null],[13,"TextEditing","","",4,null],[13,"TextInput","","",4,null],[13,"MouseMotion","","",4,null],[13,"MouseButtonDown","","",4,null],[13,"MouseButtonUp","","",4,null],[13,"MouseWheel","","",4,null],[13,"JoyAxisMotion","","",4,null],[13,"JoyBallMotion","","",4,null],[13,"JoyHatMotion","","",4,null],[13,"JoyButtonDown","","",4,null],[13,"JoyButtonUp","","",4,null],[13,"JoyDeviceAdded","","",4,null],[13,"JoyDeviceRemoved","","",4,null],[13,"ControllerAxisMotion","","",4,null],[13,"ControllerButtonDown","","",4,null],[13,"ControllerButtonUp","","",4,null],[13,"ControllerDeviceAdded","","",4,null],[13,"ControllerDeviceRemoved","","",4,null],[13,"ControllerDeviceRemapped","","",4,null],[13,"FingerDown","","",4,null],[13,"FingerUp","","",4,null],[13,"FingerMotion","","",4,null],[13,"DollarGesture","","",4,null],[13,"DollarRecord","","",4,null],[13,"MultiGesture","","",4,null],[13,"ClipboardUpdate","","",4,null],[13,"DropFile","","",4,null],[13,"User","","",4,null],[13,"Last","","",4,null],[4,"WindowEvent","","An enum of window events.",null,null],[13,"None","","",5,null],[13,"Shown","","",5,null],[13,"Hidden","","",5,null],[13,"Exposed","","",5,null],[13,"Moved","","",5,null],[13,"Resized","","",5,null],[13,"SizeChanged","","",5,null],[13,"Minimized","","",5,null],[13,"Maximized","","",5,null],[13,"Restored","","",5,null],[13,"Enter","","",5,null],[13,"Leave","","",5,null],[13,"FocusGained","","",5,null],[13,"FocusLost","","",5,null],[13,"Close","","",5,null],[13,"TakeFocus","","",5,null],[13,"HitTest","","",5,null],[4,"Event","","Different event types.",null,null],[13,"Quit","","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppTerminating","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppLowMemory","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppWillEnterBackground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppDidEnterBackground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppWillEnterForeground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppDidEnterForeground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"Window","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"win_event","","",6,null],[13,"KeyDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"keycode","","",6,null],[12,"scancode","","",6,null],[12,"keymod","","",6,null],[12,"repeat","","",6,null],[13,"KeyUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"keycode","","",6,null],[12,"scancode","","",6,null],[12,"keymod","","",6,null],[12,"repeat","","",6,null],[13,"TextEditing","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"text","","",6,null],[12,"start","","",6,null],[12,"length","","",6,null],[13,"TextInput","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"text","","",6,null],[13,"MouseMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"mousestate","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"xrel","","",6,null],[12,"yrel","","",6,null],[13,"MouseButtonDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"mouse_btn","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"MouseButtonUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"mouse_btn","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"MouseWheel","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"direction","","",6,null],[13,"JoyAxisMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"axis_idx","","",6,null],[12,"value","","",6,null],[13,"JoyBallMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"ball_idx","","",6,null],[12,"xrel","","",6,null],[12,"yrel","","",6,null],[13,"JoyHatMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"hat_idx","","",6,null],[12,"state","","",6,null],[13,"JoyButtonDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button_idx","","",6,null],[13,"JoyButtonUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button_idx","","",6,null],[13,"JoyDeviceAdded","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"JoyDeviceRemoved","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"ControllerAxisMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"axis","","",6,null],[12,"value","","",6,null],[13,"ControllerButtonDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button","","",6,null],[13,"ControllerButtonUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button","","",6,null],[13,"ControllerDeviceAdded","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"ControllerDeviceRemoved","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"ControllerDeviceRemapped","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"FingerDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"finger_id","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"dx","","",6,null],[12,"dy","","",6,null],[12,"pressure","","",6,null],[13,"FingerUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"finger_id","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"dx","","",6,null],[12,"dy","","",6,null],[12,"pressure","","",6,null],[13,"FingerMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"finger_id","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"dx","","",6,null],[12,"dy","","",6,null],[12,"pressure","","",6,null],[13,"DollarGesture","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"gesture_id","","",6,null],[12,"num_fingers","","",6,null],[12,"error","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"DollarRecord","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"gesture_id","","",6,null],[12,"num_fingers","","",6,null],[12,"error","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"MultiGesture","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"d_theta","","",6,null],[12,"d_dist","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"num_fingers","","",6,null],[13,"ClipboardUpdate","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"DropFile","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"filename","","",6,null],[13,"User","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"type_","","",6,null],[12,"code","","",6,null],[12,"data1","","",6,null],[12,"data2","","",6,null],[13,"Unknown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"type_","","",6,null],[11,"flush_event","sdl2","Removes all events in the event queue that match the specified event type.",7,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":null}],[11,"flush_events","","Removes all events in the event queue that match the specified type range.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"peek_events","","Reads the events at the front of the event queue, until the maximum amount of events is read.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"b"}}],[11,"push_event","","Pushes an event to the event queue.",7,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"result"}}],[11,"register_event","","Register a custom SDL event.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register_events","","Registers custom SDL events.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"register_custom_event","","Register a custom event",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_custom_event","","Push a custom event",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","sdl2::event","",4,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"windowevent"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"windowevent"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_user_event","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_user_event_type","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_event_enabled","sdl2","Query if an event type is enabled.",8,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"enable_event","","Enable an event type. Returns if the event type was enabled before the call.",8,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"disable_event","","Disable an event type. Returns if the event type was enabled before the call.",8,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"poll_event","","Polls for currently pending events.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll_iter","","Returns a polling iterator that calls `poll_event()`. The iterator will terminate once there are no more pending events.",8,{"inputs":[{"name":"self"}],"output":{"name":"eventpolliterator"}}],[11,"pump_events","","Pumps the event loop, gathering events from the input devices.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"wait_event","","Waits indefinitely for the next available event.",8,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"wait_event_timeout","","Waits until the specified timeout (in milliseconds) for the next available event.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"wait_iter","","Returns a waiting iterator that calls `wait_event()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"eventwaititerator"}}],[11,"wait_timeout_iter","","Returns a waiting iterator that calls `wait_event_timeout()`.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"eventwaittimeoutiterator"}}],[11,"keyboard_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"keyboardstate"}}],[11,"mouse_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"mousestate"}}],[11,"relative_mouse_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"relativemousestate"}}],[11,"next","sdl2::event","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"filesystem","sdl2","",null,null],[4,"PrefPathError","sdl2::filesystem","",null,null],[13,"InvalidOrganizationName","","",12,null],[13,"InvalidApplicationName","","",12,null],[13,"SdlError","","",12,null],[5,"base_path","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pref_path","","Return the preferred directory for the application to write files on this system, based on the given organization and application name.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"gesture","sdl2","",null,null],[0,"touch","","",null,null],[5,"num_touch_devices","sdl2::touch","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"touch_device","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"touchdevice"}}],[5,"num_touch_fingers","","",null,{"inputs":[{"name":"touchdevice"}],"output":{"name":"i32"}}],[5,"touch_finger","","",null,{"inputs":[{"name":"touchdevice"},{"name":"i32"}],"output":{"name":"option"}}],[6,"Finger","","",null,null],[6,"TouchDevice","","",null,null],[0,"joystick","sdl2","",null,null],[3,"Joystick","sdl2::joystick","Wrapper around the SDL_Joystick object",null,null],[3,"Guid","","Wrapper around a SDL_JoystickGUID, a globally unique identifier for a joystick.",null,null],[4,"HatState","","This is represented in SDL2 as a bitfield but obviously not all combinations make sense: 5 for instance would mean up and down at the same time... To simplify things I turn it into an enum which is how the SDL2 docs present it anyway (using macros).",null,null],[13,"Centered","","",13,null],[13,"Up","","",13,null],[13,"Right","","",13,null],[13,"Down","","",13,null],[13,"Left","","",13,null],[13,"RightUp","","",13,null],[13,"RightDown","","",13,null],[13,"LeftUp","","",13,null],[13,"Leftdown","","",13,null],[11,"num_joysticks","sdl2","Retreive the total number of attached joysticks and controllers identified by SDL.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"open","","Attempt to open the joystick at number `id` and return it.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"name_for_index","","Return the name of the joystick at index `id`",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"device_guid","","Get the GUID for the joystick number `id`",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_event_state","","If state is `true` joystick events are processed, otherwise they're ignored.",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"event_state","","Return `true` if joystick events are processed.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update","","Force joystick update when not using the event loop",14,{"inputs":[{"name":"self"}],"output":null}],[11,"subsystem","sdl2::joystick","",15,{"inputs":[{"name":"self"}],"output":{"name":"joysticksubsystem"}}],[11,"name","","Return the name of the joystick or an empty string if no name is found.",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"attached","","Return true if the joystick has been opened and currently connected.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"instance_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"guid","","Retreive the joystick's GUID",15,{"inputs":[{"name":"self"}],"output":{"name":"guid"}}],[11,"num_axes","","Retreive the number of axes for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"axis","","Gets the position of the given `axis`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"num_buttons","","Retreive the number of buttons for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"button","","Return `Ok(true)` if `button` is pressed.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"num_balls","","Retreive the number of balls for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ball","","Return a pair `(dx, dy)` containing the difference in axis position since the last poll",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"num_hats","","Retreive the number of balls for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hat","","Return the position of `hat` for this joystick",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"guid"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"guid"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"guid"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"from_string","","Create a GUID from a string representation.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_zero","","Return `true` if GUID is full 0s",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"string","","Return a String representation of GUID",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Return a copy of the internal SDL_JoystickGUID",16,{"inputs":[{"name":"self"}],"output":{"name":"sdl_joystickguid"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"hatstate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"hatstate"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","",13,{"inputs":[{"name":"u8"}],"output":{"name":"hatstate"}}],[11,"to_raw","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[0,"controller","sdl2","",null,null],[3,"GameController","sdl2::controller","Wrapper around the SDL_GameController object",null,null],[4,"AddMappingError","","",null,null],[13,"InvalidMapping","","",17,null],[13,"InvalidFilePath","","",17,null],[13,"SdlError","","",17,null],[4,"Axis","","",null,null],[13,"LeftX","","",18,null],[13,"LeftY","","",18,null],[13,"RightX","","",18,null],[13,"RightY","","",18,null],[13,"TriggerLeft","","",18,null],[13,"TriggerRight","","",18,null],[4,"Button","","",null,null],[13,"A","","",19,null],[13,"B","","",19,null],[13,"X","","",19,null],[13,"Y","","",19,null],[13,"Back","","",19,null],[13,"Guide","","",19,null],[13,"Start","","",19,null],[13,"LeftStick","","",19,null],[13,"RightStick","","",19,null],[13,"LeftShoulder","","",19,null],[13,"RightShoulder","","",19,null],[13,"DPadUp","","",19,null],[13,"DPadDown","","",19,null],[13,"DPadLeft","","",19,null],[13,"DPadRight","","",19,null],[4,"MappingStatus","","Possible return values for `add_mapping`",null,null],[13,"Added","","",20,null],[13,"Updated","","",20,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num_joysticks","sdl2","Retreive the total number of attached joysticks and controllers identified by SDL.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_game_controller","","Return true if the joystick at index `id` is a game controller.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"open","","Attempt to open the controller number `id` and return it. Controller IDs are the same as joystick IDs and the maximum number can be retreived using the `SDL_NumJoysticks` function.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"name_for_index","","Return the name of the controller at the given index.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_event_state","","If state is `true` controller events are processed, otherwise they're ignored.",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"event_state","","Return `true` if controller events are processed.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_mapping","","Add a new mapping from a mapping string",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"load_mappings","","Load mappings from a file",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"mapping_for_guid","","",21,{"inputs":[{"name":"self"},{"name":"guid"}],"output":{"name":"result"}}],[11,"update","","Force controller update when not using the event loop",21,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","sdl2::controller","",18,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","Return the Axis from a string description in the same format used by the game controller mapping strings.",18,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"string","","Return a string for a given axis in the same format using by the game controller mapping strings",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ll","","",18,{"inputs":[{"name":"sdl_gamecontrolleraxis"}],"output":{"name":"option"}}],[11,"to_ll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrolleraxis"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","Return the Button from a string description in the same format used by the game controller mapping strings.",19,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"string","","Return a string for a given button in the same format using by the game controller mapping strings",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ll","","",19,{"inputs":[{"name":"sdl_gamecontrollerbutton"}],"output":{"name":"option"}}],[11,"to_ll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbutton"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mappingstatus"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"mappingstatus"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"subsystem","","",22,{"inputs":[{"name":"self"}],"output":{"name":"gamecontrollersubsystem"}}],[11,"name","","Return the name of the controller or an empty string if no name is found.",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mapping","","Return a String describing the controller's button and axis mappings",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"attached","","Return true if the controller has been opened and currently connected.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"instance_id","","Return the joystick id of this controller",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"axis","","Get the position of the given `axis`",22,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"i16"}}],[11,"button","","Returns `true` if `button` is pressed.",22,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"drop","","",22,{"inputs":[{"name":"self"}],"output":null}],[0,"haptic","sdl2","Haptic Functions",null,null],[3,"Haptic","sdl2::haptic","Wrapper around the SDL_Haptic object",null,null],[11,"open_from_joystick_id","sdl2","Attempt to open the joystick at number `id` and return it.",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"subsystem","sdl2::haptic","",24,{"inputs":[{"name":"self"}],"output":{"name":"hapticsubsystem"}}],[11,"rumble_play","","Run a simple rumble effect on the haptic device.",24,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"u32"}],"output":null}],[11,"rumble_stop","","Stop the simple rumble on the haptic device.",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[0,"keyboard","sdl2","",null,null],[3,"Mod","sdl2::keyboard","",null,null],[3,"KeyboardState","","",null,null],[3,"ScancodeIterator","","",null,null],[3,"PressedScancodeIterator","","",null,null],[3,"KeyboardUtil","","Keyboard utility functions. Access with `Sdl::keyboard()`.",null,null],[3,"TextInputUtil","","Text input utility functions. Access with `VideoSubsystem::text_input()`.",null,null],[4,"Keycode","","",null,null],[13,"Backspace","","",25,null],[13,"Tab","","",25,null],[13,"Return","","",25,null],[13,"Escape","","",25,null],[13,"Space","","",25,null],[13,"Exclaim","","",25,null],[13,"Quotedbl","","",25,null],[13,"Hash","","",25,null],[13,"Dollar","","",25,null],[13,"Percent","","",25,null],[13,"Ampersand","","",25,null],[13,"Quote","","",25,null],[13,"LeftParen","","",25,null],[13,"RightParen","","",25,null],[13,"Asterisk","","",25,null],[13,"Plus","","",25,null],[13,"Comma","","",25,null],[13,"Minus","","",25,null],[13,"Period","","",25,null],[13,"Slash","","",25,null],[13,"Num0","","",25,null],[13,"Num1","","",25,null],[13,"Num2","","",25,null],[13,"Num3","","",25,null],[13,"Num4","","",25,null],[13,"Num5","","",25,null],[13,"Num6","","",25,null],[13,"Num7","","",25,null],[13,"Num8","","",25,null],[13,"Num9","","",25,null],[13,"Colon","","",25,null],[13,"Semicolon","","",25,null],[13,"Less","","",25,null],[13,"Equals","","",25,null],[13,"Greater","","",25,null],[13,"Question","","",25,null],[13,"At","","",25,null],[13,"LeftBracket","","",25,null],[13,"Backslash","","",25,null],[13,"RightBracket","","",25,null],[13,"Caret","","",25,null],[13,"Underscore","","",25,null],[13,"Backquote","","",25,null],[13,"A","","",25,null],[13,"B","","",25,null],[13,"C","","",25,null],[13,"D","","",25,null],[13,"E","","",25,null],[13,"F","","",25,null],[13,"G","","",25,null],[13,"H","","",25,null],[13,"I","","",25,null],[13,"J","","",25,null],[13,"K","","",25,null],[13,"L","","",25,null],[13,"M","","",25,null],[13,"N","","",25,null],[13,"O","","",25,null],[13,"P","","",25,null],[13,"Q","","",25,null],[13,"R","","",25,null],[13,"S","","",25,null],[13,"T","","",25,null],[13,"U","","",25,null],[13,"V","","",25,null],[13,"W","","",25,null],[13,"X","","",25,null],[13,"Y","","",25,null],[13,"Z","","",25,null],[13,"Delete","","",25,null],[13,"CapsLock","","",25,null],[13,"F1","","",25,null],[13,"F2","","",25,null],[13,"F3","","",25,null],[13,"F4","","",25,null],[13,"F5","","",25,null],[13,"F6","","",25,null],[13,"F7","","",25,null],[13,"F8","","",25,null],[13,"F9","","",25,null],[13,"F10","","",25,null],[13,"F11","","",25,null],[13,"F12","","",25,null],[13,"PrintScreen","","",25,null],[13,"ScrollLock","","",25,null],[13,"Pause","","",25,null],[13,"Insert","","",25,null],[13,"Home","","",25,null],[13,"PageUp","","",25,null],[13,"End","","",25,null],[13,"PageDown","","",25,null],[13,"Right","","",25,null],[13,"Left","","",25,null],[13,"Down","","",25,null],[13,"Up","","",25,null],[13,"NumLockClear","","",25,null],[13,"KpDivide","","",25,null],[13,"KpMultiply","","",25,null],[13,"KpMinus","","",25,null],[13,"KpPlus","","",25,null],[13,"KpEnter","","",25,null],[13,"Kp1","","",25,null],[13,"Kp2","","",25,null],[13,"Kp3","","",25,null],[13,"Kp4","","",25,null],[13,"Kp5","","",25,null],[13,"Kp6","","",25,null],[13,"Kp7","","",25,null],[13,"Kp8","","",25,null],[13,"Kp9","","",25,null],[13,"Kp0","","",25,null],[13,"KpPeriod","","",25,null],[13,"Application","","",25,null],[13,"Power","","",25,null],[13,"KpEquals","","",25,null],[13,"F13","","",25,null],[13,"F14","","",25,null],[13,"F15","","",25,null],[13,"F16","","",25,null],[13,"F17","","",25,null],[13,"F18","","",25,null],[13,"F19","","",25,null],[13,"F20","","",25,null],[13,"F21","","",25,null],[13,"F22","","",25,null],[13,"F23","","",25,null],[13,"F24","","",25,null],[13,"Execute","","",25,null],[13,"Help","","",25,null],[13,"Menu","","",25,null],[13,"Select","","",25,null],[13,"Stop","","",25,null],[13,"Again","","",25,null],[13,"Undo","","",25,null],[13,"Cut","","",25,null],[13,"Copy","","",25,null],[13,"Paste","","",25,null],[13,"Find","","",25,null],[13,"Mute","","",25,null],[13,"VolumeUp","","",25,null],[13,"VolumeDown","","",25,null],[13,"KpComma","","",25,null],[13,"KpEqualsAS400","","",25,null],[13,"AltErase","","",25,null],[13,"Sysreq","","",25,null],[13,"Cancel","","",25,null],[13,"Clear","","",25,null],[13,"Prior","","",25,null],[13,"Return2","","",25,null],[13,"Separator","","",25,null],[13,"Out","","",25,null],[13,"Oper","","",25,null],[13,"ClearAgain","","",25,null],[13,"CrSel","","",25,null],[13,"ExSel","","",25,null],[13,"Kp00","","",25,null],[13,"Kp000","","",25,null],[13,"ThousandsSeparator","","",25,null],[13,"DecimalSeparator","","",25,null],[13,"CurrencyUnit","","",25,null],[13,"CurrencySubUnit","","",25,null],[13,"KpLeftParen","","",25,null],[13,"KpRightParen","","",25,null],[13,"KpLeftBrace","","",25,null],[13,"KpRightBrace","","",25,null],[13,"KpTab","","",25,null],[13,"KpBackspace","","",25,null],[13,"KpA","","",25,null],[13,"KpB","","",25,null],[13,"KpC","","",25,null],[13,"KpD","","",25,null],[13,"KpE","","",25,null],[13,"KpF","","",25,null],[13,"KpXor","","",25,null],[13,"KpPower","","",25,null],[13,"KpPercent","","",25,null],[13,"KpLess","","",25,null],[13,"KpGreater","","",25,null],[13,"KpAmpersand","","",25,null],[13,"KpDblAmpersand","","",25,null],[13,"KpVerticalBar","","",25,null],[13,"KpDblVerticalBar","","",25,null],[13,"KpColon","","",25,null],[13,"KpHash","","",25,null],[13,"KpSpace","","",25,null],[13,"KpAt","","",25,null],[13,"KpExclam","","",25,null],[13,"KpMemStore","","",25,null],[13,"KpMemRecall","","",25,null],[13,"KpMemClear","","",25,null],[13,"KpMemAdd","","",25,null],[13,"KpMemSubtract","","",25,null],[13,"KpMemMultiply","","",25,null],[13,"KpMemDivide","","",25,null],[13,"KpPlusMinus","","",25,null],[13,"KpClear","","",25,null],[13,"KpClearEntry","","",25,null],[13,"KpBinary","","",25,null],[13,"KpOctal","","",25,null],[13,"KpDecimal","","",25,null],[13,"KpHexadecimal","","",25,null],[13,"LCtrl","","",25,null],[13,"LShift","","",25,null],[13,"LAlt","","",25,null],[13,"LGui","","",25,null],[13,"RCtrl","","",25,null],[13,"RShift","","",25,null],[13,"RAlt","","",25,null],[13,"RGui","","",25,null],[13,"Mode","","",25,null],[13,"AudioNext","","",25,null],[13,"AudioPrev","","",25,null],[13,"AudioStop","","",25,null],[13,"AudioPlay","","",25,null],[13,"AudioMute","","",25,null],[13,"MediaSelect","","",25,null],[13,"Www","","",25,null],[13,"Mail","","",25,null],[13,"Calculator","","",25,null],[13,"Computer","","",25,null],[13,"AcSearch","","",25,null],[13,"AcHome","","",25,null],[13,"AcBack","","",25,null],[13,"AcForward","","",25,null],[13,"AcStop","","",25,null],[13,"AcRefresh","","",25,null],[13,"AcBookmarks","","",25,null],[13,"BrightnessDown","","",25,null],[13,"BrightnessUp","","",25,null],[13,"DisplaySwitch","","",25,null],[13,"KbdIllumToggle","","",25,null],[13,"KbdIllumDown","","",25,null],[13,"KbdIllumUp","","",25,null],[13,"Eject","","",25,null],[13,"Sleep","","",25,null],[4,"Scancode","","",null,null],[13,"A","","",26,null],[13,"B","","",26,null],[13,"C","","",26,null],[13,"D","","",26,null],[13,"E","","",26,null],[13,"F","","",26,null],[13,"G","","",26,null],[13,"H","","",26,null],[13,"I","","",26,null],[13,"J","","",26,null],[13,"K","","",26,null],[13,"L","","",26,null],[13,"M","","",26,null],[13,"N","","",26,null],[13,"O","","",26,null],[13,"P","","",26,null],[13,"Q","","",26,null],[13,"R","","",26,null],[13,"S","","",26,null],[13,"T","","",26,null],[13,"U","","",26,null],[13,"V","","",26,null],[13,"W","","",26,null],[13,"X","","",26,null],[13,"Y","","",26,null],[13,"Z","","",26,null],[13,"Num1","","",26,null],[13,"Num2","","",26,null],[13,"Num3","","",26,null],[13,"Num4","","",26,null],[13,"Num5","","",26,null],[13,"Num6","","",26,null],[13,"Num7","","",26,null],[13,"Num8","","",26,null],[13,"Num9","","",26,null],[13,"Num0","","",26,null],[13,"Return","","",26,null],[13,"Escape","","",26,null],[13,"Backspace","","",26,null],[13,"Tab","","",26,null],[13,"Space","","",26,null],[13,"Minus","","",26,null],[13,"Equals","","",26,null],[13,"LeftBracket","","",26,null],[13,"RightBracket","","",26,null],[13,"Backslash","","",26,null],[13,"NonUsHash","","",26,null],[13,"Semicolon","","",26,null],[13,"Apostrophe","","",26,null],[13,"Grave","","",26,null],[13,"Comma","","",26,null],[13,"Period","","",26,null],[13,"Slash","","",26,null],[13,"CapsLock","","",26,null],[13,"F1","","",26,null],[13,"F2","","",26,null],[13,"F3","","",26,null],[13,"F4","","",26,null],[13,"F5","","",26,null],[13,"F6","","",26,null],[13,"F7","","",26,null],[13,"F8","","",26,null],[13,"F9","","",26,null],[13,"F10","","",26,null],[13,"F11","","",26,null],[13,"F12","","",26,null],[13,"PrintScreen","","",26,null],[13,"ScrollLock","","",26,null],[13,"Pause","","",26,null],[13,"Insert","","",26,null],[13,"Home","","",26,null],[13,"PageUp","","",26,null],[13,"Delete","","",26,null],[13,"End","","",26,null],[13,"PageDown","","",26,null],[13,"Right","","",26,null],[13,"Left","","",26,null],[13,"Down","","",26,null],[13,"Up","","",26,null],[13,"NumLockClear","","",26,null],[13,"KpDivide","","",26,null],[13,"KpMultiply","","",26,null],[13,"KpMinus","","",26,null],[13,"KpPlus","","",26,null],[13,"KpEnter","","",26,null],[13,"Kp1","","",26,null],[13,"Kp2","","",26,null],[13,"Kp3","","",26,null],[13,"Kp4","","",26,null],[13,"Kp5","","",26,null],[13,"Kp6","","",26,null],[13,"Kp7","","",26,null],[13,"Kp8","","",26,null],[13,"Kp9","","",26,null],[13,"Kp0","","",26,null],[13,"KpPeriod","","",26,null],[13,"NonUsBackslash","","",26,null],[13,"Application","","",26,null],[13,"Power","","",26,null],[13,"KpEquals","","",26,null],[13,"F13","","",26,null],[13,"F14","","",26,null],[13,"F15","","",26,null],[13,"F16","","",26,null],[13,"F17","","",26,null],[13,"F18","","",26,null],[13,"F19","","",26,null],[13,"F20","","",26,null],[13,"F21","","",26,null],[13,"F22","","",26,null],[13,"F23","","",26,null],[13,"F24","","",26,null],[13,"Execute","","",26,null],[13,"Help","","",26,null],[13,"Menu","","",26,null],[13,"Select","","",26,null],[13,"Stop","","",26,null],[13,"Again","","",26,null],[13,"Undo","","",26,null],[13,"Cut","","",26,null],[13,"Copy","","",26,null],[13,"Paste","","",26,null],[13,"Find","","",26,null],[13,"Mute","","",26,null],[13,"VolumeUp","","",26,null],[13,"VolumeDown","","",26,null],[13,"KpComma","","",26,null],[13,"KpEqualsAS400","","",26,null],[13,"International1","","",26,null],[13,"International2","","",26,null],[13,"International3","","",26,null],[13,"International4","","",26,null],[13,"International5","","",26,null],[13,"International6","","",26,null],[13,"International7","","",26,null],[13,"International8","","",26,null],[13,"International9","","",26,null],[13,"Lang1","","",26,null],[13,"Lang2","","",26,null],[13,"Lang3","","",26,null],[13,"Lang4","","",26,null],[13,"Lang5","","",26,null],[13,"Lang6","","",26,null],[13,"Lang7","","",26,null],[13,"Lang8","","",26,null],[13,"Lang9","","",26,null],[13,"AltErase","","",26,null],[13,"SysReq","","",26,null],[13,"Cancel","","",26,null],[13,"Clear","","",26,null],[13,"Prior","","",26,null],[13,"Return2","","",26,null],[13,"Separator","","",26,null],[13,"Out","","",26,null],[13,"Oper","","",26,null],[13,"ClearAgain","","",26,null],[13,"CrSel","","",26,null],[13,"ExSel","","",26,null],[13,"Kp00","","",26,null],[13,"Kp000","","",26,null],[13,"ThousandsSeparator","","",26,null],[13,"DecimalSeparator","","",26,null],[13,"CurrencyUnit","","",26,null],[13,"CurrencySubUnit","","",26,null],[13,"KpLeftParen","","",26,null],[13,"KpRightParen","","",26,null],[13,"KpLeftBrace","","",26,null],[13,"KpRightBrace","","",26,null],[13,"KpTab","","",26,null],[13,"KpBackspace","","",26,null],[13,"KpA","","",26,null],[13,"KpB","","",26,null],[13,"KpC","","",26,null],[13,"KpD","","",26,null],[13,"KpE","","",26,null],[13,"KpF","","",26,null],[13,"KpXor","","",26,null],[13,"KpPower","","",26,null],[13,"KpPercent","","",26,null],[13,"KpLess","","",26,null],[13,"KpGreater","","",26,null],[13,"KpAmpersand","","",26,null],[13,"KpDblAmpersand","","",26,null],[13,"KpVerticalBar","","",26,null],[13,"KpDblVerticalBar","","",26,null],[13,"KpColon","","",26,null],[13,"KpHash","","",26,null],[13,"KpSpace","","",26,null],[13,"KpAt","","",26,null],[13,"KpExclam","","",26,null],[13,"KpMemStore","","",26,null],[13,"KpMemRecall","","",26,null],[13,"KpMemClear","","",26,null],[13,"KpMemAdd","","",26,null],[13,"KpMemSubtract","","",26,null],[13,"KpMemMultiply","","",26,null],[13,"KpMemDivide","","",26,null],[13,"KpPlusMinus","","",26,null],[13,"KpClear","","",26,null],[13,"KpClearEntry","","",26,null],[13,"KpBinary","","",26,null],[13,"KpOctal","","",26,null],[13,"KpDecimal","","",26,null],[13,"KpHexadecimal","","",26,null],[13,"LCtrl","","",26,null],[13,"LShift","","",26,null],[13,"LAlt","","",26,null],[13,"LGui","","",26,null],[13,"RCtrl","","",26,null],[13,"RShift","","",26,null],[13,"RAlt","","",26,null],[13,"RGui","","",26,null],[13,"Mode","","",26,null],[13,"AudioNext","","",26,null],[13,"AudioPrev","","",26,null],[13,"AudioStop","","",26,null],[13,"AudioPlay","","",26,null],[13,"AudioMute","","",26,null],[13,"MediaSelect","","",26,null],[13,"Www","","",26,null],[13,"Mail","","",26,null],[13,"Calculator","","",26,null],[13,"Computer","","",26,null],[13,"AcSearch","","",26,null],[13,"AcHome","","",26,null],[13,"AcBack","","",26,null],[13,"AcForward","","",26,null],[13,"AcStop","","",26,null],[13,"AcRefresh","","",26,null],[13,"AcBookmarks","","",26,null],[13,"BrightnessDown","","",26,null],[13,"BrightnessUp","","",26,null],[13,"DisplaySwitch","","",26,null],[13,"KbdIllumToggle","","",26,null],[13,"KbdIllumDown","","",26,null],[13,"KbdIllumUp","","",26,null],[13,"Eject","","",26,null],[13,"Sleep","","",26,null],[13,"App1","","",26,null],[13,"App2","","",26,null],[13,"Num","","",26,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"keycode"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","",25,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_scancode","","Gets the virtual key from a scancode. Returns None if there is no corresponding virtual key.",25,{"inputs":[{"name":"scancode"}],"output":{"name":"option"}}],[11,"from_name","","",25,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"scancode"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"scancode"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","",26,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_keycode","","Gets the scancode from a virtual key. Returns None if there is no corresponding scancode.",26,{"inputs":[{"name":"keycode"}],"output":{"name":"option"}}],[11,"from_name","","",26,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"name","","",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"NOMOD","","",null,null],[17,"LSHIFTMOD","","",null,null],[17,"RSHIFTMOD","","",null,null],[17,"LCTRLMOD","","",null,null],[17,"RCTRLMOD","","",null,null],[17,"LALTMOD","","",null,null],[17,"RALTMOD","","",null,null],[17,"LGUIMOD","","",null,null],[17,"RGUIMOD","","",null,null],[17,"NUMMOD","","",null,null],[17,"CAPSMOD","","",null,null],[17,"MODEMOD","","",null,null],[17,"RESERVEDMOD","","",null,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"ordering"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"mod"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"mod"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",27,{"inputs":[{"name":"u16"}],"output":{"name":"mod"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"extend","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"mod"}}],[11,"new","","",28,{"inputs":[{"name":"eventpump"}],"output":{"name":"keyboardstate"}}],[11,"is_scancode_pressed","","Returns true if the scancode is pressed.",28,{"inputs":[{"name":"self"},{"name":"scancode"}],"output":{"name":"bool"}}],[11,"scancodes","","Returns an iterator all scancodes with a boolean indicating if the scancode is pressed.",28,{"inputs":[{"name":"self"}],"output":{"name":"scancodeiterator"}}],[11,"pressed_scancodes","","Returns an iterator of pressed scancodes.",28,{"inputs":[{"name":"self"}],"output":{"name":"pressedscancodeiterator"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"keyboard","sdl2","",31,{"inputs":[{"name":"self"}],"output":{"name":"keyboardutil"}}],[11,"text_input","","",2,{"inputs":[{"name":"self"}],"output":{"name":"textinpututil"}}],[11,"focused_window_id","sdl2::keyboard","Gets the id of the window which currently has keyboard focus.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mod_state","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"set_mod_state","","",32,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"start","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"is_active","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"set_rect","","",33,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[11,"has_screen_keyboard_support","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_screen_keyboard_shown","","",33,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"bool"}}],[0,"mouse","sdl2","",null,null],[3,"RelativeMouseState","sdl2::mouse","",null,null],[3,"Cursor","","",null,null],[3,"MouseState","","",null,null],[3,"MouseButtonIterator","","",null,null],[3,"PressedMouseButtonIterator","","",null,null],[3,"MouseUtil","","Mouse utility functions. Access with `Sdl::mouse()`.",null,null],[4,"SystemCursor","","",null,null],[13,"Arrow","","",34,null],[13,"IBeam","","",34,null],[13,"Wait","","",34,null],[13,"Crosshair","","",34,null],[13,"WaitArrow","","",34,null],[13,"SizeNWSE","","",34,null],[13,"SizeNESW","","",34,null],[13,"SizeWE","","",34,null],[13,"SizeNS","","",34,null],[13,"SizeAll","","",34,null],[13,"No","","",34,null],[13,"Hand","","",34,null],[4,"MouseWheelDirection","","",null,null],[13,"Normal","","",35,null],[13,"Flipped","","",35,null],[13,"Unknown","","",35,null],[4,"MouseButton","","",null,null],[13,"Unknown","","",36,null],[13,"Left","","",36,null],[13,"Middle","","",36,null],[13,"Right","","",36,null],[13,"X1","","",36,null],[13,"X2","","",36,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"relativemousestate"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"relativemousestate"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"relativemousestate"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"new","","",37,{"inputs":[{"name":"eventpump"}],"output":{"name":"relativemousestate"}}],[11,"from_sdl_state","","",37,{"inputs":[{"name":"u32"}],"output":{"name":"relativemousestate"}}],[11,"to_sdl_state","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"left","","Returns true if the left mouse button is pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"middle","","Tests if the middle mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"right","","Tests if the right mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x1","","Tests if the X1 mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x2","","Tests if the X2 mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x","","Returns the x coordinate of the state",37,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","Returns the y coordinate of the state",37,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_mouse_button_pressed","","Returns true if the mouse button is pressed.",37,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"mouse_buttons","","Returns an iterator all mouse buttons with a boolean indicating if the scancode is pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttoniterator"}}],[11,"pressed_mouse_buttons","","Returns an iterator of pressed mouse buttons.",37,{"inputs":[{"name":"self"}],"output":{"name":"pressedmousebuttoniterator"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"systemcursor"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"systemcursor"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",38,null],[11,"from_surface","","",38,{"inputs":[{"name":"s"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"from_system","","",38,{"inputs":[{"name":"systemcursor"}],"output":{"name":"result"}}],[11,"set","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mousewheeldirection"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"mousewheeldirection"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"mousewheeldirection"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ll","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"mousewheeldirection"}}],[11,"to_ll","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ll","","",36,{"inputs":[{"name":"u8"}],"output":{"name":"mousebutton"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mousestate"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"mousestate"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"mousestate"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"new","","",39,{"inputs":[{"name":"eventpump"}],"output":{"name":"mousestate"}}],[11,"from_sdl_state","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"mousestate"}}],[11,"to_sdl_state","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"left","","Returns true if the left mouse button is pressed.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"middle","","Tests if the middle mouse button was pressed.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"right","","Tests if the right mouse button was pressed.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x1","","Tests if the X1 mouse button was pressed.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x2","","Tests if the X2 mouse button was pressed.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x","","Returns the x coordinate of the state",39,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","Returns the y coordinate of the state",39,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_mouse_button_pressed","","Returns true if the mouse button is pressed.",39,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"mouse_buttons","","Returns an iterator all mouse buttons with a boolean indicating if the scancode is pressed.",39,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttoniterator"}}],[11,"pressed_mouse_buttons","","Returns an iterator of pressed mouse buttons.",39,{"inputs":[{"name":"self"}],"output":{"name":"pressedmousebuttoniterator"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mouse","sdl2","",31,{"inputs":[{"name":"self"}],"output":{"name":"mouseutil"}}],[11,"focused_window_id","sdl2::mouse","Gets the id of the window which currently has mouse focus.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"warp_mouse_in_window","","",42,{"inputs":[{"name":"self"},{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"set_relative_mouse_mode","","",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"relative_mouse_mode","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_cursor_showing","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"show_cursor","","",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[0,"rect","sdl2","Rectangles and points.",null,null],[3,"Rect","sdl2::rect","A (non-empty) rectangle.",null,null],[3,"Point","","Immutable point type, consisting of x and y.",null,null],[5,"max_int_value","","The maximal integer value that can be used for rectangles.",null,{"inputs":[],"output":{"name":"u32"}}],[5,"min_int_value","","The minimal integer value that can be used for rectangle positions and points.",null,{"inputs":[],"output":{"name":"i32"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"new","","Creates a new rectangle from the given values.",43,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rect"}}],[11,"from_center","","Creates a new rectangle centered on the given position.",43,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rect"}}],[11,"x","","The horizontal position of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","The vertical position of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"width","","The width of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"size","","Returns the width and height of this rectangle.",43,null],[11,"set_x","","Sets the horizontal position of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_y","","Sets the vertical position of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_width","","Sets the width of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_height","","Sets the height of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"left","","Returns the x-position of the left side of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"right","","Returns the x-position of the right side of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"top","","Returns the y-position of the top side of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"bottom","","Returns the y-position of the bottom side of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"center","","Returns the center position of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_left","","Returns the top-left corner of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_right","","Returns the top-right corner of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_left","","Returns the bottom-left corner of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_right","","Returns the bottom-right corner of this rectangle.",43,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"set_right","","Sets the position of the right side of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_bottom","","Sets the position of the bottom side of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"center_on","","Centers the rectangle on the given point.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"offset","","Move this rect and clamp the positions to prevent over/underflow. This also clamps the size to prevent overflow.",43,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"reposition","","Moves this rect to the given position after clamping the values.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"resize","","Resizes this rect to the given size after clamping the values.",43,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"contains","","Checks whether this rect contains a given point, or touches it on the right and/or bottom edges.  This method is deprecated in favor of `Rect::contains_point`.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"contains_point","","Checks whether this rectangle contains a given point.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"contains_rect","","Checks whether this rectangle completely contains another rectangle.",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"raw","","Returns the underlying C Rect.",43,null],[11,"raw_mut","","",43,null],[11,"raw_slice","","",43,null],[11,"from_ll","","",43,{"inputs":[{"name":"sdl_rect"}],"output":{"name":"rect"}}],[11,"from_enclose_points","","Calculate a minimal rectangle enclosing a set of points. If a clipping rectangle is given, only points that are within it will be considered.",43,null],[11,"has_intersection","","Determines whether two rectangles intersect.",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"intersection","","Calculates the intersection of two rectangles.",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"union","","Calculates the union of two rectangles (i.e. the smallest rectangle that contains both).",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"intersect_line","","Calculates the intersection of a rectangle and a line segment and returns the points of their intersection.",43,{"inputs":[{"name":"self"},{"name":"point"},{"name":"point"}],"output":{"name":"option"}}],[11,"deref","","Example",43,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"deref_mut","","Example",43,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"into","","",43,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"into","","",43,null],[11,"from","","",43,{"inputs":[{"name":"sdl_rect"}],"output":{"name":"rect"}}],[11,"from","","",43,null],[11,"as_ref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"as_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"bitand","","",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"bitor","","",43,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"deref","","Example",44,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"deref_mut","","Example",44,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"as_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"from","","",44,{"inputs":[{"name":"sdl_point"}],"output":{"name":"point"}}],[11,"from","","",44,null],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"into","","",44,null],[11,"new","","Creates a new point from the given coordinates.",44,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"point"}}],[11,"from_ll","","",44,{"inputs":[{"name":"sdl_point"}],"output":{"name":"point"}}],[11,"raw_slice","","",44,null],[11,"raw","","",44,null],[11,"offset","","Returns a new point by shifting this point's coordinates by the given x and y values.",44,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"point"}}],[11,"scale","","Returns a new point by multiplying this point's coordinates by the given scale factor.",44,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"point"}}],[11,"x","","Returns the x-coordinate of this point.",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","Returns the y-coordinate of this point.",44,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"add","","",44,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"neg","","",44,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"sub","","",44,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"mul","","",44,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"point"}}],[11,"div","","",44,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"point"}}],[0,"surface","sdl2","",null,null],[3,"SurfaceContext","sdl2::surface","Holds a `SDL_Surface`",null,null],[3,"Surface","","Holds a `Rc<SurfaceContext>`.",null,null],[3,"SurfaceRef","","An unsized Surface reference.",null,null],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"as_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"from_ll","","",47,null],[11,"new","","Creates a new surface using a pixel format.",47,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"pixelformatenum"}],"output":{"name":"result"}}],[11,"from_pixelmasks","","Creates a new surface using pixel masks.",47,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"pixelmasks"}],"output":{"name":"result"}}],[11,"from_data","","Creates a new surface from an existing buffer, using a pixel format.",47,null],[11,"from_data_pixelmasks","","Creates a new surface from an existing buffer, using pixel masks.",47,null],[11,"load_bmp_rw","","",47,{"inputs":[{"name":"rwops"}],"output":{"name":"result"}}],[11,"load_bmp","","",47,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"into_canvas","","Creates a Software Canvas to allow rendering in the Surface itself. This `Canvas` will never be accelerated materially, so there is no performance change between `Surface` and `Canvas` coming from a `Surface`.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"context","","",47,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"from_ll","","",46,null],[11,"from_ll_mut","","",46,null],[11,"raw","","",46,null],[11,"width","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pitch","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"size","","",46,null],[11,"rect","","",46,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"pixel_format","","",46,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"pixel_format_enum","","",46,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"with_lock","","Locks a surface so that the pixels can be directly accessed safely.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_lock_mut","","Locks a surface so that the pixels can be directly accessed safely.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"without_lock","","Returns the Surface's pixel buffer if the Surface doesn't require locking (e.g. it's a software surface).",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"without_lock_mut","","Returns the Surface's pixel buffer if the Surface doesn't require locking (e.g. it's a software surface).",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"must_lock","","Returns true if the Surface needs to be locked before accessing the Surface pixels.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"save_bmp_rw","","",46,{"inputs":[{"name":"self"},{"name":"rwops"}],"output":{"name":"result"}}],[11,"save_bmp","","",46,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_palette","","",46,{"inputs":[{"name":"self"},{"name":"palette"}],"output":{"name":"result"}}],[11,"enable_RLE","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_RLE","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"set_color_key","","",46,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"color"}],"output":{"name":"result"}}],[11,"color_key","","The function will fail if the surface doesn't have color key enabled.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_color_mod","","",46,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"color_mod","","",46,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fill_rect","","",46,{"inputs":[{"name":"self"},{"name":"r"},{"name":"color"}],"output":{"name":"result"}}],[11,"fill_rects","","",46,null],[11,"set_alpha_mod","","",46,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"alpha_mod","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_blend_mode","","The function will fail if the blend mode is not supported by SDL.",46,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":{"name":"result"}}],[11,"blend_mode","","",46,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"set_clip_rect","","Sets the clip rectangle for the surface.",46,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clip_rect","","Gets the clip rectangle for the surface.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"convert","","Copies the surface into a new one that is optimized for blitting to a surface of a specified pixel format.",46,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"result"}}],[11,"blit","","Performs surface blitting (surface copying).",46,{"inputs":[{"name":"self"},{"name":"r1"},{"name":"surfaceref"},{"name":"r2"}],"output":{"name":"result"}}],[11,"lower_blit","","Performs low-level surface blitting.",46,{"inputs":[{"name":"self"},{"name":"r1"},{"name":"surfaceref"},{"name":"r2"}],"output":{"name":"result"}}],[11,"blit_scaled","","Performs scaled surface bliting (surface copying).",46,{"inputs":[{"name":"self"},{"name":"r1"},{"name":"surfaceref"},{"name":"r2"}],"output":{"name":"result"}}],[11,"lower_blit_scaled","","Performs low-level scaled surface blitting.",46,{"inputs":[{"name":"self"},{"name":"r1"},{"name":"surfaceref"},{"name":"r2"}],"output":{"name":"result"}}],[0,"pixels","sdl2","",null,null],[3,"Palette","sdl2::pixels","",null,null],[3,"Color","","",null,null],[12,"r","","",48,null],[12,"g","","",48,null],[12,"b","","",48,null],[12,"a","","",48,null],[3,"PixelMasks","","",null,null],[12,"bpp","","Bits per pixel; usually 15, 16, or 32",49,null],[12,"rmask","","The red mask",49,null],[12,"gmask","","The green mask",49,null],[12,"bmask","","The blue mask",49,null],[12,"amask","","The alpha mask",49,null],[3,"PixelFormat","","",null,null],[4,"PixelFormatEnum","","",null,null],[13,"Unknown","","",50,null],[13,"Index1LSB","","",50,null],[13,"Index1MSB","","",50,null],[13,"Index4LSB","","",50,null],[13,"Index4MSB","","",50,null],[13,"Index8","","",50,null],[13,"RGB332","","",50,null],[13,"RGB444","","",50,null],[13,"RGB555","","",50,null],[13,"BGR555","","",50,null],[13,"ARGB4444","","",50,null],[13,"RGBA4444","","",50,null],[13,"ABGR4444","","",50,null],[13,"BGRA4444","","",50,null],[13,"ARGB1555","","",50,null],[13,"RGBA5551","","",50,null],[13,"ABGR1555","","",50,null],[13,"BGRA5551","","",50,null],[13,"RGB565","","",50,null],[13,"BGR565","","",50,null],[13,"RGB24","","",50,null],[13,"BGR24","","",50,null],[13,"RGB888","","",50,null],[13,"RGBX8888","","",50,null],[13,"BGR888","","",50,null],[13,"BGRX8888","","",50,null],[13,"ARGB8888","","",50,null],[13,"RGBA8888","","",50,null],[13,"ABGR8888","","",50,null],[13,"BGRA8888","","",50,null],[13,"ARGB2101010","","",50,null],[13,"YV12","","",50,null],[13,"IYUV","","",50,null],[13,"YUY2","","",50,null],[13,"UYVY","","",50,null],[13,"YVYU","","",50,null],[11,"new","","Creates a new, uninitialized palette",51,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"with_colors","","Creates a palette from the provided colors",51,null],[11,"len","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"raw","","",51,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"RGB","","",48,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[11,"RGBA","","",48,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"color"}}],[11,"to_u32","","",48,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"u32"}}],[11,"from_u32","","",48,{"inputs":[{"name":"pixelformat"},{"name":"u32"}],"output":{"name":"color"}}],[11,"rgb","","",48,null],[11,"rgba","","",48,null],[11,"into","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sdl_color"}}],[11,"from","","",48,{"inputs":[{"name":"sdl_color"}],"output":{"name":"color"}}],[11,"rand","","",48,{"inputs":[{"name":"r"}],"output":{"name":"color"}}],[11,"raw","","",52,null],[11,"from_ll","","",52,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"pixelformatenum"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_masks","","",50,{"inputs":[{"name":"pixelmasks"}],"output":{"name":"pixelformatenum"}}],[11,"into_masks","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"byte_size_from_pitch_and_height","","Calculates the total byte size of an image buffer, given its pitch and height.",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"byte_size_of_pixels","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"byte_size_per_pixel","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"supports_alpha","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sdl_pixelformatenum"}}],[11,"from","","",50,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformatenum"}}],[11,"from_i64","","",50,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",50,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[0,"video","sdl2","",null,null],[3,"WindowSurfaceRef","sdl2::video","",null,null],[3,"DisplayMode","","",null,null],[12,"format","","",53,null],[12,"w","","",53,null],[12,"h","","",53,null],[12,"refresh_rate","","",53,null],[3,"GLContext","","",null,null],[3,"WindowContext","","Holds a `SDL_Window`",null,null],[3,"Window","","Represents the \"shell\" of a `Window`.",null,null],[3,"WindowBuilder","","The type that allows you to build windows.",null,null],[3,"DriverIterator","","",null,null],[4,"GLProfile","","",null,null],[13,"Core","","OpenGL core profile - deprecated functions are disabled",54,null],[13,"Compatibility","","OpenGL compatibility profile - deprecated functions are allowed",54,null],[13,"GLES","","OpenGL ES profile - only a subset of the base OpenGL functionality is available",54,null],[13,"Unknown","","Unknown profile - SDL will tend to return 0 if you ask when no particular profile has been defined or requested.",54,null],[4,"FullscreenType","","",null,null],[13,"Off","","",55,null],[13,"True","","",55,null],[13,"Desktop","","",55,null],[4,"WindowPos","","",null,null],[13,"Undefined","","",56,null],[13,"Centered","","",56,null],[13,"Positioned","","",56,null],[4,"WindowBuildError","","",null,null],[13,"HeightOverflows","","",57,null],[13,"WidthOverflows","","",57,null],[13,"InvalidTitle","","",57,null],[13,"SdlError","","",57,null],[5,"drivers","","Gets an iterator of all video drivers compiled into the SDL2 library.",null,{"inputs":[],"output":{"name":"driveriterator"}}],[0,"gl_attr","","OpenGL context getters and setters",null,null],[3,"GLAttr","sdl2::video::gl_attr","OpenGL context getters and setters. Obtain with `VideoSubsystem::gl_attr()`.",null,null],[3,"ContextFlagsBuilder","","The type that allows you to build a OpenGL context configuration.",null,null],[3,"ContextFlags","","",null,null],[11,"gl_attr","sdl2","Obtains access to the OpenGL window attributes.",2,{"inputs":[{"name":"self"}],"output":{"name":"glattr"}}],[11,"set_red_size","sdl2::video::gl_attr","Sets the attribute:  the minimum number of bits for the red channel of the color buffer; defaults to 3",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"red_size","","Gets the attribute:  the minimum number of bits for the red channel of the color buffer; defaults to 3",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_green_size","","Sets the attribute:  the minimum number of bits for the green channel of the color buffer; defaults to 3",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"green_size","","Gets the attribute:  the minimum number of bits for the green channel of the color buffer; defaults to 3",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_blue_size","","Sets the attribute:  the minimum number of bits for the blue channel of the color buffer; defaults to 2",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"blue_size","","Gets the attribute:  the minimum number of bits for the blue channel of the color buffer; defaults to 2",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_alpha_size","","Sets the attribute:  the minimum number of bits for the alpha channel of the color buffer; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"alpha_size","","Gets the attribute:  the minimum number of bits for the alpha channel of the color buffer; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_buffer_size","","Sets the attribute:  the minimum number of bits for frame buffer size; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"buffer_size","","Gets the attribute:  the minimum number of bits for frame buffer size; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_double_buffer","","Sets the attribute:  whether the output is single or double buffered; defaults to double buffering on",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"double_buffer","","Gets the attribute:  whether the output is single or double buffered; defaults to double buffering on",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_depth_size","","Sets the attribute:  the minimum number of bits in the depth buffer; defaults to 16",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"depth_size","","Gets the attribute:  the minimum number of bits in the depth buffer; defaults to 16",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_stencil_size","","Sets the attribute:  the minimum number of bits in the stencil buffer; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"stencil_size","","Gets the attribute:  the minimum number of bits in the stencil buffer; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_red_size","","Sets the attribute:  the minimum number of bits for the red channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_red_size","","Gets the attribute:  the minimum number of bits for the red channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_green_size","","Sets the attribute:  the minimum number of bits for the green channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_green_size","","Gets the attribute:  the minimum number of bits for the green channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_blue_size","","Sets the attribute:  the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_blue_size","","Gets the attribute:  the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_alpha_size","","Sets the attribute:  the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_alpha_size","","Gets the attribute:  the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_stereo","","Sets the attribute:  whether the output is stereo 3D; defaults to off",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"stereo","","Gets the attribute:  whether the output is stereo 3D; defaults to off",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_multisample_buffers","","Sets the attribute:  the number of buffers used for multisample anti-aliasing; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"multisample_buffers","","Gets the attribute:  the number of buffers used for multisample anti-aliasing; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_multisample_samples","","Sets the attribute:  the number of samples used around the current pixel used for multisample anti-aliasing; defaults to 0",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"multisample_samples","","Gets the attribute:  the number of samples used around the current pixel used for multisample anti-aliasing; defaults to 0",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accelerated_visual","","Sets the attribute:  whether to require hardware acceleration; false to force software rendering; defaults to allow either",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"accelerated_visual","","Gets the attribute:  whether to require hardware acceleration; false to force software rendering; defaults to allow either",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_context_major_version","","Sets the attribute:  OpenGL context major version",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"context_major_version","","Gets the attribute:  OpenGL context major version",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_context_minor_version","","Sets the attribute:  OpenGL context minor version",58,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"context_minor_version","","Gets the attribute:  OpenGL context minor version",58,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_context_profile","","Sets the attribute:  type of GL context (Core, Compatibility, ES)",58,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":null}],[11,"context_profile","","Gets the attribute:  type of GL context (Core, Compatibility, ES)",58,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"set_share_with_current_context","","Sets the attribute:  OpenGL context sharing; defaults to false",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"share_with_current_context","","Gets the attribute:  OpenGL context sharing; defaults to false",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_framebuffer_srgb_compatible","","Sets the attribute:  requests sRGB capable visual; defaults to false (>= SDL 2.0.1)",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"framebuffer_srgb_compatible","","Gets the attribute:  requests sRGB capable visual; defaults to false (>= SDL 2.0.1)",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_context_version","","Sets the OpenGL context major and minor versions.",58,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"context_version","","Gets the OpenGL context major and minor versions as a tuple.",58,null],[11,"set","","Finishes the builder and applies the GL context flags to the GL context.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"debug","","Sets the context into \"debug\" mode.",59,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"forward_compatible","","Sets the context into \"forward compatible\" mode.",59,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"robust_access","","",59,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"reset_isolation","","",59,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"has_debug","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_forward_compatible","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_robust_access","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_reset_isolation","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_context_flags","","Sets any combination of OpenGL context configuration flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"context_flags","","Gets the applied OpenGL context configuration flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"contextflags"}}],[11,"deref","sdl2::video","",61,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"update_window","","Updates the change made to the inner Surface to the Window it was created from.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"update_window_rects","","Same as `update_window`, but only update the parts included in `rects` to the Window it was created from.",61,null],[11,"finish","","Gives up this WindowSurfaceRef, allowing to use the window freely again. Before being destroyed, calls `update_window` one last time.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"displaymode"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"displaymode"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"displaymode"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[{"name":"pixelformatenum"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"displaymode"}}],[11,"from_ll","","",53,{"inputs":[{"name":"sdl_displaymode"}],"output":{"name":"displaymode"}}],[11,"to_ll","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sdl_displaymode"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"fullscreentype"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_window_flags","","",55,{"inputs":[{"name":"u32"}],"output":{"name":"fullscreentype"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"windowpos"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"windowpos"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"windowpos"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns true if the OpenGL context is the current one in the thread.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"from_ll","","Unsafe if the `*mut SDL_Window` is used after the `WindowContext` is dropped",63,null],[11,"from","","",64,{"inputs":[{"name":"windowcontext"}],"output":{"name":"window"}}],[11,"raw","","",62,{"inputs":[{"name":"self"}],"output":{"name":"sdl_glcontext"}}],[11,"window","sdl2","Initializes a new `WindowBuilder`; a convenience method that calls `WindowBuilder::new()`.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"current_video_driver","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num_video_displays","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"display_name","","Get the name of the display at the index `display_name`.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"display_bounds","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"num_display_modes","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"desktop_display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"current_display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"closest_display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"displaymode"}],"output":{"name":"result"}}],[11,"display_dpi","","Return a triplet `(ddpi, hdpi, vdpi)` containing the diagonal, horizontal and vertical dots/pixels-per-inch of a display",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_screen_saver_enabled","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_screen_saver","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_screen_saver","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"gl_load_library_default","","Loads the default OpenGL library.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_load_library","","Loads the OpenGL library using a platform-dependent OpenGL library name (usually a file path).",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"gl_unload_library","","Unloads the current OpenGL library.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"gl_get_proc_address","","Gets the pointer to the named OpenGL function.",2,null],[11,"gl_extension_supported","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gl_get_current_window_id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_release_current_context","","Releases the thread's current OpenGL context, i.e. sets the current OpenGL context to nothing.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_set_swap_interval","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"gl_get_swap_interval","","",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","sdl2::video","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `WindowBuilder`.",65,{"inputs":[{"name":"videosubsystem"},{"name":"str"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"window_flags","","Gets the underlying window flags.",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_window_flags","","Sets the underlying window flags. This will effectively undo any previous build operations, excluding window size and position.",65,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"position","","Sets the window position.",65,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"position_centered","","Centers the window.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fullscreen","","Sets the window to fullscreen.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fullscreen_desktop","","Sets the window to fullscreen at the current desktop resolution.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"opengl","","Sets the window to be usable with an OpenGL context",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"hidden","","Hides the window.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"borderless","","Removes the window decoration.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"resizable","","Sets the window to be resizable.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"minimized","","Minimizes the window.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"maximized","","Maximizes the window.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"input_grabbed","","Sets the window to have grabbed input focus.",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"allow_highdpi","","Creates the window in high-DPI mode if supported (>= SDL 2.0.1)",65,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"raw","","",64,null],[11,"from_ll","","",64,null],[11,"from_ref","","Create a new `Window` without taking ownership of the `WindowContext`",64,{"inputs":[{"name":"rc"}],"output":{"name":"window"}}],[11,"subsystem","","",64,{"inputs":[{"name":"self"}],"output":{"name":"videosubsystem"}}],[11,"into_canvas","","Initializes a new `CanvasBuilder`; a convenience method that calls `CanvasBuilder::new()`.",64,{"inputs":[{"name":"self"}],"output":{"name":"canvasbuilder"}}],[11,"context","","",64,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"id","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"gl_create_context","","",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_set_context_to_current","","Set the window's OpenGL context to the current context on the thread.",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_make_current","","",64,{"inputs":[{"name":"self"},{"name":"glcontext"}],"output":{"name":"result"}}],[11,"gl_swap_window","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"display_index","","",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_display_mode","","",64,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"display_mode","","",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"window_pixel_format","","",64,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"window_flags","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_title","","",64,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"title","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_icon","","",64,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_position","","",64,{"inputs":[{"name":"self"},{"name":"windowpos"},{"name":"windowpos"}],"output":null}],[11,"position","","",64,null],[11,"set_size","","",64,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"size","","",64,null],[11,"drawable_size","","",64,null],[11,"set_minimum_size","","",64,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"minimum_size","","",64,null],[11,"set_maximum_size","","",64,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"maximum_size","","",64,null],[11,"set_bordered","","",64,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"show","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"raise","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"maximize","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"minimize","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"restore","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"fullscreen_state","","",64,{"inputs":[{"name":"self"}],"output":{"name":"fullscreentype"}}],[11,"set_fullscreen","","",64,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"result"}}],[11,"surface","","Returns a WindowSurfaceRef, which can be used like a regular Surface. This is an alternative way to the Renderer (Canvas) way to modify pixels directly in the Window.",64,{"inputs":[{"name":"self"},{"name":"eventpump"}],"output":{"name":"result"}}],[11,"set_grab","","",64,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"grab","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_brightness","","",64,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"brightness","","",64,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_gamma_ramp","","",64,{"inputs":[{"name":"self"},{"name":"r"},{"name":"g"},{"name":"b"}],"output":{"name":"result"}}],[11,"gamma_ramp","","",64,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"driveriterator"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[0,"timer","sdl2","",null,null],[3,"Timer","sdl2::timer","",null,null],[6,"TimerCallback","","",null,null],[11,"add_timer","sdl2","Constructs a new timer using the boxed closure `callback`.",67,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"timercallback"}],"output":{"name":"timer"}}],[11,"ticks","","Gets the number of milliseconds elapsed since the timer subsystem was initialized.",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"delay","","Sleeps the current thread for the specified amount of milliseconds.",67,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"performance_counter","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"performance_frequency","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","sdl2::timer","Returns the closure as a trait-object and cancels the timer by consuming it...",68,{"inputs":[{"name":"self"}],"output":{"name":"timercallback"}}],[11,"drop","","",68,{"inputs":[{"name":"self"}],"output":null}],[0,"render","sdl2","2D accelerated rendering",null,null],[3,"SdlError","sdl2::render","Contains the description of an error returned by SDL",null,null],[3,"RendererInfo","","A structure that contains information on the capabilities of a render driver or the current render context.",null,null],[12,"name","","",69,null],[12,"flags","","",69,null],[12,"texture_formats","","",69,null],[12,"max_texture_width","","",69,null],[12,"max_texture_height","","",69,null],[3,"RendererContext","","Manages what keeps a SDL_Renderer alive",null,null],[3,"Canvas","","Manages and owns a target (`Surface` or `Window`) and allows drawing in it.",null,null],[3,"TextureCreator","","Creates Textures that cannot outlive the creator",null,null],[3,"CanvasBuilder","","The type that allows you to build Window-based renderers.",null,null],[3,"TextureQuery","","",null,null],[12,"format","","",70,null],[12,"access","","",70,null],[12,"width","","",70,null],[12,"height","","",70,null],[3,"Texture","","A texture for a rendering context.",null,null],[3,"DriverIterator","","",null,null],[4,"TargetRenderError","","Possible errors returned by targetting a `Canvas` to render to a `Texture`",null,null],[13,"SdlError","","",71,null],[13,"NotSupported","","",71,null],[4,"TextureAccess","","",null,null],[13,"Static","","",72,null],[13,"Streaming","","",72,null],[13,"Target","","",72,null],[4,"BlendMode","","",null,null],[13,"None","","",73,null],[13,"Blend","","",73,null],[13,"Add","","",73,null],[13,"Mod","","",73,null],[4,"TextureValueError","","",null,null],[13,"WidthOverflows","","",74,null],[13,"HeightOverflows","","",74,null],[13,"WidthMustBeMultipleOfTwoForFormat","","",74,null],[13,"SdlError","","",74,null],[4,"UpdateTextureError","","",null,null],[13,"PitchOverflows","","",75,null],[13,"PitchMustBeMultipleOfTwoForFormat","","",75,null],[13,"XMustBeMultipleOfTwoForFormat","","",75,null],[13,"YMustBeMultipleOfTwoForFormat","","",75,null],[13,"WidthMustBeMultipleOfTwoForFormat","","",75,null],[13,"HeightMustBeMultipleOfTwoForFormat","","",75,null],[13,"SdlError","","",75,null],[4,"UpdateTextureYUVError","","",null,null],[13,"PitchOverflows","","",76,null],[12,"plane","sdl2::render::UpdateTextureYUVError","",76,null],[12,"value","","",76,null],[13,"InvalidPlaneLength","sdl2::render","",76,null],[12,"plane","sdl2::render::UpdateTextureYUVError","",76,null],[12,"length","","",76,null],[12,"pitch","","",76,null],[12,"height","","",76,null],[13,"XMustBeMultipleOfTwoForFormat","sdl2::render","",76,null],[13,"YMustBeMultipleOfTwoForFormat","","",76,null],[13,"WidthMustBeMultipleOfTwoForFormat","","",76,null],[13,"HeightMustBeMultipleOfTwoForFormat","","",76,null],[13,"RectNotInsideTexture","","",76,null],[13,"SdlError","","",76,null],[5,"drivers","","Gets an iterator of all render drivers compiled into the SDL2 library.",null,{"inputs":[],"output":{"name":"driveriterator"}}],[6,"SurfaceCanvas","","Alias for a `Canvas` that was created out of a `Surface`",null,null],[6,"WindowCanvas","","",null,null],[8,"RenderTarget","","Represents structs which can be the target of a SDL_Renderer (or Canvas).",null,null],[16,"Context","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"textureaccess"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"textureaccess"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",72,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",72,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"rendererinfo"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"rendererinfo"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"rendererinfo"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",73,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",73,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_ll","","",69,{"inputs":[{"name":"sdl_rendererinfo"}],"output":{"name":"rendererinfo"}}],[11,"drop","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"info","","Gets information about the rendering context.",79,{"inputs":[{"name":"self"}],"output":{"name":"rendererinfo"}}],[11,"raw","","Gets the raw pointer to the SDL_Renderer",79,null],[11,"from_ll","","",79,null],[11,"deref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"renderercontext"}}],[11,"from_surface","","Creates a 2D software rendering context for a surface.",80,{"inputs":[{"name":"surface"}],"output":{"name":"result"}}],[11,"surface","","Gets a reference to the associated surface of the Canvas",80,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"surface_mut","","Gets a mutable reference to the associated surface of the Canvas",80,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"into_surface","","Gets the associated surface of the Canvas and destroys the Canvas",80,{"inputs":[{"name":"self"}],"output":{"name":"surface"}}],[11,"texture_creator","","Returns a `TextureCreator` that can create Textures to be drawn on this `Canvas`",80,{"inputs":[{"name":"self"}],"output":{"name":"texturecreator"}}],[11,"window","","Gets a reference to the associated window of the Canvas",80,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"window_mut","","Gets a mutable reference to the associated window of the Canvas",80,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"into_window","","Gets the associated window of the Canvas and destroys the Canvas",80,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"texture_creator","","Returns a `TextureCreator` that can create Textures to be drawn on this `Canvas`",80,{"inputs":[{"name":"self"}],"output":{"name":"texturecreator"}}],[11,"render_target_supported","","Determine whether a window supports the use of render targets.",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_texture_canvas","","Temporarily sets the target of `Canvas` to a `Texture`. This effectively allows rendering to a `Texture` in any way you want: you can make a `Texture` a combination of other `Texture`s, be a complex geometry form with the `gfx` module, ... You can draw pixel by pixel in it if you want, so you can do basically anything with that `Texture`.",80,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"f"}],"output":{"name":"result"}}],[11,"with_multiple_texture_canvas","","Same as `with_texture_canvas`, but allows to change multiple `Texture`s at once with the least amount of overhead. It means that between every iteration the Target is not reset to the source, and that the fact that the Canvas supports render target isn't checked every iteration either; the check is actually only done once, at the beginning, avoiding useless checks.",80,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `CanvasBuilder`.",81,{"inputs":[{"name":"window"}],"output":{"name":"canvasbuilder"}}],[11,"build","","Builds the renderer.",81,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"index","","Sets the index of the rendering driver to initialize. If you desire the first rendering driver to support the flags provided, or if you're translating code from C which passes -1 for the index, do not invoke the `index` method.",81,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"canvasbuilder"}}],[11,"software","","Set the renderer to a software fallback. This flag is accumulative, and may be specified with other flags.",81,{"inputs":[{"name":"self"}],"output":{"name":"canvasbuilder"}}],[11,"accelerated","","Set the renderer to use hardware acceleration. This flag is accumulative, and may be specified with other flags.",81,{"inputs":[{"name":"self"}],"output":{"name":"canvasbuilder"}}],[11,"present_vsync","","Synchronize renderer `present` method calls with the refresh rate. This flag is accumulative, and may be specified with other flags.",81,{"inputs":[{"name":"self"}],"output":{"name":"canvasbuilder"}}],[11,"target_texture","","Set the renderer to support rendering to a texture. This flag is accumulative, and may be specified with other flags.",81,{"inputs":[{"name":"self"}],"output":{"name":"canvasbuilder"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"raw","","",82,null],[11,"default_pixel_format","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"create_texture","","Creates a texture for a rendering context.",82,{"inputs":[{"name":"self"},{"name":"f"},{"name":"textureaccess"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_static","","Shorthand for `create_texture(format, TextureAccess::Static, width, height)`",82,{"inputs":[{"name":"self"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_streaming","","Shorthand for `create_texture(format, TextureAccess::Streaming, width, height)`",82,{"inputs":[{"name":"self"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_target","","Shorthand for `create_texture(format, TextureAccess::Target, width, height)`",82,{"inputs":[{"name":"self"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_from_surface","","Creates a texture from an existing surface. # Remarks The access hint for the created texture is `TextureAccess::Static`.",82,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"raw_create_texture","","",82,null],[11,"raw","","",80,null],[11,"set_draw_color","","Sets the color used for drawing operations (Rect, Line and Clear).",80,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"draw_color","","Gets the color used for drawing operations (Rect, Line and Clear).",80,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"set_blend_mode","","Sets the blend mode used for drawing operations (Fill and Line).",80,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":null}],[11,"blend_mode","","Gets the blend mode used for drawing operations.",80,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"clear","","Clears the current rendering target with the drawing color.",80,{"inputs":[{"name":"self"}],"output":null}],[11,"present","","Updates the screen with any rendering performed since the previous call.",80,{"inputs":[{"name":"self"}],"output":null}],[11,"output_size","","Gets the output size of a rendering context.",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_logical_size","","Sets a device independent resolution for rendering.",80,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"logical_size","","Gets device independent resolution for rendering.",80,null],[11,"set_viewport","","Sets the drawing area for rendering on the current target.",80,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"viewport","","Gets the drawing area for the current target.",80,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"set_clip_rect","","Sets the clip rectangle for rendering on the specified target.",80,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"clip_rect","","Gets the clip rectangle for the current target.",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_scale","","Sets the drawing scale for rendering on the current target.",80,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"result"}}],[11,"scale","","Gets the drawing scale for the current target.",80,null],[11,"draw_point","","Draws a point on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"draw_points","","Draws multiple points on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"draw_line","","Draws a line on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,{"inputs":[{"name":"self"},{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[11,"draw_lines","","Draws a series of connected lines on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"draw_rect","","Draws a rectangle on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"result"}}],[11,"draw_rects","","Draws some number of rectangles on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,null],[11,"fill_rect","","Fills a rectangle on the current rendering target with the drawing color. Passing None will fill the entire rendering target. Errors if drawing fails for any reason (e.g. driver failure)",80,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"fill_rects","","Fills some number of rectangles on the current rendering target with the drawing color. Errors if drawing fails for any reason (e.g. driver failure)",80,null],[11,"copy","","Copies a portion of the texture to the current rendering target.",80,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"r1"},{"name":"r2"}],"output":{"name":"result"}}],[11,"copy_ex","","Copies a portion of the texture to the current rendering target, optionally rotating it by angle around the given center and also flipping it top-bottom and/or left-right.",80,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"r1"},{"name":"r2"},{"name":"f64"},{"name":"p"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read_pixels","","Reads pixels from the current rendering target. # Remarks WARNING: This is a very slow operation, and should not be used frequently.",80,{"inputs":[{"name":"self"},{"name":"r"},{"name":"pixelformatenum"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"texturequery"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"texturequery"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"texturequery"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",76,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","Queries the attributes of the texture.",83,{"inputs":[{"name":"self"}],"output":{"name":"texturequery"}}],[11,"set_color_mod","","Sets an additional color value multiplied into render copy operations.",83,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"color_mod","","Gets the additional color value multiplied into render copy operations.",83,null],[11,"set_alpha_mod","","Sets an additional alpha value multiplied into render copy operations.",83,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"alpha_mod","","Gets the additional alpha value multiplied into render copy operations.",83,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_blend_mode","","Sets the blend mode for a texture, used by `Renderer::copy()`.",83,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":null}],[11,"blend_mode","","Gets the blend mode used for texture copy operations.",83,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"update","","Updates the given texture rectangle with new pixel data.",83,null],[11,"update_yuv","","Updates a rectangle within a planar YV12 or IYUV texture with new pixel data.",83,null],[11,"with_lock","","Locks the texture for write-only pixel access. The texture must have been created with streaming access.",83,{"inputs":[{"name":"self"},{"name":"r2"},{"name":"f"}],"output":{"name":"result"}}],[11,"gl_bind_texture","","Binds an OpenGL/ES/ES2 texture to the current context for use with when rendering OpenGL primitives directly.",83,null],[11,"gl_unbind_texture","","Unbinds an OpenGL/ES/ES2 texture from the current context.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"gl_with_bind","","Binds and unbinds an OpenGL/ES/ES2 texture from the current context.",83,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"raw","","",83,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"driveriterator"}}],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[0,"rwops","sdl2","",null,null],[3,"RWops","sdl2::rwops","A structure that provides an abstract interface to stream I/O.",null,null],[11,"raw","","",85,null],[11,"from_ll","","",85,null],[11,"from_file","","Creates an SDL file stream.",85,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_bytes","","Prepares a read-only memory buffer for use with `RWops`.",85,null],[11,"from_read","","Reads a `Read` object into a buffer and then passes it to `RWops.from_bytes`.",85,{"inputs":[{"name":"t"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_bytes_mut","","Prepares a read-write memory buffer for use with `RWops`.",85,null],[11,"len","","Gets the stream's total size in bytes.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",85,null],[11,"write","","",85,null],[11,"flush","","",85,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",85,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[0,"log","sdl2","",null,null],[4,"Category","sdl2::log","",null,null],[13,"Application","","",86,null],[13,"Error","","",86,null],[13,"Assert","","",86,null],[13,"System","","",86,null],[13,"Audio","","",86,null],[13,"Video","","",86,null],[13,"Render","","",86,null],[13,"Input","","",86,null],[13,"Test","","",86,null],[13,"Custom","","",86,null],[13,"Unknown","","",86,null],[4,"Priority","","",null,null],[13,"Verbose","","",87,null],[13,"Debug","","",87,null],[13,"Info","","",87,null],[13,"Warn","","",87,null],[13,"Error","","",87,null],[13,"Critical","","",87,null],[5,"set_output_function","","",null,null],[5,"log","","Standard log function which takes as priority INFO and as category APPLICATION",null,{"inputs":[{"name":"str"}],"output":null}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"priority"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"priority"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"clone","sdl2","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"audio","","Initializes the audio subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"event","","Initializes the event subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"joystick","","Initializes the joystick subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"haptic","","Initializes the haptic subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"game_controller","","Initializes the game controller subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"timer","","Initializes the timer subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"video","","Initializes the video subsystem.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"event_pump","","Obtains the SDL event pump.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"audiosubsystem"}}],[11,"sdl","","Obtain an SDL context.",88,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"gamecontrollersubsystem"}}],[11,"sdl","","Obtain an SDL context.",21,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"hapticsubsystem"}}],[11,"sdl","","Obtain an SDL context.",23,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"joysticksubsystem"}}],[11,"sdl","","Obtain an SDL context.",14,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"videosubsystem"}}],[11,"sdl","","Obtain an SDL context.",2,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"timersubsystem"}}],[11,"sdl","","Obtain an SDL context.",67,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"eventsubsystem"}}],[11,"sdl","","Obtain an SDL context.",7,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"audio","","Audio Functions",null,null],[3,"DriverIterator","sdl2::audio","",null,null],[3,"AudioSpecWAV","","",null,null],[12,"freq","","",89,null],[12,"format","","",89,null],[12,"channels","","",89,null],[3,"AudioSpecDesired","","",null,null],[12,"freq","","DSP frequency (samples per second). Set to None for the device's fallback frequency.",90,null],[12,"channels","","Number of separate audio channels. Set to None for the device's fallback number of channels.",90,null],[12,"samples","","Audio buffer size in samples (power of 2). Set to None for the device's fallback sample size.",90,null],[3,"AudioSpec","","",null,null],[12,"freq","","",91,null],[12,"format","","",91,null],[12,"channels","","",91,null],[12,"silence","","",91,null],[12,"samples","","",91,null],[12,"size","","",91,null],[3,"AudioQueue","","Wraps SDL_AudioDeviceID and owns the callback data used by the audio device.",null,null],[3,"AudioDevice","","Wraps SDL_AudioDeviceID and owns the callback data used by the audio device.",null,null],[3,"AudioDeviceLockGuard","","Similar to `std::sync::MutexGuard`, but for use with `AudioDevice::lock()`.",null,null],[3,"AudioCVT","","",null,null],[4,"AudioFormat","","",null,null],[13,"U8","","Unsigned 8-bit samples",92,null],[13,"S8","","Signed 8-bit samples",92,null],[13,"U16LSB","","Unsigned 16-bit samples, little-endian",92,null],[13,"U16MSB","","Unsigned 16-bit samples, big-endian",92,null],[13,"S16LSB","","Signed 16-bit samples, little-endian",92,null],[13,"S16MSB","","Signed 16-bit samples, big-endian",92,null],[13,"S32LSB","","Signed 32-bit samples, little-endian",92,null],[13,"S32MSB","","Signed 32-bit samples, big-endian",92,null],[13,"F32LSB","","32-bit floating point samples, little-endian",92,null],[13,"F32MSB","","32-bit floating point samples, big-endian",92,null],[4,"AudioStatus","","",null,null],[13,"Stopped","","",93,null],[13,"Playing","","",93,null],[13,"Paused","","",93,null],[5,"drivers","","Gets an iterator of all audio drivers compiled into the SDL2 library.",null,{"inputs":[],"output":{"name":"driveriterator"}}],[8,"AudioCallback","","",null,null],[16,"Channel","","",94,null],[10,"callback","","",94,null],[8,"AudioFormatNum","","A phantom type for retreiving the SDL_AudioFormat of a given generic type. All format types are returned as native-endian.",null,null],[10,"audio_format","","",95,{"inputs":[],"output":{"name":"audioformat"}}],[10,"zero","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"open_playback","sdl2","Opens a new audio device given the desired parameters and callback.",88,{"inputs":[{"name":"self"},{"name":"d"},{"name":"audiospecdesired"},{"name":"f"}],"output":{"name":"result"}}],[11,"open_queue","","Opens a new audio device which uses queueing rather than older callback method.",88,{"inputs":[{"name":"self"},{"name":"d"},{"name":"audiospecdesired"}],"output":{"name":"result"}}],[11,"current_audio_driver","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num_audio_playback_devices","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"audio_playback_device_name","","",88,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"clone","sdl2::audio","",92,{"inputs":[{"name":"self"}],"output":{"name":"audioformat"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"audioformat"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"u16_sys","","Unsigned 16-bit samples, native endian",92,{"inputs":[],"output":{"name":"audioformat"}}],[11,"s16_sys","","Signed 16-bit samples, native endian",92,{"inputs":[],"output":{"name":"audioformat"}}],[11,"s32_sys","","Signed 32-bit samples, native endian",92,{"inputs":[],"output":{"name":"audioformat"}}],[11,"f32_sys","","32-bit floating point samples, native endian",92,{"inputs":[],"output":{"name":"audioformat"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"audiostatus"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"audiostatus"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",93,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",93,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"driveriterator"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"load_wav","","Loads a WAVE from the file path.",89,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"load_wav_rw","","Loads a WAVE from the data source.",89,{"inputs":[{"name":"rwops"}],"output":{"name":"result"}}],[11,"buffer","","",89,null],[11,"drop","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"audiospecdesired"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"audiospec"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"audiospec"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"audiospec"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_queue","","Opens a new audio device given the desired parameters and callback.",97,{"inputs":[{"name":"audiosubsystem"},{"name":"d"},{"name":"audiospecdesired"}],"output":{"name":"result"}}],[11,"subsystem","","",97,{"inputs":[{"name":"self"}],"output":{"name":"audiosubsystem"}}],[11,"spec","","",97,{"inputs":[{"name":"self"}],"output":{"name":"audiospec"}}],[11,"status","","",97,{"inputs":[{"name":"self"}],"output":{"name":"audiostatus"}}],[11,"pause","","Pauses playback of the audio device.",97,{"inputs":[{"name":"self"}],"output":null}],[11,"resume","","Starts playback of the audio device.",97,{"inputs":[{"name":"self"}],"output":null}],[11,"queue","","Adds data to the audio queue.",97,null],[11,"size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear","","Clears all data from the current audio queue.",97,{"inputs":[{"name":"self"}],"output":null}],[11,"open_playback","","Opens a new audio device given the desired parameters and callback.",98,{"inputs":[{"name":"audiosubsystem"},{"name":"d"},{"name":"audiospecdesired"},{"name":"f"}],"output":{"name":"result"}}],[11,"subsystem","","",98,{"inputs":[{"name":"self"}],"output":{"name":"audiosubsystem"}}],[11,"spec","","",98,{"inputs":[{"name":"self"}],"output":{"name":"audiospec"}}],[11,"status","","",98,{"inputs":[{"name":"self"}],"output":{"name":"audiostatus"}}],[11,"pause","","Pauses playback of the audio device.",98,{"inputs":[{"name":"self"}],"output":null}],[11,"resume","","Starts playback of the audio device.",98,{"inputs":[{"name":"self"}],"output":null}],[11,"lock","","Locks the audio device using `SDL_LockAudioDevice`.",98,{"inputs":[{"name":"self"}],"output":{"name":"audiodevicelockguard"}}],[11,"close_and_get_callback","","Closes the audio device and saves the callback data from being dropped.",98,{"inputs":[{"name":"self"}],"output":{"name":"cb"}}],[11,"deref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"cb"}}],[11,"deref_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"cb"}}],[11,"drop","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"audiocvt"}}],[11,"new","","",100,{"inputs":[{"name":"audioformat"},{"name":"u8"},{"name":"i32"},{"name":"audioformat"},{"name":"u8"},{"name":"i32"}],"output":{"name":"result"}}],[11,"convert","","Convert audio data to a desired audio format.",100,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"is_conversion_needed","","Checks if any conversion is needed. i.e. if the buffer that goes into `convert()` is unchanged from the result.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Gets the buffer capacity that can contain both the original and converted data.",100,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"version","sdl2","Querying SDL Version",null,null],[3,"Version","sdl2::version","A structure that contains information about the version of SDL in use.",null,null],[12,"major","","major version",101,null],[12,"minor","","minor version",101,null],[12,"patch","","update version (patchlevel)",101,null],[5,"version","","Get the version of SDL that is linked against your program.",null,{"inputs":[],"output":{"name":"version"}}],[5,"revision","","Get the code revision of SDL that is linked against your program.",null,{"inputs":[],"output":{"name":"string"}}],[5,"revision_number","","Get the revision number of SDL that is linked against your program.",null,{"inputs":[],"output":{"name":"i32"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ll","","Convert a raw *SDL_version to Version.",101,{"inputs":[{"name":"sdl_version"}],"output":{"name":"version"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"messagebox","sdl2","",null,null],[3,"MessageBoxFlag","sdl2::messagebox","",null,null],[3,"MessageBoxButtonFlag","","",null,null],[3,"MessageBoxColorScheme","","",null,null],[12,"background","","",102,null],[12,"text","","",102,null],[12,"button_border","","",102,null],[12,"button_background","","",102,null],[12,"button_selected","","",102,null],[3,"ButtonData","","button_id is the integer that will be returned by show_message_box. It is not sed by SDL2, and should only be used to know which button has been triggered",null,null],[12,"flags","","",103,null],[12,"button_id","","",103,null],[12,"text","","",103,null],[4,"ClickedButton","","",null,null],[13,"CloseButton","","",104,null],[13,"CustomButton","","",104,null],[4,"ShowMessageError","","",null,null],[13,"InvalidTitle","","",105,null],[13,"InvalidMessage","","",105,null],[13,"InvalidButton","","Second argument of the tuple (i32) corresponds to the first button_id having an error",105,null],[13,"SdlError","","",105,null],[5,"show_simple_message_box","","Show a simple message box, meant to be informative only.",null,{"inputs":[{"name":"messageboxflag"},{"name":"str"},{"name":"str"},{"name":"w"}],"output":{"name":"result"}}],[5,"show_message_box","","Show a customizable message box.",null,null],[17,"MESSAGEBOX_ERROR","","",null,null],[17,"MESSAGEBOX_WARNING","","",null,null],[17,"MESSAGEBOX_INFORMATION","","",null,null],[17,"MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT","","",null,null],[17,"MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT","","",null,null],[17,"MESSAGEBOX_BUTTON_NOTHING","","",null,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"messageboxflag"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"ordering"}}],[11,"hash","","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",106,{"inputs":[],"output":{"name":"messageboxflag"}}],[11,"all","","Returns the set containing all flags.",106,{"inputs":[],"output":{"name":"messageboxflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",106,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",106,{"inputs":[{"name":"u32"}],"output":{"name":"messageboxflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"bitor_assign","","Adds the set of flags.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",106,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",106,{"inputs":[{"name":"self"}],"output":{"name":"messageboxflag"}}],[11,"extend","","",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",106,{"inputs":[{"name":"t"}],"output":{"name":"messageboxflag"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"messageboxbuttonflag"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",107,{"inputs":[],"output":{"name":"messageboxbuttonflag"}}],[11,"all","","Returns the set containing all flags.",107,{"inputs":[],"output":{"name":"messageboxbuttonflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"inputs":[{"name":"u32"}],"output":{"name":"messageboxbuttonflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"bitor_assign","","Adds the set of flags.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",107,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",107,{"inputs":[{"name":"self"}],"output":{"name":"messageboxbuttonflag"}}],[11,"extend","","",107,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",107,{"inputs":[{"name":"t"}],"output":{"name":"messageboxbuttonflag"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolorscheme"}}],[11,"from","","",102,{"inputs":[{"name":"sdl_messageboxcolorscheme"}],"output":{"name":"messageboxcolorscheme"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"hint","sdl2","",null,null],[4,"Hint","sdl2::hint","",null,null],[13,"Default","","",108,null],[13,"Normal","","",108,null],[13,"Override","","",108,null],[5,"set_video_minimize_on_focus_lost","","A hint that specifies whether a fullscreen Window will be minimized if key focus is lost.",null,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[5,"set_video_minimize_on_focus_lost_with_priority","","A hint that specifies whether a fullscreen Window will be minimized if key focus is lost.",null,{"inputs":[{"name":"bool"},{"name":"hint"}],"output":{"name":"bool"}}],[5,"get_video_minimize_on_focus_lost","","A hint that specifies whether a fullscreen Window will be minimized if key focus is lost.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"set","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"get","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"set_with_priority","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"hint"}],"output":{"name":"bool"}}],[11,"fmt","sdl2","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","sdl2::render","",81,{"inputs":[{"name":"window"}],"output":{"name":"canvasbuilder"}}]],"paths":[[4,"Error"],[4,"IntegerOrSdlError"],[3,"VideoSubsystem"],[3,"ClipboardUtil"],[4,"EventType"],[4,"WindowEvent"],[4,"Event"],[3,"EventSubsystem"],[3,"EventPump"],[3,"EventPollIterator"],[3,"EventWaitIterator"],[3,"EventWaitTimeoutIterator"],[4,"PrefPathError"],[4,"HatState"],[3,"JoystickSubsystem"],[3,"Joystick"],[3,"Guid"],[4,"AddMappingError"],[4,"Axis"],[4,"Button"],[4,"MappingStatus"],[3,"GameControllerSubsystem"],[3,"GameController"],[3,"HapticSubsystem"],[3,"Haptic"],[4,"Keycode"],[4,"Scancode"],[3,"Mod"],[3,"KeyboardState"],[3,"ScancodeIterator"],[3,"PressedScancodeIterator"],[3,"Sdl"],[3,"KeyboardUtil"],[3,"TextInputUtil"],[4,"SystemCursor"],[4,"MouseWheelDirection"],[4,"MouseButton"],[3,"RelativeMouseState"],[3,"Cursor"],[3,"MouseState"],[3,"MouseButtonIterator"],[3,"PressedMouseButtonIterator"],[3,"MouseUtil"],[3,"Rect"],[3,"Point"],[3,"SurfaceContext"],[3,"SurfaceRef"],[3,"Surface"],[3,"Color"],[3,"PixelMasks"],[4,"PixelFormatEnum"],[3,"Palette"],[3,"PixelFormat"],[3,"DisplayMode"],[4,"GLProfile"],[4,"FullscreenType"],[4,"WindowPos"],[4,"WindowBuildError"],[3,"GLAttr"],[3,"ContextFlagsBuilder"],[3,"ContextFlags"],[3,"WindowSurfaceRef"],[3,"GLContext"],[3,"WindowContext"],[3,"Window"],[3,"WindowBuilder"],[3,"DriverIterator"],[3,"TimerSubsystem"],[3,"Timer"],[3,"RendererInfo"],[3,"TextureQuery"],[4,"TargetRenderError"],[4,"TextureAccess"],[4,"BlendMode"],[4,"TextureValueError"],[4,"UpdateTextureError"],[4,"UpdateTextureYUVError"],[8,"RenderTarget"],[3,"SdlError"],[3,"RendererContext"],[3,"Canvas"],[3,"CanvasBuilder"],[3,"TextureCreator"],[3,"Texture"],[3,"DriverIterator"],[3,"RWops"],[4,"Category"],[4,"Priority"],[3,"AudioSubsystem"],[3,"AudioSpecWAV"],[3,"AudioSpecDesired"],[3,"AudioSpec"],[4,"AudioFormat"],[4,"AudioStatus"],[8,"AudioCallback"],[8,"AudioFormatNum"],[3,"DriverIterator"],[3,"AudioQueue"],[3,"AudioDevice"],[3,"AudioDeviceLockGuard"],[3,"AudioCVT"],[3,"Version"],[3,"MessageBoxColorScheme"],[3,"ButtonData"],[4,"ClickedButton"],[4,"ShowMessageError"],[3,"MessageBoxFlag"],[3,"MessageBoxButtonFlag"],[4,"Hint"]]};
searchIndex["sdl2_sys"] = {"doc":"","items":[[0,"scancode","sdl2_sys","",null,null],[6,"SDL_Scancode","sdl2_sys::scancode","",null,null],[17,"SDL_SCANCODE_UNKNOWN","","",null,null],[17,"SDL_SCANCODE_A","","",null,null],[17,"SDL_SCANCODE_B","","",null,null],[17,"SDL_SCANCODE_C","","",null,null],[17,"SDL_SCANCODE_D","","",null,null],[17,"SDL_SCANCODE_E","","",null,null],[17,"SDL_SCANCODE_F","","",null,null],[17,"SDL_SCANCODE_G","","",null,null],[17,"SDL_SCANCODE_H","","",null,null],[17,"SDL_SCANCODE_I","","",null,null],[17,"SDL_SCANCODE_J","","",null,null],[17,"SDL_SCANCODE_K","","",null,null],[17,"SDL_SCANCODE_L","","",null,null],[17,"SDL_SCANCODE_M","","",null,null],[17,"SDL_SCANCODE_N","","",null,null],[17,"SDL_SCANCODE_O","","",null,null],[17,"SDL_SCANCODE_P","","",null,null],[17,"SDL_SCANCODE_Q","","",null,null],[17,"SDL_SCANCODE_R","","",null,null],[17,"SDL_SCANCODE_S","","",null,null],[17,"SDL_SCANCODE_T","","",null,null],[17,"SDL_SCANCODE_U","","",null,null],[17,"SDL_SCANCODE_V","","",null,null],[17,"SDL_SCANCODE_W","","",null,null],[17,"SDL_SCANCODE_X","","",null,null],[17,"SDL_SCANCODE_Y","","",null,null],[17,"SDL_SCANCODE_Z","","",null,null],[17,"SDL_SCANCODE_1","","",null,null],[17,"SDL_SCANCODE_2","","",null,null],[17,"SDL_SCANCODE_3","","",null,null],[17,"SDL_SCANCODE_4","","",null,null],[17,"SDL_SCANCODE_5","","",null,null],[17,"SDL_SCANCODE_6","","",null,null],[17,"SDL_SCANCODE_7","","",null,null],[17,"SDL_SCANCODE_8","","",null,null],[17,"SDL_SCANCODE_9","","",null,null],[17,"SDL_SCANCODE_0","","",null,null],[17,"SDL_SCANCODE_RETURN","","",null,null],[17,"SDL_SCANCODE_ESCAPE","","",null,null],[17,"SDL_SCANCODE_BACKSPACE","","",null,null],[17,"SDL_SCANCODE_TAB","","",null,null],[17,"SDL_SCANCODE_SPACE","","",null,null],[17,"SDL_SCANCODE_MINUS","","",null,null],[17,"SDL_SCANCODE_EQUALS","","",null,null],[17,"SDL_SCANCODE_LEFTBRACKET","","",null,null],[17,"SDL_SCANCODE_RIGHTBRACKET","","",null,null],[17,"SDL_SCANCODE_BACKSLASH","","",null,null],[17,"SDL_SCANCODE_NONUSHASH","","",null,null],[17,"SDL_SCANCODE_SEMICOLON","","",null,null],[17,"SDL_SCANCODE_APOSTROPHE","","",null,null],[17,"SDL_SCANCODE_GRAVE","","",null,null],[17,"SDL_SCANCODE_COMMA","","",null,null],[17,"SDL_SCANCODE_PERIOD","","",null,null],[17,"SDL_SCANCODE_SLASH","","",null,null],[17,"SDL_SCANCODE_CAPSLOCK","","",null,null],[17,"SDL_SCANCODE_F1","","",null,null],[17,"SDL_SCANCODE_F2","","",null,null],[17,"SDL_SCANCODE_F3","","",null,null],[17,"SDL_SCANCODE_F4","","",null,null],[17,"SDL_SCANCODE_F5","","",null,null],[17,"SDL_SCANCODE_F6","","",null,null],[17,"SDL_SCANCODE_F7","","",null,null],[17,"SDL_SCANCODE_F8","","",null,null],[17,"SDL_SCANCODE_F9","","",null,null],[17,"SDL_SCANCODE_F10","","",null,null],[17,"SDL_SCANCODE_F11","","",null,null],[17,"SDL_SCANCODE_F12","","",null,null],[17,"SDL_SCANCODE_PRINTSCREEN","","",null,null],[17,"SDL_SCANCODE_SCROLLLOCK","","",null,null],[17,"SDL_SCANCODE_PAUSE","","",null,null],[17,"SDL_SCANCODE_INSERT","","",null,null],[17,"SDL_SCANCODE_HOME","","",null,null],[17,"SDL_SCANCODE_PAGEUP","","",null,null],[17,"SDL_SCANCODE_DELETE","","",null,null],[17,"SDL_SCANCODE_END","","",null,null],[17,"SDL_SCANCODE_PAGEDOWN","","",null,null],[17,"SDL_SCANCODE_RIGHT","","",null,null],[17,"SDL_SCANCODE_LEFT","","",null,null],[17,"SDL_SCANCODE_DOWN","","",null,null],[17,"SDL_SCANCODE_UP","","",null,null],[17,"SDL_SCANCODE_NUMLOCKCLEAR","","",null,null],[17,"SDL_SCANCODE_KP_DIVIDE","","",null,null],[17,"SDL_SCANCODE_KP_MULTIPLY","","",null,null],[17,"SDL_SCANCODE_KP_MINUS","","",null,null],[17,"SDL_SCANCODE_KP_PLUS","","",null,null],[17,"SDL_SCANCODE_KP_ENTER","","",null,null],[17,"SDL_SCANCODE_KP_1","","",null,null],[17,"SDL_SCANCODE_KP_2","","",null,null],[17,"SDL_SCANCODE_KP_3","","",null,null],[17,"SDL_SCANCODE_KP_4","","",null,null],[17,"SDL_SCANCODE_KP_5","","",null,null],[17,"SDL_SCANCODE_KP_6","","",null,null],[17,"SDL_SCANCODE_KP_7","","",null,null],[17,"SDL_SCANCODE_KP_8","","",null,null],[17,"SDL_SCANCODE_KP_9","","",null,null],[17,"SDL_SCANCODE_KP_0","","",null,null],[17,"SDL_SCANCODE_KP_PERIOD","","",null,null],[17,"SDL_SCANCODE_NONUSBACKSLASH","","",null,null],[17,"SDL_SCANCODE_APPLICATION","","",null,null],[17,"SDL_SCANCODE_POWER","","",null,null],[17,"SDL_SCANCODE_KP_EQUALS","","",null,null],[17,"SDL_SCANCODE_F13","","",null,null],[17,"SDL_SCANCODE_F14","","",null,null],[17,"SDL_SCANCODE_F15","","",null,null],[17,"SDL_SCANCODE_F16","","",null,null],[17,"SDL_SCANCODE_F17","","",null,null],[17,"SDL_SCANCODE_F18","","",null,null],[17,"SDL_SCANCODE_F19","","",null,null],[17,"SDL_SCANCODE_F20","","",null,null],[17,"SDL_SCANCODE_F21","","",null,null],[17,"SDL_SCANCODE_F22","","",null,null],[17,"SDL_SCANCODE_F23","","",null,null],[17,"SDL_SCANCODE_F24","","",null,null],[17,"SDL_SCANCODE_EXECUTE","","",null,null],[17,"SDL_SCANCODE_HELP","","",null,null],[17,"SDL_SCANCODE_MENU","","",null,null],[17,"SDL_SCANCODE_SELECT","","",null,null],[17,"SDL_SCANCODE_STOP","","",null,null],[17,"SDL_SCANCODE_AGAIN","","",null,null],[17,"SDL_SCANCODE_UNDO","","",null,null],[17,"SDL_SCANCODE_CUT","","",null,null],[17,"SDL_SCANCODE_COPY","","",null,null],[17,"SDL_SCANCODE_PASTE","","",null,null],[17,"SDL_SCANCODE_FIND","","",null,null],[17,"SDL_SCANCODE_MUTE","","",null,null],[17,"SDL_SCANCODE_VOLUMEUP","","",null,null],[17,"SDL_SCANCODE_VOLUMEDOWN","","",null,null],[17,"SDL_SCANCODE_KP_COMMA","","",null,null],[17,"SDL_SCANCODE_KP_EQUALSAS400","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL1","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL2","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL3","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL4","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL5","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL6","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL7","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL8","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL9","","",null,null],[17,"SDL_SCANCODE_LANG1","","",null,null],[17,"SDL_SCANCODE_LANG2","","",null,null],[17,"SDL_SCANCODE_LANG3","","",null,null],[17,"SDL_SCANCODE_LANG4","","",null,null],[17,"SDL_SCANCODE_LANG5","","",null,null],[17,"SDL_SCANCODE_LANG6","","",null,null],[17,"SDL_SCANCODE_LANG7","","",null,null],[17,"SDL_SCANCODE_LANG8","","",null,null],[17,"SDL_SCANCODE_LANG9","","",null,null],[17,"SDL_SCANCODE_ALTERASE","","",null,null],[17,"SDL_SCANCODE_SYSREQ","","",null,null],[17,"SDL_SCANCODE_CANCEL","","",null,null],[17,"SDL_SCANCODE_CLEAR","","",null,null],[17,"SDL_SCANCODE_PRIOR","","",null,null],[17,"SDL_SCANCODE_RETURN2","","",null,null],[17,"SDL_SCANCODE_SEPARATOR","","",null,null],[17,"SDL_SCANCODE_OUT","","",null,null],[17,"SDL_SCANCODE_OPER","","",null,null],[17,"SDL_SCANCODE_CLEARAGAIN","","",null,null],[17,"SDL_SCANCODE_CRSEL","","",null,null],[17,"SDL_SCANCODE_EXSEL","","",null,null],[17,"SDL_SCANCODE_KP_00","","",null,null],[17,"SDL_SCANCODE_KP_000","","",null,null],[17,"SDL_SCANCODE_THOUSANDSSEPARATOR","","",null,null],[17,"SDL_SCANCODE_DECIMALSEPARATOR","","",null,null],[17,"SDL_SCANCODE_CURRENCYUNIT","","",null,null],[17,"SDL_SCANCODE_CURRENCYSUBUNIT","","",null,null],[17,"SDL_SCANCODE_KP_LEFTPAREN","","",null,null],[17,"SDL_SCANCODE_KP_RIGHTPAREN","","",null,null],[17,"SDL_SCANCODE_KP_LEFTBRACE","","",null,null],[17,"SDL_SCANCODE_KP_RIGHTBRACE","","",null,null],[17,"SDL_SCANCODE_KP_TAB","","",null,null],[17,"SDL_SCANCODE_KP_BACKSPACE","","",null,null],[17,"SDL_SCANCODE_KP_A","","",null,null],[17,"SDL_SCANCODE_KP_B","","",null,null],[17,"SDL_SCANCODE_KP_C","","",null,null],[17,"SDL_SCANCODE_KP_D","","",null,null],[17,"SDL_SCANCODE_KP_E","","",null,null],[17,"SDL_SCANCODE_KP_F","","",null,null],[17,"SDL_SCANCODE_KP_XOR","","",null,null],[17,"SDL_SCANCODE_KP_POWER","","",null,null],[17,"SDL_SCANCODE_KP_PERCENT","","",null,null],[17,"SDL_SCANCODE_KP_LESS","","",null,null],[17,"SDL_SCANCODE_KP_GREATER","","",null,null],[17,"SDL_SCANCODE_KP_AMPERSAND","","",null,null],[17,"SDL_SCANCODE_KP_DBLAMPERSAND","","",null,null],[17,"SDL_SCANCODE_KP_VERTICALBAR","","",null,null],[17,"SDL_SCANCODE_KP_DBLVERTICALBAR","","",null,null],[17,"SDL_SCANCODE_KP_COLON","","",null,null],[17,"SDL_SCANCODE_KP_HASH","","",null,null],[17,"SDL_SCANCODE_KP_SPACE","","",null,null],[17,"SDL_SCANCODE_KP_AT","","",null,null],[17,"SDL_SCANCODE_KP_EXCLAM","","",null,null],[17,"SDL_SCANCODE_KP_MEMSTORE","","",null,null],[17,"SDL_SCANCODE_KP_MEMRECALL","","",null,null],[17,"SDL_SCANCODE_KP_MEMCLEAR","","",null,null],[17,"SDL_SCANCODE_KP_MEMADD","","",null,null],[17,"SDL_SCANCODE_KP_MEMSUBTRACT","","",null,null],[17,"SDL_SCANCODE_KP_MEMMULTIPLY","","",null,null],[17,"SDL_SCANCODE_KP_MEMDIVIDE","","",null,null],[17,"SDL_SCANCODE_KP_PLUSMINUS","","",null,null],[17,"SDL_SCANCODE_KP_CLEAR","","",null,null],[17,"SDL_SCANCODE_KP_CLEARENTRY","","",null,null],[17,"SDL_SCANCODE_KP_BINARY","","",null,null],[17,"SDL_SCANCODE_KP_OCTAL","","",null,null],[17,"SDL_SCANCODE_KP_DECIMAL","","",null,null],[17,"SDL_SCANCODE_KP_HEXADECIMAL","","",null,null],[17,"SDL_SCANCODE_LCTRL","","",null,null],[17,"SDL_SCANCODE_LSHIFT","","",null,null],[17,"SDL_SCANCODE_LALT","","",null,null],[17,"SDL_SCANCODE_LGUI","","",null,null],[17,"SDL_SCANCODE_RCTRL","","",null,null],[17,"SDL_SCANCODE_RSHIFT","","",null,null],[17,"SDL_SCANCODE_RALT","","",null,null],[17,"SDL_SCANCODE_RGUI","","",null,null],[17,"SDL_SCANCODE_MODE","","",null,null],[17,"SDL_SCANCODE_AUDIONEXT","","",null,null],[17,"SDL_SCANCODE_AUDIOPREV","","",null,null],[17,"SDL_SCANCODE_AUDIOSTOP","","",null,null],[17,"SDL_SCANCODE_AUDIOPLAY","","",null,null],[17,"SDL_SCANCODE_AUDIOMUTE","","",null,null],[17,"SDL_SCANCODE_MEDIASELECT","","",null,null],[17,"SDL_SCANCODE_WWW","","",null,null],[17,"SDL_SCANCODE_MAIL","","",null,null],[17,"SDL_SCANCODE_CALCULATOR","","",null,null],[17,"SDL_SCANCODE_COMPUTER","","",null,null],[17,"SDL_SCANCODE_AC_SEARCH","","",null,null],[17,"SDL_SCANCODE_AC_HOME","","",null,null],[17,"SDL_SCANCODE_AC_BACK","","",null,null],[17,"SDL_SCANCODE_AC_FORWARD","","",null,null],[17,"SDL_SCANCODE_AC_STOP","","",null,null],[17,"SDL_SCANCODE_AC_REFRESH","","",null,null],[17,"SDL_SCANCODE_AC_BOOKMARKS","","",null,null],[17,"SDL_SCANCODE_BRIGHTNESSDOWN","","",null,null],[17,"SDL_SCANCODE_BRIGHTNESSUP","","",null,null],[17,"SDL_SCANCODE_DISPLAYSWITCH","","",null,null],[17,"SDL_SCANCODE_KBDILLUMTOGGLE","","",null,null],[17,"SDL_SCANCODE_KBDILLUMDOWN","","",null,null],[17,"SDL_SCANCODE_KBDILLUMUP","","",null,null],[17,"SDL_SCANCODE_EJECT","","",null,null],[17,"SDL_SCANCODE_SLEEP","","",null,null],[17,"SDL_SCANCODE_APP1","","",null,null],[17,"SDL_SCANCODE_APP2","","",null,null],[17,"SDL_NUM_SCANCODES","","",null,null],[0,"keycode","sdl2_sys","",null,null],[6,"SDL_Keycode","sdl2_sys::keycode","",null,null],[6,"SDL_Keymod","","",null,null],[17,"SDLK_UNKNOWN","","",null,null],[17,"SDLK_BACKSPACE","","",null,null],[17,"SDLK_TAB","","",null,null],[17,"SDLK_RETURN","","",null,null],[17,"SDLK_ESCAPE","","",null,null],[17,"SDLK_SPACE","","",null,null],[17,"SDLK_EXCLAIM","","",null,null],[17,"SDLK_QUOTEDBL","","",null,null],[17,"SDLK_HASH","","",null,null],[17,"SDLK_DOLLAR","","",null,null],[17,"SDLK_PERCENT","","",null,null],[17,"SDLK_AMPERSAND","","",null,null],[17,"SDLK_QUOTE","","",null,null],[17,"SDLK_LEFTPAREN","","",null,null],[17,"SDLK_RIGHTPAREN","","",null,null],[17,"SDLK_ASTERISK","","",null,null],[17,"SDLK_PLUS","","",null,null],[17,"SDLK_COMMA","","",null,null],[17,"SDLK_MINUS","","",null,null],[17,"SDLK_PERIOD","","",null,null],[17,"SDLK_SLASH","","",null,null],[17,"SDLK_0","","",null,null],[17,"SDLK_1","","",null,null],[17,"SDLK_2","","",null,null],[17,"SDLK_3","","",null,null],[17,"SDLK_4","","",null,null],[17,"SDLK_5","","",null,null],[17,"SDLK_6","","",null,null],[17,"SDLK_7","","",null,null],[17,"SDLK_8","","",null,null],[17,"SDLK_9","","",null,null],[17,"SDLK_COLON","","",null,null],[17,"SDLK_SEMICOLON","","",null,null],[17,"SDLK_LESS","","",null,null],[17,"SDLK_EQUALS","","",null,null],[17,"SDLK_GREATER","","",null,null],[17,"SDLK_QUESTION","","",null,null],[17,"SDLK_AT","","",null,null],[17,"SDLK_LEFTBRACKET","","",null,null],[17,"SDLK_BACKSLASH","","",null,null],[17,"SDLK_RIGHTBRACKET","","",null,null],[17,"SDLK_CARET","","",null,null],[17,"SDLK_UNDERSCORE","","",null,null],[17,"SDLK_BACKQUOTE","","",null,null],[17,"SDLK_a","","",null,null],[17,"SDLK_b","","",null,null],[17,"SDLK_c","","",null,null],[17,"SDLK_d","","",null,null],[17,"SDLK_e","","",null,null],[17,"SDLK_f","","",null,null],[17,"SDLK_g","","",null,null],[17,"SDLK_h","","",null,null],[17,"SDLK_i","","",null,null],[17,"SDLK_j","","",null,null],[17,"SDLK_k","","",null,null],[17,"SDLK_l","","",null,null],[17,"SDLK_m","","",null,null],[17,"SDLK_n","","",null,null],[17,"SDLK_o","","",null,null],[17,"SDLK_p","","",null,null],[17,"SDLK_q","","",null,null],[17,"SDLK_r","","",null,null],[17,"SDLK_s","","",null,null],[17,"SDLK_t","","",null,null],[17,"SDLK_u","","",null,null],[17,"SDLK_v","","",null,null],[17,"SDLK_w","","",null,null],[17,"SDLK_x","","",null,null],[17,"SDLK_y","","",null,null],[17,"SDLK_z","","",null,null],[17,"SDLK_DELETE","","",null,null],[17,"SDLK_CAPSLOCK","","",null,null],[17,"SDLK_F1","","",null,null],[17,"SDLK_F2","","",null,null],[17,"SDLK_F3","","",null,null],[17,"SDLK_F4","","",null,null],[17,"SDLK_F5","","",null,null],[17,"SDLK_F6","","",null,null],[17,"SDLK_F7","","",null,null],[17,"SDLK_F8","","",null,null],[17,"SDLK_F9","","",null,null],[17,"SDLK_F10","","",null,null],[17,"SDLK_F11","","",null,null],[17,"SDLK_F12","","",null,null],[17,"SDLK_PRINTSCREEN","","",null,null],[17,"SDLK_SCROLLLOCK","","",null,null],[17,"SDLK_PAUSE","","",null,null],[17,"SDLK_INSERT","","",null,null],[17,"SDLK_HOME","","",null,null],[17,"SDLK_PAGEUP","","",null,null],[17,"SDLK_END","","",null,null],[17,"SDLK_PAGEDOWN","","",null,null],[17,"SDLK_RIGHT","","",null,null],[17,"SDLK_LEFT","","",null,null],[17,"SDLK_DOWN","","",null,null],[17,"SDLK_UP","","",null,null],[17,"SDLK_NUMLOCKCLEAR","","",null,null],[17,"SDLK_KPDIVIDE","","",null,null],[17,"SDLK_KPMULTIPLY","","",null,null],[17,"SDLK_KPMINUS","","",null,null],[17,"SDLK_KPPLUS","","",null,null],[17,"SDLK_KPENTER","","",null,null],[17,"SDLK_KP1","","",null,null],[17,"SDLK_KP2","","",null,null],[17,"SDLK_KP3","","",null,null],[17,"SDLK_KP4","","",null,null],[17,"SDLK_KP5","","",null,null],[17,"SDLK_KP6","","",null,null],[17,"SDLK_KP7","","",null,null],[17,"SDLK_KP8","","",null,null],[17,"SDLK_KP9","","",null,null],[17,"SDLK_KP0","","",null,null],[17,"SDLK_KPPERIOD","","",null,null],[17,"SDLK_APPLICATION","","",null,null],[17,"SDLK_POWER","","",null,null],[17,"SDLK_KPEQUALS","","",null,null],[17,"SDLK_F13","","",null,null],[17,"SDLK_F14","","",null,null],[17,"SDLK_F15","","",null,null],[17,"SDLK_F16","","",null,null],[17,"SDLK_F17","","",null,null],[17,"SDLK_F18","","",null,null],[17,"SDLK_F19","","",null,null],[17,"SDLK_F20","","",null,null],[17,"SDLK_F21","","",null,null],[17,"SDLK_F22","","",null,null],[17,"SDLK_F23","","",null,null],[17,"SDLK_F24","","",null,null],[17,"SDLK_EXECUTE","","",null,null],[17,"SDLK_HELP","","",null,null],[17,"SDLK_MENU","","",null,null],[17,"SDLK_SELECT","","",null,null],[17,"SDLK_STOP","","",null,null],[17,"SDLK_AGAIN","","",null,null],[17,"SDLK_UNDO","","",null,null],[17,"SDLK_CUT","","",null,null],[17,"SDLK_COPY","","",null,null],[17,"SDLK_PASTE","","",null,null],[17,"SDLK_FIND","","",null,null],[17,"SDLK_MUTE","","",null,null],[17,"SDLK_VOLUMEUP","","",null,null],[17,"SDLK_VOLUMEDOWN","","",null,null],[17,"SDLK_KPCOMMA","","",null,null],[17,"SDLK_KPEQUALSAS400","","",null,null],[17,"SDLK_ALTERASE","","",null,null],[17,"SDLK_SYSREQ","","",null,null],[17,"SDLK_CANCEL","","",null,null],[17,"SDLK_CLEAR","","",null,null],[17,"SDLK_PRIOR","","",null,null],[17,"SDLK_RETURN2","","",null,null],[17,"SDLK_SEPARATOR","","",null,null],[17,"SDLK_OUT","","",null,null],[17,"SDLK_OPER","","",null,null],[17,"SDLK_CLEARAGAIN","","",null,null],[17,"SDLK_CRSEL","","",null,null],[17,"SDLK_EXSEL","","",null,null],[17,"SDLK_KP00","","",null,null],[17,"SDLK_KP000","","",null,null],[17,"SDLK_THOUSANDSSEPARATOR","","",null,null],[17,"SDLK_DECIMALSEPARATOR","","",null,null],[17,"SDLK_CURRENCYUNIT","","",null,null],[17,"SDLK_CURRENCYSUBUNIT","","",null,null],[17,"SDLK_KPLEFTPAREN","","",null,null],[17,"SDLK_KPRIGHTPAREN","","",null,null],[17,"SDLK_KPLEFTBRACE","","",null,null],[17,"SDLK_KPRIGHTBRACE","","",null,null],[17,"SDLK_KPTAB","","",null,null],[17,"SDLK_KPBACKSPACE","","",null,null],[17,"SDLK_KPA","","",null,null],[17,"SDLK_KPB","","",null,null],[17,"SDLK_KPC","","",null,null],[17,"SDLK_KPD","","",null,null],[17,"SDLK_KPE","","",null,null],[17,"SDLK_KPF","","",null,null],[17,"SDLK_KPXOR","","",null,null],[17,"SDLK_KPPOWER","","",null,null],[17,"SDLK_KPPERCENT","","",null,null],[17,"SDLK_KPLESS","","",null,null],[17,"SDLK_KPGREATER","","",null,null],[17,"SDLK_KPAMPERSAND","","",null,null],[17,"SDLK_KPDBLAMPERSAND","","",null,null],[17,"SDLK_KPVERTICALBAR","","",null,null],[17,"SDLK_KPDBLVERTICALBAR","","",null,null],[17,"SDLK_KPCOLON","","",null,null],[17,"SDLK_KPHASH","","",null,null],[17,"SDLK_KPSPACE","","",null,null],[17,"SDLK_KPAT","","",null,null],[17,"SDLK_KPEXCLAM","","",null,null],[17,"SDLK_KPMEMSTORE","","",null,null],[17,"SDLK_KPMEMRECALL","","",null,null],[17,"SDLK_KPMEMCLEAR","","",null,null],[17,"SDLK_KPMEMADD","","",null,null],[17,"SDLK_KPMEMSUBTRACT","","",null,null],[17,"SDLK_KPMEMMULTIPLY","","",null,null],[17,"SDLK_KPMEMDIVIDE","","",null,null],[17,"SDLK_KPPLUSMINUS","","",null,null],[17,"SDLK_KPCLEAR","","",null,null],[17,"SDLK_KPCLEARENTRY","","",null,null],[17,"SDLK_KPBINARY","","",null,null],[17,"SDLK_KPOCTAL","","",null,null],[17,"SDLK_KPDECIMAL","","",null,null],[17,"SDLK_KPHEXADECIMAL","","",null,null],[17,"SDLK_LCTRL","","",null,null],[17,"SDLK_LSHIFT","","",null,null],[17,"SDLK_LALT","","",null,null],[17,"SDLK_LGUI","","",null,null],[17,"SDLK_RCTRL","","",null,null],[17,"SDLK_RSHIFT","","",null,null],[17,"SDLK_RALT","","",null,null],[17,"SDLK_RGUI","","",null,null],[17,"SDLK_MODE","","",null,null],[17,"SDLK_AUDIONEXT","","",null,null],[17,"SDLK_AUDIOPREV","","",null,null],[17,"SDLK_AUDIOSTOP","","",null,null],[17,"SDLK_AUDIOPLAY","","",null,null],[17,"SDLK_AUDIOMUTE","","",null,null],[17,"SDLK_MEDIASELECT","","",null,null],[17,"SDLK_WWW","","",null,null],[17,"SDLK_MAIL","","",null,null],[17,"SDLK_CALCULATOR","","",null,null],[17,"SDLK_COMPUTER","","",null,null],[17,"SDLK_ACSEARCH","","",null,null],[17,"SDLK_ACHOME","","",null,null],[17,"SDLK_ACBACK","","",null,null],[17,"SDLK_ACFORWARD","","",null,null],[17,"SDLK_ACSTOP","","",null,null],[17,"SDLK_ACREFRESH","","",null,null],[17,"SDLK_ACBOOKMARKS","","",null,null],[17,"SDLK_BRIGHTNESSDOWN","","",null,null],[17,"SDLK_BRIGHTNESSUP","","",null,null],[17,"SDLK_DISPLAYSWITCH","","",null,null],[17,"SDLK_KBDILLUMTOGGLE","","",null,null],[17,"SDLK_KBDILLUMDOWN","","",null,null],[17,"SDLK_KBDILLUMUP","","",null,null],[17,"SDLK_EJECT","","",null,null],[17,"SDLK_SLEEP","","",null,null],[17,"KMOD_NONE","","",null,null],[17,"KMOD_LSHIFT","","",null,null],[17,"KMOD_RSHIFT","","",null,null],[17,"KMOD_LCTRL","","",null,null],[17,"KMOD_RCTRL","","",null,null],[17,"KMOD_LALT","","",null,null],[17,"KMOD_RALT","","",null,null],[17,"KMOD_LGUI","","",null,null],[17,"KMOD_RGUI","","",null,null],[17,"KMOD_NUM","","",null,null],[17,"KMOD_CAPS","","",null,null],[17,"KMOD_MODE","","",null,null],[17,"KMOD_RESERVED","","",null,null],[0,"audio","sdl2_sys","",null,null],[3,"SDL_AudioSpec","sdl2_sys::audio","",null,null],[12,"freq","","",0,null],[12,"format","","",0,null],[12,"channels","","",0,null],[12,"silence","","",0,null],[12,"samples","","",0,null],[12,"padding","","",0,null],[12,"size","","",0,null],[12,"callback","","",0,null],[12,"userdata","","",0,null],[3,"SDL_AudioCVT","","",null,null],[12,"needed","","",1,null],[12,"src_format","","",1,null],[12,"dst_format","","",1,null],[12,"rate_incr","","",1,null],[12,"buf","","",1,null],[12,"len","","",1,null],[12,"len_cvt","","",1,null],[12,"len_mult","","",1,null],[12,"len_ratio","","",1,null],[5,"SDL_GetNumAudioDrivers","","",null,null],[5,"SDL_GetAudioDriver","","",null,null],[5,"SDL_AudioInit","","",null,null],[5,"SDL_AudioQuit","","",null,null],[5,"SDL_GetCurrentAudioDriver","","",null,null],[5,"SDL_OpenAudio","","",null,null],[5,"SDL_GetNumAudioDevices","","",null,null],[5,"SDL_GetAudioDeviceName","","",null,null],[5,"SDL_OpenAudioDevice","","",null,null],[5,"SDL_GetAudioStatus","","",null,null],[5,"SDL_GetAudioDeviceStatus","","",null,null],[5,"SDL_PauseAudio","","",null,null],[5,"SDL_PauseAudioDevice","","",null,null],[5,"SDL_LoadWAV_RW","","",null,null],[5,"SDL_FreeWAV","","",null,null],[5,"SDL_BuildAudioCVT","","",null,null],[5,"SDL_ConvertAudio","","",null,null],[5,"SDL_MixAudio","","",null,null],[5,"SDL_MixAudioFormat","","",null,null],[5,"SDL_QueueAudio","","",null,null],[5,"SDL_GetQueuedAudioSize","","",null,null],[5,"SDL_ClearQueuedAudio","","",null,null],[5,"SDL_LockAudio","","",null,null],[5,"SDL_LockAudioDevice","","",null,null],[5,"SDL_UnlockAudio","","",null,null],[5,"SDL_UnlockAudioDevice","","",null,null],[5,"SDL_CloseAudio","","",null,null],[5,"SDL_CloseAudioDevice","","",null,null],[6,"SDL_AudioFormat","","",null,null],[6,"SDL_AudioCallback","","",null,null],[6,"SDL_AudioFilter","","",null,null],[6,"SDL_AudioDeviceID","","",null,null],[6,"SDL_AudioStatus","","",null,null],[17,"AUDIO_U8","","",null,null],[17,"AUDIO_S8","","",null,null],[17,"AUDIO_U16LSB","","",null,null],[17,"AUDIO_S16LSB","","",null,null],[17,"AUDIO_U16MSB","","",null,null],[17,"AUDIO_S16MSB","","",null,null],[17,"AUDIO_U16","","",null,null],[17,"AUDIO_S16","","",null,null],[17,"AUDIO_S32LSB","","",null,null],[17,"AUDIO_S32MSB","","",null,null],[17,"AUDIO_S32","","",null,null],[17,"AUDIO_F32LSB","","",null,null],[17,"AUDIO_F32MSB","","",null,null],[17,"AUDIO_F32","","",null,null],[17,"AUDIO_U16SYS","","",null,null],[17,"AUDIO_S16SYS","","",null,null],[17,"AUDIO_S32SYS","","",null,null],[17,"AUDIO_F32SYS","","",null,null],[17,"SDL_AUDIO_STOPPED","","",null,null],[17,"SDL_AUDIO_PLAYING","","",null,null],[17,"SDL_AUDIO_PAUSED","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sdl_audiocvt"}}],[0,"clipboard","sdl2_sys","",null,null],[5,"SDL_SetClipboardText","sdl2_sys::clipboard","",null,null],[5,"SDL_GetClipboardText","","",null,null],[5,"SDL_HasClipboardText","","",null,null],[0,"controller","sdl2_sys","",null,null],[3,"SDL_GameControllerButtonBind","sdl2_sys::controller","",null,null],[3,"SDL_GameControllerButtonBindData","","",null,null],[3,"SDL_GameControllerButtonBindDataHat","","",null,null],[5,"SDL_GameControllerAddMapping","","",null,null],[5,"SDL_GameControllerAddMappingsFromRW","","",null,null],[5,"SDL_GameControllerMappingForGUID","","",null,null],[5,"SDL_GameControllerMapping","","",null,null],[5,"SDL_IsGameController","","",null,null],[5,"SDL_GameControllerNameForIndex","","",null,null],[5,"SDL_GameControllerOpen","","",null,null],[5,"SDL_GameControllerName","","",null,null],[5,"SDL_GameControllerGetAttached","","",null,null],[5,"SDL_GameControllerGetJoystick","","",null,null],[5,"SDL_GameControllerEventState","","",null,null],[5,"SDL_GameControllerUpdate","","",null,null],[5,"SDL_GameControllerGetAxisFromString","","",null,null],[5,"SDL_GameControllerGetStringForAxis","","",null,null],[5,"SDL_GameControllerGetBindForAxis","","",null,null],[5,"SDL_GameControllerGetAxis","","",null,null],[5,"SDL_GameControllerGetButtonFromString","","",null,null],[5,"SDL_GameControllerGetStringForButton","","",null,null],[5,"SDL_GameControllerGetBindForButton","","",null,null],[5,"SDL_GameControllerGetButton","","",null,null],[5,"SDL_GameControllerClose","","",null,null],[6,"SDL_GameController","","",null,null],[6,"SDL_GameControllerBindType","","",null,null],[6,"SDL_GameControllerAxis","","",null,null],[6,"SDL_GameControllerButton","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_NONE","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_BUTTON","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_AXIS","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_HAT","","",null,null],[17,"SDL_CONTROLLER_AXIS_INVALID","","",null,null],[17,"SDL_CONTROLLER_AXIS_LEFTX","","",null,null],[17,"SDL_CONTROLLER_AXIS_LEFTY","","",null,null],[17,"SDL_CONTROLLER_AXIS_RIGHTX","","",null,null],[17,"SDL_CONTROLLER_AXIS_RIGHTY","","",null,null],[17,"SDL_CONTROLLER_AXIS_TRIGGERLEFT","","",null,null],[17,"SDL_CONTROLLER_AXIS_TRIGGERRIGHT","","",null,null],[17,"SDL_CONTROLLER_AXIS_MAX","","",null,null],[17,"SDL_CONTROLLER_BUTTON_INVALID","","",null,null],[17,"SDL_CONTROLLER_BUTTON_A","","",null,null],[17,"SDL_CONTROLLER_BUTTON_B","","",null,null],[17,"SDL_CONTROLLER_BUTTON_X","","",null,null],[17,"SDL_CONTROLLER_BUTTON_Y","","",null,null],[17,"SDL_CONTROLLER_BUTTON_BACK","","",null,null],[17,"SDL_CONTROLLER_BUTTON_GUIDE","","",null,null],[17,"SDL_CONTROLLER_BUTTON_START","","",null,null],[17,"SDL_CONTROLLER_BUTTON_LEFTSTICK","","",null,null],[17,"SDL_CONTROLLER_BUTTON_RIGHTSTICK","","",null,null],[17,"SDL_CONTROLLER_BUTTON_LEFTSHOULDER","","",null,null],[17,"SDL_CONTROLLER_BUTTON_RIGHTSHOULDER","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_UP","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_DOWN","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_LEFT","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_RIGHT","","",null,null],[17,"SDL_CONTROLLER_BUTTON_MAX","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbuttonbind"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbuttonbinddata"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbuttonbinddatahat"}}],[11,"button","","",3,null],[11,"axis","","",3,null],[11,"hat","","",3,null],[0,"cpuinfo","sdl2_sys","",null,null],[5,"SDL_GetCPUCount","sdl2_sys::cpuinfo","",null,null],[5,"SDL_GetCPUCacheLineSize","","",null,null],[5,"SDL_HasRDTSC","","",null,null],[5,"SDL_HasAltiVec","","",null,null],[5,"SDL_HasMMX","","",null,null],[5,"SDL_Has3DNow","","",null,null],[5,"SDL_HasSSE","","",null,null],[5,"SDL_HasSSE2","","",null,null],[5,"SDL_HasSSE3","","",null,null],[5,"SDL_HasSSE41","","",null,null],[5,"SDL_HasSSE42","","",null,null],[5,"SDL_HasAVX","","",null,null],[5,"SDL_GetSystemRAM","","",null,null],[0,"filesystem","sdl2_sys","",null,null],[5,"SDL_GetBasePath","sdl2_sys::filesystem","",null,null],[5,"SDL_GetPrefPath","","",null,null],[0,"haptic","sdl2_sys","",null,null],[3,"SDL_HapticDirection","sdl2_sys::haptic","",null,null],[12,"type_","","",5,null],[12,"dir","","",5,null],[3,"SDL_HapticConstant","","",null,null],[12,"type_","","",6,null],[12,"direction","","",6,null],[12,"length","","",6,null],[12,"delay","","",6,null],[12,"button","","",6,null],[12,"interval","","",6,null],[12,"level","","",6,null],[12,"attack_length","","",6,null],[12,"attack_level","","",6,null],[12,"fade_length","","",6,null],[12,"fade_level","","",6,null],[3,"SDL_HapticPeriodic","","",null,null],[12,"type_","","",7,null],[12,"direction","","",7,null],[12,"length","","",7,null],[12,"delay","","",7,null],[12,"button","","",7,null],[12,"interval","","",7,null],[12,"period","","",7,null],[12,"magnitude","","",7,null],[12,"offset","","",7,null],[12,"phase","","",7,null],[12,"attack_length","","",7,null],[12,"attack_level","","",7,null],[12,"fade_length","","",7,null],[12,"fade_level","","",7,null],[3,"SDL_HapticCondition","","",null,null],[12,"type_","","",8,null],[12,"direction","","",8,null],[12,"length","","",8,null],[12,"delay","","",8,null],[12,"button","","",8,null],[12,"interval","","",8,null],[12,"right_sat","","",8,null],[12,"left_sat","","",8,null],[12,"right_coeff","","",8,null],[12,"left_coeff","","",8,null],[12,"deadband","","",8,null],[12,"center","","",8,null],[3,"SDL_HapticRamp","","",null,null],[12,"type_","","",9,null],[12,"length","","",9,null],[12,"delay","","",9,null],[12,"button","","",9,null],[12,"interval","","",9,null],[12,"start","","",9,null],[12,"end","","",9,null],[12,"attack_length","","",9,null],[12,"attack_level","","",9,null],[12,"fade_length","","",9,null],[12,"fade_level","","",9,null],[3,"SDL_HapticLeftRight","","",null,null],[12,"type_","","",10,null],[12,"length","","",10,null],[12,"large_magnitude","","",10,null],[12,"small_magnitude","","",10,null],[3,"SDL_HapticCustom","","",null,null],[12,"type_","","",11,null],[12,"direction","","",11,null],[12,"length","","",11,null],[12,"delay","","",11,null],[12,"button","","",11,null],[12,"interval","","",11,null],[12,"channels","","",11,null],[12,"period","","",11,null],[12,"samples","","",11,null],[12,"data","","",11,null],[12,"attack_length","","",11,null],[12,"attack_level","","",11,null],[12,"fade_length","","",11,null],[12,"fade_level","","",11,null],[3,"SDL_HapticEffect","","",null,null],[12,"data","","",12,null],[5,"SDL_NumHaptics","","",null,null],[5,"SDL_HapticName","","",null,null],[5,"SDL_HapticOpen","","",null,null],[5,"SDL_HapticOpened","","",null,null],[5,"SDL_HapticIndex","","",null,null],[5,"SDL_MouseIsHaptic","","",null,null],[5,"SDL_HapticOpenFromMouse","","",null,null],[5,"SDL_JoystickIsHaptic","","",null,null],[5,"SDL_HapticOpenFromJoystick","","",null,null],[5,"SDL_HapticClose","","",null,null],[5,"SDL_HapticNumEffects","","",null,null],[5,"SDL_HapticNumEffectsPlaying","","",null,null],[5,"SDL_HapticQuery","","",null,null],[5,"SDL_HapticNumAxes","","",null,null],[5,"SDL_HapticEffectSupported","","",null,null],[5,"SDL_HapticNewEffect","","",null,null],[5,"SDL_HapticUpdateEffect","","",null,null],[5,"SDL_HapticRunEffect","","",null,null],[5,"SDL_HapticStopEffect","","",null,null],[5,"SDL_HapticDestroyEffect","","",null,null],[5,"SDL_HapticGetEffectStatus","","",null,null],[5,"SDL_HapticSetGain","","",null,null],[5,"SDL_HapticSetAutocenter","","",null,null],[5,"SDL_HapticPause","","",null,null],[5,"SDL_HapticUnpause","","",null,null],[5,"SDL_HapticStopAll","","",null,null],[5,"SDL_HapticRumbleSupported","","",null,null],[5,"SDL_HapticRumbleInit","","",null,null],[5,"SDL_HapticRumblePlay","","",null,null],[5,"SDL_HapticRumbleStop","","",null,null],[6,"SDL_Haptic","","",null,null],[17,"SDL_HAPTIC_CONSTANT","","",null,null],[17,"SDL_HAPTIC_SINE","","",null,null],[17,"SDL_HAPTIC_LEFTRIGHT","","",null,null],[17,"SDL_HAPTIC_TRIANGLE","","",null,null],[17,"SDL_HAPTIC_SAWTOOTHUP","","",null,null],[17,"SDL_HAPTIC_SAWTOOTHDOWN","","",null,null],[17,"SDL_HAPTIC_RAMP","","",null,null],[17,"SDL_HAPTIC_SPRING","","",null,null],[17,"SDL_HAPTIC_DAMPER","","",null,null],[17,"SDL_HAPTIC_INERTIA","","",null,null],[17,"SDL_HAPTIC_FRICTION","","",null,null],[17,"SDL_HAPTIC_CUSTOM","","",null,null],[17,"SDL_HAPTIC_GAIN","","",null,null],[17,"SDL_HAPTIC_AUTOCENTER","","",null,null],[17,"SDL_HAPTIC_STATUS","","",null,null],[17,"SDL_HAPTIC_PAUSE","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticdirection"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticconstant"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticperiodic"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticcondition"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticramp"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticleftright"}}],[11,"type_","","",12,null],[11,"constant","","",12,null],[11,"periodic","","",12,null],[11,"condition","","",12,null],[11,"ramp","","",12,null],[11,"left_right","","",12,null],[11,"custom","","",12,null],[0,"gesture","sdl2_sys","",null,null],[5,"SDL_RecordGesture","sdl2_sys::gesture","",null,null],[5,"SDL_SaveAllDollarTemplates","","",null,null],[5,"SDL_SaveDollarTemplate","","",null,null],[5,"SDL_LoadDollarTemplates","","",null,null],[6,"SDL_GestureID","","",null,null],[0,"joystick","sdl2_sys","",null,null],[3,"SDL_JoystickGUID","sdl2_sys::joystick","",null,null],[12,"data","","",13,null],[5,"SDL_NumJoysticks","","",null,null],[5,"SDL_JoystickNameForIndex","","",null,null],[5,"SDL_JoystickOpen","","",null,null],[5,"SDL_JoystickName","","",null,null],[5,"SDL_JoystickGetDeviceGUID","","",null,null],[5,"SDL_JoystickGetGUID","","",null,null],[5,"SDL_JoystickGetGUIDString","","",null,null],[5,"SDL_JoystickGetGUIDFromString","","",null,null],[5,"SDL_JoystickGetAttached","","",null,null],[5,"SDL_JoystickInstanceID","","",null,null],[5,"SDL_JoystickNumAxes","","",null,null],[5,"SDL_JoystickNumBalls","","",null,null],[5,"SDL_JoystickNumHats","","",null,null],[5,"SDL_JoystickNumButtons","","",null,null],[5,"SDL_JoystickUpdate","","",null,null],[5,"SDL_JoystickEventState","","",null,null],[5,"SDL_JoystickGetAxis","","",null,null],[5,"SDL_JoystickGetHat","","",null,null],[5,"SDL_JoystickGetBall","","",null,null],[5,"SDL_JoystickGetButton","","",null,null],[5,"SDL_JoystickClose","","",null,null],[6,"SDL_Joystick","","",null,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sdl_joystickguid"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"sdl_joystickguid"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"sdl_joystickguid"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[0,"keyboard","sdl2_sys","",null,null],[3,"SDL_Keysym","sdl2_sys::keyboard","",null,null],[12,"scancode","","",14,null],[12,"sym","","",14,null],[12,"_mod","","",14,null],[12,"unused","","",14,null],[5,"SDL_GetKeyboardFocus","","",null,null],[5,"SDL_GetKeyboardState","","",null,null],[5,"SDL_GetModState","","",null,null],[5,"SDL_SetModState","","",null,null],[5,"SDL_GetKeyFromScancode","","",null,null],[5,"SDL_GetScancodeFromKey","","",null,null],[5,"SDL_GetScancodeName","","",null,null],[5,"SDL_GetScancodeFromName","","",null,null],[5,"SDL_GetKeyName","","",null,null],[5,"SDL_GetKeyFromName","","",null,null],[5,"SDL_StartTextInput","","",null,null],[5,"SDL_IsTextInputActive","","",null,null],[5,"SDL_StopTextInput","","",null,null],[5,"SDL_SetTextInputRect","","",null,null],[5,"SDL_HasScreenKeyboardSupport","","",null,null],[5,"SDL_IsScreenKeyboardShown","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sdl_keysym"}}],[0,"messagebox","sdl2_sys","",null,null],[3,"SDL_MessageBoxButtonData","sdl2_sys::messagebox","",null,null],[12,"flags","","",15,null],[12,"buttonid","","",15,null],[12,"text","","",15,null],[3,"SDL_MessageBoxColor","","",null,null],[12,"r","","",16,null],[12,"g","","",16,null],[12,"b","","",16,null],[3,"SDL_MessageBoxColorScheme","","",null,null],[12,"colors","","",17,null],[3,"SDL_MessageBoxData","","",null,null],[12,"flags","","",18,null],[12,"window","","",18,null],[12,"title","","",18,null],[12,"message","","",18,null],[12,"numbuttons","","",18,null],[12,"buttons","","",18,null],[12,"color_scheme","","",18,null],[4,"SDL_MessageBoxFlags","","",null,null],[13,"SDL_MESSAGEBOX_ERROR","","",19,null],[13,"SDL_MESSAGEBOX_WARNING","","",19,null],[13,"SDL_MESSAGEBOX_INFORMATION","","",19,null],[4,"SDL_MessageBoxButtonFlags","","",null,null],[13,"SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT","","",20,null],[13,"SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT","","",20,null],[4,"SDL_MessageBoxColorType","","",null,null],[13,"SDL_MESSAGEBOX_COLOR_BACKGROUND","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_TEXT","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_BUTTON_BORDER","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_MAX","","",21,null],[5,"SDL_ShowMessageBox","","",null,null],[5,"SDL_ShowSimpleMessageBox","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxbuttonflags"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxbuttondata"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolor"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolortype"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolorscheme"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxdata"}}],[0,"rect","sdl2_sys","",null,null],[3,"SDL_Point","sdl2_sys::rect","A structure that defines a two dimensional point.",null,null],[12,"x","","",22,null],[12,"y","","",22,null],[3,"SDL_Rect","","A structure that defines a rectangle, with the origin at the upper left.",null,null],[12,"x","","",23,null],[12,"y","","",23,null],[12,"w","","",23,null],[12,"h","","",23,null],[5,"SDL_HasIntersection","","",null,null],[5,"SDL_IntersectRect","","",null,null],[5,"SDL_UnionRect","","",null,null],[5,"SDL_EnclosePoints","","",null,null],[5,"SDL_IntersectRectAndLine","","",null,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"sdl_point"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"sdl_point"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"sdl_rect"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"sdl_rect"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[0,"pixels","sdl2_sys","",null,null],[3,"SDL_Color","sdl2_sys::pixels","",null,null],[12,"r","","",24,null],[12,"g","","",24,null],[12,"b","","",24,null],[12,"a","","",24,null],[3,"SDL_Palette","","",null,null],[12,"ncolors","","",25,null],[12,"colors","","",25,null],[12,"version","","",25,null],[12,"refcount","","",25,null],[3,"SDL_PixelFormat","","",null,null],[12,"format","","",26,null],[12,"palette","","",26,null],[12,"BitsPerPixel","","",26,null],[12,"BytesPerPixel","","",26,null],[12,"padding","","",26,null],[12,"Rmask","","",26,null],[12,"Gmask","","",26,null],[12,"Bmask","","",26,null],[12,"Amask","","",26,null],[12,"Rloss","","",26,null],[12,"Gloss","","",26,null],[12,"Bloss","","",26,null],[12,"Aloss","","",26,null],[12,"Rshift","","",26,null],[12,"Gshift","","",26,null],[12,"Bshift","","",26,null],[12,"Ashift","","",26,null],[12,"refcount","","",26,null],[12,"next","","",26,null],[5,"SDL_GetRGB","","",null,null],[5,"SDL_GetRGBA","","",null,null],[5,"SDL_MapRGB","","",null,null],[5,"SDL_MapRGBA","","",null,null],[5,"SDL_PixelFormatEnumToMasks","","",null,null],[5,"SDL_MasksToPixelFormatEnum","","",null,null],[5,"SDL_AllocPalette","","",null,null],[5,"SDL_FreePalette","","",null,null],[5,"SDL_SetPaletteColors","","",null,null],[6,"SDL_PixelFormatEnum","","",null,null],[17,"SDL_PIXELFORMAT_UNKNOWN","","",null,null],[17,"SDL_PIXELFORMAT_INDEX1LSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX1MSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX4LSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX4MSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX8","","",null,null],[17,"SDL_PIXELFORMAT_RGB332","","",null,null],[17,"SDL_PIXELFORMAT_RGB444","","",null,null],[17,"SDL_PIXELFORMAT_RGB555","","",null,null],[17,"SDL_PIXELFORMAT_BGR555","","",null,null],[17,"SDL_PIXELFORMAT_ARGB4444","","",null,null],[17,"SDL_PIXELFORMAT_RGBA4444","","",null,null],[17,"SDL_PIXELFORMAT_ABGR4444","","",null,null],[17,"SDL_PIXELFORMAT_BGRA4444","","",null,null],[17,"SDL_PIXELFORMAT_ARGB1555","","",null,null],[17,"SDL_PIXELFORMAT_RGBA5551","","",null,null],[17,"SDL_PIXELFORMAT_ABGR1555","","",null,null],[17,"SDL_PIXELFORMAT_BGRA5551","","",null,null],[17,"SDL_PIXELFORMAT_RGB565","","",null,null],[17,"SDL_PIXELFORMAT_BGR565","","",null,null],[17,"SDL_PIXELFORMAT_RGB24","","",null,null],[17,"SDL_PIXELFORMAT_BGR24","","",null,null],[17,"SDL_PIXELFORMAT_RGB888","","",null,null],[17,"SDL_PIXELFORMAT_RGBX8888","","",null,null],[17,"SDL_PIXELFORMAT_BGR888","","",null,null],[17,"SDL_PIXELFORMAT_BGRX8888","","",null,null],[17,"SDL_PIXELFORMAT_ARGB8888","","",null,null],[17,"SDL_PIXELFORMAT_RGBA8888","","",null,null],[17,"SDL_PIXELFORMAT_ABGR8888","","",null,null],[17,"SDL_PIXELFORMAT_BGRA8888","","",null,null],[17,"SDL_PIXELFORMAT_ARGB2101010","","",null,null],[17,"SDL_PIXELFORMAT_YV12","","",null,null],[17,"SDL_PIXELFORMAT_IYUV","","",null,null],[17,"SDL_PIXELFORMAT_YUY2","","",null,null],[17,"SDL_PIXELFORMAT_UYVY","","",null,null],[17,"SDL_PIXELFORMAT_YVYU","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sdl_color"}}],[0,"render","sdl2_sys","",null,null],[3,"SDL_RendererInfo","sdl2_sys::render","",null,null],[12,"name","","",27,null],[12,"flags","","",27,null],[12,"num_texture_formats","","",27,null],[12,"texture_formats","","",27,null],[12,"max_texture_width","","",27,null],[12,"max_texture_height","","",27,null],[3,"SDL_Renderer","","",null,null],[3,"SDL_Texture","","",null,null],[5,"SDL_GetNumRenderDrivers","","",null,null],[5,"SDL_GetRenderDriverInfo","","",null,null],[5,"SDL_CreateWindowAndRenderer","","",null,null],[5,"SDL_CreateRenderer","","",null,null],[5,"SDL_CreateSoftwareRenderer","","",null,null],[5,"SDL_GetRenderer","","",null,null],[5,"SDL_GetRendererInfo","","",null,null],[5,"SDL_GetRendererOutputSize","","",null,null],[5,"SDL_CreateTexture","","",null,null],[5,"SDL_CreateTextureFromSurface","","",null,null],[5,"SDL_QueryTexture","","",null,null],[5,"SDL_SetTextureColorMod","","",null,null],[5,"SDL_GetTextureColorMod","","",null,null],[5,"SDL_SetTextureAlphaMod","","",null,null],[5,"SDL_GetTextureAlphaMod","","",null,null],[5,"SDL_SetTextureBlendMode","","",null,null],[5,"SDL_GetTextureBlendMode","","",null,null],[5,"SDL_UpdateTexture","","",null,null],[5,"SDL_UpdateYUVTexture","","",null,null],[5,"SDL_LockTexture","","",null,null],[5,"SDL_UnlockTexture","","",null,null],[5,"SDL_RenderTargetSupported","","",null,null],[5,"SDL_SetRenderTarget","","",null,null],[5,"SDL_GetRenderTarget","","",null,null],[5,"SDL_RenderSetLogicalSize","","",null,null],[5,"SDL_RenderGetLogicalSize","","",null,null],[5,"SDL_RenderSetViewport","","",null,null],[5,"SDL_RenderGetViewport","","",null,null],[5,"SDL_RenderSetClipRect","","",null,null],[5,"SDL_RenderGetClipRect","","",null,null],[5,"SDL_RenderSetScale","","",null,null],[5,"SDL_RenderGetScale","","",null,null],[5,"SDL_SetRenderDrawColor","","",null,null],[5,"SDL_GetRenderDrawColor","","",null,null],[5,"SDL_SetRenderDrawBlendMode","","",null,null],[5,"SDL_GetRenderDrawBlendMode","","",null,null],[5,"SDL_RenderClear","","",null,null],[5,"SDL_RenderDrawPoint","","",null,null],[5,"SDL_RenderDrawPoints","","",null,null],[5,"SDL_RenderDrawLine","","",null,null],[5,"SDL_RenderDrawLines","","",null,null],[5,"SDL_RenderDrawRect","","",null,null],[5,"SDL_RenderDrawRects","","",null,null],[5,"SDL_RenderFillRect","","",null,null],[5,"SDL_RenderFillRects","","",null,null],[5,"SDL_RenderCopy","","",null,null],[5,"SDL_RenderCopyEx","","",null,null],[5,"SDL_RenderReadPixels","","",null,null],[5,"SDL_RenderPresent","","",null,null],[5,"SDL_DestroyTexture","","",null,null],[5,"SDL_DestroyRenderer","","",null,null],[5,"SDL_GL_BindTexture","","",null,null],[5,"SDL_GL_UnbindTexture","","",null,null],[6,"SDL_RendererFlags","","",null,null],[6,"SDL_TextureAccess","","",null,null],[6,"SDL_TextureModulate","","",null,null],[6,"SDL_RendererFlip","","",null,null],[6,"SDL_BlendMode","","",null,null],[17,"SDL_RENDERER_SOFTWARE","","",null,null],[17,"SDL_RENDERER_ACCELERATED","","",null,null],[17,"SDL_RENDERER_PRESENTVSYNC","","",null,null],[17,"SDL_RENDERER_TARGETTEXTURE","","",null,null],[17,"SDL_TEXTUREACCESS_STATIC","","",null,null],[17,"SDL_TEXTUREACCESS_STREAMING","","",null,null],[17,"SDL_TEXTUREACCESS_TARGET","","",null,null],[17,"SDL_TEXTUREMODULATE_NONE","","",null,null],[17,"SDL_TEXTUREMODULATE_COLOR","","",null,null],[17,"SDL_TEXTUREMODULATE_ALPHA","","",null,null],[17,"SDL_FLIP_NONE","","",null,null],[17,"SDL_FLIP_HORIZONTAL","","",null,null],[17,"SDL_FLIP_VERTICAL","","",null,null],[17,"SDL_BLENDMODE_NONE","","",null,null],[17,"SDL_BLENDMODE_BLEND","","",null,null],[17,"SDL_BLENDMODE_ADD","","",null,null],[17,"SDL_BLENDMODE_MOD","","",null,null],[0,"rwops","sdl2_sys","",null,null],[3,"SDL_RWops","sdl2_sys::rwops","",null,null],[12,"size","","",28,null],[12,"seek","","",28,null],[12,"read","","",28,null],[12,"write","","",28,null],[12,"close","","",28,null],[12,"type_","","",28,null],[5,"SDL_RWFromFile","","",null,null],[5,"SDL_RWFromFP","","",null,null],[5,"SDL_RWFromMem","","",null,null],[5,"SDL_RWFromConstMem","","",null,null],[5,"SDL_AllocRW","","",null,null],[5,"SDL_FreeRW","","",null,null],[7,"RW_SEEK_SET","","",null,null],[7,"RW_SEEK_CUR","","",null,null],[7,"RW_SEEK_END","","",null,null],[0,"surface","sdl2_sys","",null,null],[3,"SDL_BlitMap","sdl2_sys::surface","",null,null],[3,"SDL_Surface","","",null,null],[12,"flags","","",29,null],[12,"format","","",29,null],[12,"w","","",29,null],[12,"h","","",29,null],[12,"pitch","","",29,null],[12,"pixels","","",29,null],[12,"userdata","","",29,null],[12,"locked","","",29,null],[12,"lock_data","","",29,null],[12,"clip_rect","","",29,null],[12,"map","","",29,null],[12,"refcount","","",29,null],[5,"SDL_CreateRGBSurface","","",null,null],[5,"SDL_CreateRGBSurfaceFrom","","",null,null],[5,"SDL_FreeSurface","","",null,null],[5,"SDL_SetSurfacePalette","","",null,null],[5,"SDL_LockSurface","","",null,null],[5,"SDL_UnlockSurface","","",null,null],[5,"SDL_LoadBMP_RW","","",null,null],[5,"SDL_SaveBMP_RW","","",null,null],[5,"SDL_SetSurfaceRLE","","",null,null],[5,"SDL_SetColorKey","","",null,null],[5,"SDL_GetColorKey","","",null,null],[5,"SDL_SetSurfaceColorMod","","",null,null],[5,"SDL_GetSurfaceColorMod","","",null,null],[5,"SDL_SetSurfaceAlphaMod","","",null,null],[5,"SDL_GetSurfaceAlphaMod","","",null,null],[5,"SDL_SetSurfaceBlendMode","","",null,null],[5,"SDL_GetSurfaceBlendMode","","",null,null],[5,"SDL_SetClipRect","","",null,null],[5,"SDL_GetClipRect","","",null,null],[5,"SDL_ConvertSurface","","",null,null],[5,"SDL_ConvertSurfaceFormat","","",null,null],[5,"SDL_ConvertPixels","","",null,null],[5,"SDL_FillRect","","",null,null],[5,"SDL_FillRects","","",null,null],[5,"SDL_UpperBlit","","",null,null],[5,"SDL_LowerBlit","","",null,null],[5,"SDL_SoftStretch","","",null,null],[5,"SDL_UpperBlitScaled","","",null,null],[5,"SDL_LowerBlitScaled","","",null,null],[6,"SDL_SurfaceFlag","","",null,null],[17,"SDL_SWSURFACE","","",null,null],[17,"SDL_PREALLOC","","",null,null],[17,"SDL_RLEACCEL","","",null,null],[17,"SDL_DONTFREE","","",null,null],[0,"touch","sdl2_sys","",null,null],[3,"Finger","sdl2_sys::touch","",null,null],[5,"SDL_GetNumTouchDevices","","",null,null],[5,"SDL_GetTouchDevice","","",null,null],[5,"SDL_GetNumTouchFingers","","",null,null],[5,"SDL_GetTouchFinger","","",null,null],[6,"SDL_TouchID","","",null,null],[6,"SDL_FingerID","","",null,null],[6,"SDL_Finger","","",null,null],[6,"TouchDevice","","",null,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"finger"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"finger"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"finger"}}],[0,"video","sdl2_sys","",null,null],[3,"SDL_Window","sdl2_sys::video","",null,null],[3,"SDL_DisplayMode","","",null,null],[12,"format","","",31,null],[12,"w","","",31,null],[12,"h","","",31,null],[12,"refresh_rate","","",31,null],[12,"driverdata","","",31,null],[4,"SDL_WindowFlags","","",null,null],[13,"SDL_WINDOW_FULLSCREEN","","",32,null],[13,"SDL_WINDOW_OPENGL","","",32,null],[13,"SDL_WINDOW_SHOWN","","",32,null],[13,"SDL_WINDOW_HIDDEN","","",32,null],[13,"SDL_WINDOW_BORDERLESS","","",32,null],[13,"SDL_WINDOW_RESIZABLE","","",32,null],[13,"SDL_WINDOW_MINIMIZED","","",32,null],[13,"SDL_WINDOW_MAXIMIZED","","",32,null],[13,"SDL_WINDOW_INPUT_GRABBED","","",32,null],[13,"SDL_WINDOW_INPUT_FOCUS","","",32,null],[13,"SDL_WINDOW_MOUSE_FOCUS","","",32,null],[13,"SDL_WINDOW_FULLSCREEN_DESKTOP","","",32,null],[13,"SDL_WINDOW_FOREIGN","","",32,null],[13,"SDL_WINDOW_ALLOW_HIGHDPI","","",32,null],[4,"SDL_WindowEventID","","",null,null],[13,"SDL_WINDOWEVENT_NONE","","",33,null],[13,"SDL_WINDOWEVENT_SHOWN","","",33,null],[13,"SDL_WINDOWEVENT_HIDDEN","","",33,null],[13,"SDL_WINDOWEVENT_EXPOSED","","",33,null],[13,"SDL_WINDOWEVENT_MOVED","","",33,null],[13,"SDL_WINDOWEVENT_RESIZED","","",33,null],[13,"SDL_WINDOWEVENT_SIZE_CHANGED","","",33,null],[13,"SDL_WINDOWEVENT_MINIMIZED","","",33,null],[13,"SDL_WINDOWEVENT_MAXIMIZED","","",33,null],[13,"SDL_WINDOWEVENT_RESTORED","","",33,null],[13,"SDL_WINDOWEVENT_ENTER","","",33,null],[13,"SDL_WINDOWEVENT_LEAVE","","",33,null],[13,"SDL_WINDOWEVENT_FOCUS_GAINED","","",33,null],[13,"SDL_WINDOWEVENT_FOCUS_LOST","","",33,null],[13,"SDL_WINDOWEVENT_CLOSE","","",33,null],[4,"SDL_GLattr","","",null,null],[13,"SDL_GL_RED_SIZE","","",34,null],[13,"SDL_GL_GREEN_SIZE","","",34,null],[13,"SDL_GL_BLUE_SIZE","","",34,null],[13,"SDL_GL_ALPHA_SIZE","","",34,null],[13,"SDL_GL_BUFFER_SIZE","","",34,null],[13,"SDL_GL_DOUBLEBUFFER","","",34,null],[13,"SDL_GL_DEPTH_SIZE","","",34,null],[13,"SDL_GL_STENCIL_SIZE","","",34,null],[13,"SDL_GL_ACCUM_RED_SIZE","","",34,null],[13,"SDL_GL_ACCUM_GREEN_SIZE","","",34,null],[13,"SDL_GL_ACCUM_BLUE_SIZE","","",34,null],[13,"SDL_GL_ACCUM_ALPHA_SIZE","","",34,null],[13,"SDL_GL_STEREO","","",34,null],[13,"SDL_GL_MULTISAMPLEBUFFERS","","",34,null],[13,"SDL_GL_MULTISAMPLESAMPLES","","",34,null],[13,"SDL_GL_ACCELERATED_VISUAL","","",34,null],[13,"SDL_GL_RETAINED_BACKING","","",34,null],[13,"SDL_GL_CONTEXT_MAJOR_VERSION","","",34,null],[13,"SDL_GL_CONTEXT_MINOR_VERSION","","",34,null],[13,"SDL_GL_CONTEXT_EGL","","",34,null],[13,"SDL_GL_CONTEXT_FLAGS","","",34,null],[13,"SDL_GL_CONTEXT_PROFILE_MASK","","",34,null],[13,"SDL_GL_SHARE_WITH_CURRENT_CONTEXT","","",34,null],[13,"SDL_GL_FRAMEBUFFER_SRGB_CAPABLE","","",34,null],[4,"SDL_GLprofile","","",null,null],[13,"SDL_GL_CONTEXT_PROFILE_CORE","","",35,null],[13,"SDL_GL_CONTEXT_PROFILE_COMPATIBILITY","","",35,null],[13,"SDL_GL_CONTEXT_PROFILE_ES","","",35,null],[5,"SDL_GetNumVideoDrivers","","",null,null],[5,"SDL_GetVideoDriver","","",null,null],[5,"SDL_VideoInit","","",null,null],[5,"SDL_VideoQuit","","",null,null],[5,"SDL_GetCurrentVideoDriver","","",null,null],[5,"SDL_GetNumVideoDisplays","","",null,null],[5,"SDL_GetDisplayName","","",null,null],[5,"SDL_GetDisplayBounds","","",null,null],[5,"SDL_GetNumDisplayModes","","",null,null],[5,"SDL_GetDisplayMode","","",null,null],[5,"SDL_GetDesktopDisplayMode","","",null,null],[5,"SDL_GetCurrentDisplayMode","","",null,null],[5,"SDL_GetClosestDisplayMode","","",null,null],[5,"SDL_GetWindowDisplayIndex","","",null,null],[5,"SDL_SetWindowDisplayMode","","",null,null],[5,"SDL_GetWindowDisplayMode","","",null,null],[5,"SDL_GetDisplayDPI","","",null,null],[5,"SDL_GetWindowPixelFormat","","",null,null],[5,"SDL_CreateWindow","","",null,null],[5,"SDL_CreateWindowFrom","","",null,null],[5,"SDL_GetWindowID","","",null,null],[5,"SDL_GetWindowFromID","","",null,null],[5,"SDL_GetWindowFlags","","",null,null],[5,"SDL_SetWindowTitle","","",null,null],[5,"SDL_GetWindowTitle","","",null,null],[5,"SDL_SetWindowIcon","","",null,null],[5,"SDL_SetWindowData","","",null,null],[5,"SDL_GetWindowData","","",null,null],[5,"SDL_SetWindowPosition","","",null,null],[5,"SDL_GetWindowPosition","","",null,null],[5,"SDL_SetWindowSize","","",null,null],[5,"SDL_GetWindowSize","","",null,null],[5,"SDL_SetWindowMinimumSize","","",null,null],[5,"SDL_GetWindowMinimumSize","","",null,null],[5,"SDL_SetWindowMaximumSize","","",null,null],[5,"SDL_GetWindowMaximumSize","","",null,null],[5,"SDL_SetWindowBordered","","",null,null],[5,"SDL_ShowWindow","","",null,null],[5,"SDL_HideWindow","","",null,null],[5,"SDL_RaiseWindow","","",null,null],[5,"SDL_MaximizeWindow","","",null,null],[5,"SDL_MinimizeWindow","","",null,null],[5,"SDL_RestoreWindow","","",null,null],[5,"SDL_SetWindowFullscreen","","",null,null],[5,"SDL_GetWindowSurface","","",null,null],[5,"SDL_UpdateWindowSurface","","",null,null],[5,"SDL_UpdateWindowSurfaceRects","","",null,null],[5,"SDL_SetWindowGrab","","",null,null],[5,"SDL_GetWindowGrab","","",null,null],[5,"SDL_SetWindowBrightness","","",null,null],[5,"SDL_GetWindowBrightness","","",null,null],[5,"SDL_SetWindowGammaRamp","","",null,null],[5,"SDL_GetWindowGammaRamp","","",null,null],[5,"SDL_DestroyWindow","","",null,null],[5,"SDL_IsScreenSaverEnabled","","",null,null],[5,"SDL_EnableScreenSaver","","",null,null],[5,"SDL_DisableScreenSaver","","",null,null],[5,"SDL_GL_GetDrawableSize","","",null,null],[5,"SDL_GL_LoadLibrary","","",null,null],[5,"SDL_GL_GetProcAddress","","",null,null],[5,"SDL_GL_UnloadLibrary","","",null,null],[5,"SDL_GL_ExtensionSupported","","",null,null],[5,"SDL_GL_SetAttribute","","",null,null],[5,"SDL_GL_GetAttribute","","",null,null],[5,"SDL_GL_CreateContext","","",null,null],[5,"SDL_GL_MakeCurrent","","",null,null],[5,"SDL_GL_GetCurrentWindow","","",null,null],[5,"SDL_GL_GetCurrentContext","","",null,null],[5,"SDL_GL_SetSwapInterval","","",null,null],[5,"SDL_GL_GetSwapInterval","","",null,null],[5,"SDL_GL_SwapWindow","","",null,null],[5,"SDL_GL_DeleteContext","","",null,null],[6,"SDL_WindowPos","","",null,null],[6,"SDL_GLContext","","",null,null],[17,"SDL_WINDOWPOS_CENTERED","","",null,null],[17,"SDL_WINDOWPOS_UNDEFINED","","",null,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sdl_windowflags"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sdl_windoweventid"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sdl_glattr"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sdl_glprofile"}}],[0,"mouse","sdl2_sys","",null,null],[5,"SDL_GetMouseFocus","sdl2_sys::mouse","",null,null],[5,"SDL_GetMouseState","","",null,null],[5,"SDL_GetRelativeMouseState","","",null,null],[5,"SDL_WarpMouseInWindow","","",null,null],[5,"SDL_SetRelativeMouseMode","","",null,null],[5,"SDL_GetRelativeMouseMode","","",null,null],[5,"SDL_CreateCursor","","",null,null],[5,"SDL_CreateColorCursor","","",null,null],[5,"SDL_CreateSystemCursor","","",null,null],[5,"SDL_SetCursor","","",null,null],[5,"SDL_GetCursor","","",null,null],[5,"SDL_GetDefaultCursor","","",null,null],[5,"SDL_FreeCursor","","",null,null],[5,"SDL_ShowCursor","","",null,null],[6,"SDL_Cursor","","",null,null],[6,"SDL_SystemCursor","","",null,null],[17,"SDL_SYSTEM_CURSOR_ARROW","","",null,null],[17,"SDL_SYSTEM_CURSOR_IBEAM","","",null,null],[17,"SDL_SYSTEM_CURSOR_WAIT","","",null,null],[17,"SDL_SYSTEM_CURSOR_CROSSHAIR","","",null,null],[17,"SDL_SYSTEM_CURSOR_WAITARROW","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZENWSE","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZENESW","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZEWE","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZENS","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZEALL","","",null,null],[17,"SDL_SYSTEM_CURSOR_NO","","",null,null],[17,"SDL_SYSTEM_CURSOR_HAND","","",null,null],[17,"SDL_NUM_SYSTEM_CURSORS","","",null,null],[17,"SDL_BUTTON_UNKNOWN","","",null,null],[17,"SDL_BUTTON_LEFT","","",null,null],[17,"SDL_BUTTON_MIDDLE","","",null,null],[17,"SDL_BUTTON_RIGHT","","",null,null],[17,"SDL_BUTTON_X1","","",null,null],[17,"SDL_BUTTON_X2","","",null,null],[17,"SDL_BUTTON_LMASK","","",null,null],[17,"SDL_BUTTON_MMASK","","",null,null],[17,"SDL_BUTTON_RMASK","","",null,null],[17,"SDL_BUTTON_X1MASK","","",null,null],[17,"SDL_BUTTON_X2MASK","","",null,null],[0,"sdl","sdl2_sys","",null,null],[5,"SDL_ClearError","sdl2_sys::sdl","",null,null],[5,"SDL_Error","","",null,null],[5,"SDL_SetError","","",null,null],[5,"SDL_GetError","","",null,null],[5,"SDL_Init","","",null,null],[5,"SDL_InitSubSystem","","",null,null],[5,"SDL_QuitSubSystem","","",null,null],[5,"SDL_WasInit","","",null,null],[5,"SDL_Quit","","",null,null],[6,"SDL_bool","","",null,null],[6,"SDL_errorcode","","",null,null],[6,"SDL_InitFlag","","",null,null],[17,"SDL_ENOMEM","","",null,null],[17,"SDL_EFREAD","","",null,null],[17,"SDL_EFWRITE","","",null,null],[17,"SDL_EFSEEK","","",null,null],[17,"SDL_UNSUPPORTED","","",null,null],[17,"SDL_LASTERROR","","",null,null],[17,"SDL_INIT_TIMER","","",null,null],[17,"SDL_INIT_AUDIO","","",null,null],[17,"SDL_INIT_VIDEO","","",null,null],[17,"SDL_INIT_JOYSTICK","","",null,null],[17,"SDL_INIT_HAPTIC","","",null,null],[17,"SDL_INIT_GAMECONTROLLER","","",null,null],[17,"SDL_INIT_EVENTS","","",null,null],[17,"SDL_INIT_NOPARACHUTE","","",null,null],[17,"SDL_INIT_EVERYTHING","","",null,null],[0,"timer","sdl2_sys","",null,null],[5,"SDL_GetTicks","sdl2_sys::timer","",null,null],[5,"SDL_GetPerformanceCounter","","",null,null],[5,"SDL_GetPerformanceFrequency","","",null,null],[5,"SDL_Delay","","",null,null],[5,"SDL_AddTimer","","",null,null],[5,"SDL_RemoveTimer","","",null,null],[6,"SDL_TimerCallback","","",null,null],[6,"SDL_TimerID","","",null,null],[0,"hint","sdl2_sys","",null,null],[4,"SDL_HintPriority","sdl2_sys::hint","",null,null],[13,"SDL_HINT_DEFAULT","","",36,null],[13,"SDL_HINT_NORMAL","","",36,null],[13,"SDL_HINT_OVERRIDE","","",36,null],[5,"SDL_SetHint","","",null,null],[5,"SDL_GetHint","","",null,null],[5,"SDL_SetHintWithPriority","","",null,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hintpriority"}}],[0,"log","sdl2_sys","",null,null],[4,"SDL_LOG_CATEGORY","sdl2_sys::log","\\brief The predefined log categories",null,null],[13,"APPLICATION","","",37,null],[13,"ERROR","","",37,null],[13,"ASSERT","","",37,null],[13,"SYSTEM","","",37,null],[13,"AUDIO","","",37,null],[13,"VIDEO","","",37,null],[13,"RENDER","","",37,null],[13,"INPUT","","",37,null],[13,"TEST","","",37,null],[13,"RESERVED1","","",37,null],[13,"RESERVED2","","",37,null],[13,"RESERVED3","","",37,null],[13,"RESERVED4","","",37,null],[13,"RESERVED5","","",37,null],[13,"RESERVED6","","",37,null],[13,"RESERVED7","","",37,null],[13,"RESERVED8","","",37,null],[13,"RESERVED9","","",37,null],[13,"RESERVED10","","",37,null],[13,"CUSTOM","","",37,null],[4,"SDL_LogPriority","","\\brief The predefined log priorities",null,null],[13,"SDL_LOG_PRIORITY_VERBOSE","","",38,null],[13,"SDL_LOG_PRIORITY_DEBUG","","",38,null],[13,"SDL_LOG_PRIORITY_INFO","","",38,null],[13,"SDL_LOG_PRIORITY_WARN","","",38,null],[13,"SDL_LOG_PRIORITY_ERROR","","",38,null],[13,"SDL_LOG_PRIORITY_CRITICAL","","",38,null],[13,"SDL_NUM_LOG_PRIORITIES","","",38,null],[5,"SDL_LogSetAllPriority","","\\brief Set the priority of all log categories",null,null],[5,"SDL_LogSetPriority","","\\brief Set the priority of a particular log category",null,null],[5,"SDL_LogGetPriority","","\\brief Get the priority of a particular log category",null,null],[5,"SDL_LogResetPriorities","","\\brief Reset all priorities to default.",null,null],[5,"SDL_Log","","\\brief Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO",null,null],[5,"SDL_LogVerbose","","\\brief Log a message with SDL_LOG_PRIORITY_VERBOSE",null,null],[5,"SDL_LogDebug","","\\brief Log a message with SDL_LOG_PRIORITY_DEBUG",null,null],[5,"SDL_LogInfo","","\\brief Log a message with SDL_LOG_PRIORITY_INFO",null,null],[5,"SDL_LogWarn","","\\brief Log a message with SDL_LOG_PRIORITY_WARN",null,null],[5,"SDL_LogError","","\\brief Log a message with SDL_LOG_PRIORITY_ERROR",null,null],[5,"SDL_LogCritical","","\\brief Log a message with SDL_LOG_PRIORITY_CRITICAL",null,null],[5,"SDL_LogMessage","","\\brief Log a message with the specified category and priority.",null,null],[5,"SDL_LogGetOutputFunction","","\\brief Get the current log output function.",null,null],[5,"SDL_LogSetOutputFunction","","\\brief This function allows you to replace the default log output function with one of your own.",null,null],[6,"SDL_LogOutputFunction","","\\brief The prototype for the log output function",null,null],[17,"SDL_LOG_CATEGORY_APPLICATION","","",null,null],[17,"SDL_LOG_CATEGORY_ERROR","","",null,null],[17,"SDL_LOG_CATEGORY_ASSERT","","",null,null],[17,"SDL_LOG_CATEGORY_SYSTEM","","",null,null],[17,"SDL_LOG_CATEGORY_AUDIO","","",null,null],[17,"SDL_LOG_CATEGORY_VIDEO","","",null,null],[17,"SDL_LOG_CATEGORY_RENDER","","",null,null],[17,"SDL_LOG_CATEGORY_INPUT","","",null,null],[17,"SDL_LOG_CATEGORY_TEST","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED1","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED2","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED3","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED4","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED5","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED6","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED7","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED8","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED9","","",null,null],[17,"SDL_LOG_CATEGORY_RESERVED10","","",null,null],[17,"SDL_LOG_CATEGORY_CUSTOM","","",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"sdl_log_category"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"sdl_log_category"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"sdl_logpriority"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"sdl_logpriority"}],"output":{"name":"bool"}}],[11,"hash","","",38,null]],"paths":[[3,"SDL_AudioSpec"],[3,"SDL_AudioCVT"],[3,"SDL_GameControllerButtonBind"],[3,"SDL_GameControllerButtonBindData"],[3,"SDL_GameControllerButtonBindDataHat"],[3,"SDL_HapticDirection"],[3,"SDL_HapticConstant"],[3,"SDL_HapticPeriodic"],[3,"SDL_HapticCondition"],[3,"SDL_HapticRamp"],[3,"SDL_HapticLeftRight"],[3,"SDL_HapticCustom"],[3,"SDL_HapticEffect"],[3,"SDL_JoystickGUID"],[3,"SDL_Keysym"],[3,"SDL_MessageBoxButtonData"],[3,"SDL_MessageBoxColor"],[3,"SDL_MessageBoxColorScheme"],[3,"SDL_MessageBoxData"],[4,"SDL_MessageBoxFlags"],[4,"SDL_MessageBoxButtonFlags"],[4,"SDL_MessageBoxColorType"],[3,"SDL_Point"],[3,"SDL_Rect"],[3,"SDL_Color"],[3,"SDL_Palette"],[3,"SDL_PixelFormat"],[3,"SDL_RendererInfo"],[3,"SDL_RWops"],[3,"SDL_Surface"],[3,"Finger"],[3,"SDL_DisplayMode"],[4,"SDL_WindowFlags"],[4,"SDL_WindowEventID"],[4,"SDL_GLattr"],[4,"SDL_GLprofile"],[4,"SDL_HintPriority"],[4,"SDL_LOG_CATEGORY"],[4,"SDL_LogPriority"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","",2,null],[10,"size","","",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",2,null],[10,"ptr_mut","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"push_all_move","","Append elements from an iterator.",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","",4,null],[11,"insert_from_slice","","",4,null],[11,"extend_from_slice","","",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
initSearch(searchIndex);
